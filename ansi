<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>public/index.js</title>
<link rel="stylesheet" type="text/css" href="highlight.css">
</head>
<body class="hl">
<pre class="hl"><span class="hl opt">(</span><span class="hl kwa">function</span> <span class="hl kwd">e</span><span class="hl opt">(</span>t<span class="hl opt">,</span>n<span class="hl opt">,</span>r<span class="hl opt">){</span><span class="hl kwa">function</span> <span class="hl kwd">s</span><span class="hl opt">(</span>o<span class="hl opt">,</span>u<span class="hl opt">){</span><span class="hl kwa">if</span><span class="hl opt">(!</span>n<span class="hl opt">[</span>o<span class="hl opt">]){</span><span class="hl kwa">if</span><span class="hl opt">(!</span>t<span class="hl opt">[</span>o<span class="hl opt">]){</span><span class="hl kwa">var</span> a<span class="hl opt">=</span><span class="hl kwa">typeof</span> require<span class="hl opt">==</span><span class="hl str">&quot;function&quot;</span><span class="hl opt">&amp;&amp;</span>require<span class="hl opt">;</span><span class="hl kwa">if</span><span class="hl opt">(!</span>u<span class="hl opt">&amp;&amp;</span>a<span class="hl opt">)</span><span class="hl kwa">return</span> <span class="hl kwd">a</span><span class="hl opt">(</span>o<span class="hl opt">,!</span><span class="hl num">0</span><span class="hl opt">);</span><span class="hl kwa">if</span><span class="hl opt">(</span>i<span class="hl opt">)</span><span class="hl kwa">return</span> <span class="hl kwd">i</span><span class="hl opt">(</span>o<span class="hl opt">,!</span><span class="hl num">0</span><span class="hl opt">);</span><span class="hl kwa">var</span> f<span class="hl opt">=</span><span class="hl kwa">new</span> <span class="hl kwd">Error</span><span class="hl opt">(</span><span class="hl str">&quot;Cannot find module '&quot;</span><span class="hl opt">+</span>o<span class="hl opt">+</span><span class="hl str">&quot;'&quot;</span><span class="hl opt">);</span><span class="hl kwa">throw</span> f<span class="hl opt">.</span>code<span class="hl opt">=</span><span class="hl str">&quot;MODULE_NOT_FOUND&quot;</span><span class="hl opt">,</span>f<span class="hl opt">}</span><span class="hl kwa">var</span> l<span class="hl opt">=</span>n<span class="hl opt">[</span>o<span class="hl opt">]={</span>exports<span class="hl opt">:{}};</span>t<span class="hl opt">[</span>o<span class="hl opt">][</span><span class="hl num">0</span><span class="hl opt">].</span><span class="hl kwd">call</span><span class="hl opt">(</span>l<span class="hl opt">.</span>exports<span class="hl opt">,</span><span class="hl kwa">function</span><span class="hl opt">(</span>e<span class="hl opt">){</span><span class="hl kwa">var</span> n<span class="hl opt">=</span>t<span class="hl opt">[</span>o<span class="hl opt">][</span><span class="hl num">1</span><span class="hl opt">][</span>e<span class="hl opt">];</span><span class="hl kwa">return</span> <span class="hl kwd">s</span><span class="hl opt">(</span>n<span class="hl opt">?</span>n<span class="hl opt">:</span>e<span class="hl opt">)},</span>l<span class="hl opt">,</span>l<span class="hl opt">.</span>exports<span class="hl opt">,</span>e<span class="hl opt">,</span>t<span class="hl opt">,</span>n<span class="hl opt">,</span>r<span class="hl opt">)}</span><span class="hl kwa">return</span> n<span class="hl opt">[</span>o<span class="hl opt">].</span>exports<span class="hl opt">}</span><span class="hl kwa">var</span> i<span class="hl opt">=</span><span class="hl kwa">typeof</span> require<span class="hl opt">==</span><span class="hl str">&quot;function&quot;</span><span class="hl opt">&amp;&amp;</span>require<span class="hl opt">;</span><span class="hl kwa">for</span><span class="hl opt">(</span><span class="hl kwa">var</span> o<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>o<span class="hl opt">&lt;</span>r<span class="hl opt">.</span>length<span class="hl opt">;</span>o<span class="hl opt">++)</span><span class="hl kwd">s</span><span class="hl opt">(</span>r<span class="hl opt">[</span>o<span class="hl opt">]);</span><span class="hl kwa">return</span> s<span class="hl opt">})({</span><span class="hl num">1</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>require<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl kwa">var</span> MuxDemux <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'mux-demux'</span><span class="hl opt">)</span>
<span class="hl kwa">var</span> xtend <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'xtend'</span><span class="hl opt">)</span>
<span class="hl kwa">var</span> pull <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'../util/pull'</span><span class="hl opt">)</span>

<span class="hl kwa">var</span> mx
<span class="hl kwa">var</span> queue <span class="hl opt">= []</span>
<span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'reconnect-engine'</span><span class="hl opt">)(</span><span class="hl kwa">function</span><span class="hl opt">(</span>stream<span class="hl opt">) {</span>
	mx <span class="hl opt">=</span> <span class="hl kwd">MuxDemux</span><span class="hl opt">()</span>
	mx<span class="hl opt">.</span>http <span class="hl opt">=</span> <span class="hl kwd">MuxDemux</span><span class="hl opt">()</span>
	mx<span class="hl opt">.</span>http<span class="hl opt">.</span><span class="hl kwd">pipe</span><span class="hl opt">(</span>mx<span class="hl opt">.</span><span class="hl kwd">createStream</span><span class="hl opt">(</span><span class="hl str">'http'</span><span class="hl opt">)).</span><span class="hl kwd">pipe</span><span class="hl opt">(</span>mx<span class="hl opt">.</span>http<span class="hl opt">)</span>
	mx<span class="hl opt">.</span>tcp <span class="hl opt">=</span> <span class="hl kwd">MuxDemux</span><span class="hl opt">()</span>
	mx<span class="hl opt">.</span>tcp<span class="hl opt">.</span><span class="hl kwd">pipe</span><span class="hl opt">(</span>mx<span class="hl opt">.</span><span class="hl kwd">createStream</span><span class="hl opt">(</span><span class="hl str">'net'</span><span class="hl opt">)).</span><span class="hl kwd">pipe</span><span class="hl opt">(</span>mx<span class="hl opt">.</span>tcp<span class="hl opt">)</span>
	mx<span class="hl opt">.</span><span class="hl kwd">pipe</span><span class="hl opt">(</span>stream<span class="hl opt">).</span><span class="hl kwd">pipe</span><span class="hl opt">(</span>mx<span class="hl opt">)</span>
	queue<span class="hl opt">.</span><span class="hl kwd">forEach</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">(</span>req<span class="hl opt">) {</span>
		<span class="hl kwd">req</span><span class="hl opt">()</span>
	<span class="hl opt">})</span>
	queue <span class="hl opt">= []</span>
	console<span class="hl opt">.</span><span class="hl kwd">log</span><span class="hl opt">(</span><span class="hl str">'Connected'</span><span class="hl opt">)</span>
<span class="hl opt">}).</span><span class="hl kwd">on</span><span class="hl opt">(</span><span class="hl str">'disconnect'</span><span class="hl opt">,</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
	mx <span class="hl opt">=</span> <span class="hl kwa">null</span>
<span class="hl opt">}).</span><span class="hl kwd">connect</span><span class="hl opt">(</span><span class="hl str">'/engine.io'</span><span class="hl opt">)</span>

<span class="hl kwa">function</span> <span class="hl kwd">run</span><span class="hl opt">(</span>job<span class="hl opt">) {</span>
	<span class="hl kwa">if</span><span class="hl opt">(</span>mx<span class="hl opt">)</span>
		<span class="hl kwd">job</span><span class="hl opt">()</span>
	<span class="hl kwa">else</span>
		queue<span class="hl opt">.</span><span class="hl kwd">push</span><span class="hl opt">(</span>job<span class="hl opt">)</span>
<span class="hl opt">}</span>
exports<span class="hl opt">.</span>run <span class="hl opt">=</span> run

<span class="hl kwa">var</span> url <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'url'</span><span class="hl opt">)</span>
<span class="hl kwa">function</span> <span class="hl kwd">request</span><span class="hl opt">(</span>uri<span class="hl opt">,</span> opts<span class="hl opt">) {</span>
	<span class="hl kwa">if</span><span class="hl opt">(</span><span class="hl kwa">typeof</span><span class="hl opt">(</span>uri<span class="hl opt">) ==</span> <span class="hl str">'object'</span><span class="hl opt">)</span> opts <span class="hl opt">=</span> uri<span class="hl opt">,</span> uri <span class="hl opt">=</span> undefined
	<span class="hl kwa">if</span><span class="hl opt">(!</span>opts<span class="hl opt">)</span> opts <span class="hl opt">= {}</span>
	<span class="hl kwa">if</span><span class="hl opt">(</span>uri <span class="hl opt">!=</span> <span class="hl kwa">null</span><span class="hl opt">)</span> opts<span class="hl opt">.</span>uri <span class="hl opt">=</span> uri
	<span class="hl slc">// if(typeof(opts.uri) == 'string') opts.uri = url.parse(opts.uri, true)</span>

	<span class="hl kwa">var</span> stream <span class="hl opt">= {</span>
		sink<span class="hl opt">:</span> pull<span class="hl opt">.</span>defer<span class="hl opt">.</span><span class="hl kwd">sink</span><span class="hl opt">(),</span>
		source<span class="hl opt">:</span> pull<span class="hl opt">.</span>defer<span class="hl opt">.</span><span class="hl kwd">source</span><span class="hl opt">(),</span>
	<span class="hl opt">}</span>
		
	<span class="hl kwd">run</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">() {</span>
		<span class="hl kwa">var</span> real <span class="hl opt">=</span> mx<span class="hl opt">.</span>http<span class="hl opt">.</span><span class="hl kwd">createStream</span><span class="hl opt">(</span><span class="hl kwd">xtend</span><span class="hl opt">(</span>opts<span class="hl opt">, {</span>
			type<span class="hl opt">:</span> <span class="hl str">'client'</span><span class="hl opt">,</span>
		<span class="hl opt">}), {</span>
			allowHalfOpen<span class="hl opt">:</span> <span class="hl kwa">true</span>
		<span class="hl opt">})</span>
		stream<span class="hl opt">.</span>sink<span class="hl opt">.</span><span class="hl kwd">resolve</span><span class="hl opt">(</span>pull<span class="hl opt">.</span>from<span class="hl opt">.</span><span class="hl kwd">sink</span><span class="hl opt">(</span>real<span class="hl opt">))</span>
		stream<span class="hl opt">.</span>source<span class="hl opt">.</span><span class="hl kwd">resolve</span><span class="hl opt">(</span><span class="hl kwd">pull</span><span class="hl opt">(</span>pull<span class="hl opt">.</span>from<span class="hl opt">.</span><span class="hl kwd">source</span><span class="hl opt">(</span>real<span class="hl opt">),</span> pull<span class="hl opt">.</span><span class="hl kwd">map</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">(</span>d<span class="hl opt">) {</span>
			<span class="hl kwa">return</span> String<span class="hl opt">.</span>fromCharCode<span class="hl opt">.</span><span class="hl kwd">apply</span><span class="hl opt">(</span>String<span class="hl opt">,</span> d<span class="hl opt">.</span>data<span class="hl opt">)</span>
		<span class="hl opt">})))</span>
	<span class="hl opt">})</span>

	<span class="hl kwa">return</span> stream
<span class="hl opt">}</span>
exports<span class="hl opt">.</span>request <span class="hl opt">=</span> request

<span class="hl kwa">var</span> tcp <span class="hl opt">=</span> exports<span class="hl opt">.</span>tcp <span class="hl opt">= {}</span>
tcp<span class="hl opt">.</span><span class="hl kwd">client</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>host<span class="hl opt">,</span> port<span class="hl opt">,</span> tls<span class="hl opt">) {</span>
	<span class="hl kwa">var</span> stream <span class="hl opt">= {</span>
		sink<span class="hl opt">:</span> pull<span class="hl opt">.</span>defer<span class="hl opt">.</span><span class="hl kwd">sink</span><span class="hl opt">(),</span>
		source<span class="hl opt">:</span> pull<span class="hl opt">.</span>defer<span class="hl opt">.</span><span class="hl kwd">source</span><span class="hl opt">(),</span>
	<span class="hl opt">}</span>
		
	<span class="hl kwd">run</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">() {</span>
		<span class="hl kwa">var</span> real <span class="hl opt">=</span> mx<span class="hl opt">.</span>tcp<span class="hl opt">.</span><span class="hl kwd">createStream</span><span class="hl opt">({</span>
			type<span class="hl opt">:</span> <span class="hl str">'client'</span><span class="hl opt">,</span>
			host<span class="hl opt">:</span> host<span class="hl opt">,</span>
			port<span class="hl opt">:</span> port<span class="hl opt">,</span>
			tls<span class="hl opt">: !!</span>tls<span class="hl opt">,</span>
		<span class="hl opt">})</span>
		stream<span class="hl opt">.</span>sink<span class="hl opt">.</span><span class="hl kwd">resolve</span><span class="hl opt">(</span>pull<span class="hl opt">.</span>from<span class="hl opt">.</span><span class="hl kwd">sink</span><span class="hl opt">(</span>real<span class="hl opt">))</span>
		stream<span class="hl opt">.</span>source<span class="hl opt">.</span><span class="hl kwd">resolve</span><span class="hl opt">(</span><span class="hl kwd">pull</span><span class="hl opt">(</span>pull<span class="hl opt">.</span>from<span class="hl opt">.</span><span class="hl kwd">source</span><span class="hl opt">(</span>real<span class="hl opt">),</span> pull<span class="hl opt">.</span><span class="hl kwd">map</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">(</span>d<span class="hl opt">) {</span>
			<span class="hl kwa">return</span> String<span class="hl opt">.</span>fromCharCode<span class="hl opt">.</span><span class="hl kwd">apply</span><span class="hl opt">(</span>String<span class="hl opt">,</span> d<span class="hl opt">.</span>data<span class="hl opt">)</span>
		<span class="hl opt">})))</span>
	<span class="hl opt">})</span>

	<span class="hl kwa">return</span> stream
<span class="hl opt">}</span>
tcp<span class="hl opt">.</span><span class="hl kwd">server</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>port<span class="hl opt">,</span> seaport<span class="hl opt">,</span> cb<span class="hl opt">) {</span>
	<span class="hl kwa">if</span><span class="hl opt">(</span><span class="hl kwa">typeof</span><span class="hl opt">(</span>seaport<span class="hl opt">) ==</span> <span class="hl str">'function'</span><span class="hl opt">)</span> cb <span class="hl opt">=</span> seaport<span class="hl opt">,</span> seaport <span class="hl opt">=</span> undefined
	<span class="hl kwa">if</span><span class="hl opt">(</span><span class="hl kwa">typeof</span><span class="hl opt">(</span>port<span class="hl opt">) ==</span> <span class="hl str">'string'</span> <span class="hl opt">||</span> <span class="hl kwa">typeof</span><span class="hl opt">(</span>port<span class="hl opt">) ==</span> <span class="hl str">'object'</span><span class="hl opt">) {</span>
		<span class="hl kwa">var</span> t <span class="hl opt">=</span> seaport<span class="hl opt">;</span> seaport <span class="hl opt">=</span> port<span class="hl opt">,</span> port <span class="hl opt">=</span> t
	<span class="hl opt">}</span>
	<span class="hl kwa">var</span> mxdx <span class="hl opt">=</span> <span class="hl kwd">MuxDemux</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">(</span>s<span class="hl opt">) {</span>
		<span class="hl kwd">cb</span><span class="hl opt">({</span>
			sink<span class="hl opt">:</span> pull<span class="hl opt">.</span>from<span class="hl opt">.</span><span class="hl kwd">sink</span><span class="hl opt">(</span>s<span class="hl opt">),</span>
			source<span class="hl opt">:</span> <span class="hl kwd">pull</span><span class="hl opt">(</span>pull<span class="hl opt">.</span>from<span class="hl opt">.</span><span class="hl kwd">source</span><span class="hl opt">(</span>s<span class="hl opt">),</span> pull<span class="hl opt">.</span><span class="hl kwd">map</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">(</span>d<span class="hl opt">) {</span>
				<span class="hl kwa">return</span> String<span class="hl opt">.</span>fromCharCode<span class="hl opt">.</span><span class="hl kwd">apply</span><span class="hl opt">(</span>String<span class="hl opt">,</span> d<span class="hl opt">.</span>data<span class="hl opt">)</span>
			<span class="hl opt">})),</span>
			local<span class="hl opt">:</span> s<span class="hl opt">.</span>meta<span class="hl opt">.</span>address<span class="hl opt">,</span>
			remote<span class="hl opt">:</span> s<span class="hl opt">.</span>meta<span class="hl opt">.</span>remote<span class="hl opt">,</span>
		<span class="hl opt">})</span>
	<span class="hl opt">})</span>

	<span class="hl kwd">run</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">() {</span>
		mxdx<span class="hl opt">.</span><span class="hl kwd">pipe</span><span class="hl opt">(</span>mx<span class="hl opt">.</span>tcp<span class="hl opt">.</span><span class="hl kwd">createStream</span><span class="hl opt">({</span>
			type<span class="hl opt">:</span> <span class="hl str">'server'</span><span class="hl opt">,</span>
			listen<span class="hl opt">:</span> <span class="hl kwd">xtend</span><span class="hl opt">(</span>seaport<span class="hl opt">, {</span>
				port<span class="hl opt">:</span> port <span class="hl opt">||</span> seaport<span class="hl opt">.</span>port<span class="hl opt">,</span>
				role<span class="hl opt">:</span> seaport<span class="hl opt">,</span>
			<span class="hl opt">}),</span>
		<span class="hl opt">})).</span><span class="hl kwd">pipe</span><span class="hl opt">(</span>mxdx<span class="hl opt">)</span>
	<span class="hl opt">})</span>
	<span class="hl kwa">return function</span><span class="hl opt">() {</span>
		mxdx<span class="hl opt">.</span><span class="hl kwd">end</span><span class="hl opt">()</span>
	<span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwa">var</span> ports <span class="hl opt">=</span> exports<span class="hl opt">.</span>ports <span class="hl opt">=</span> exports<span class="hl opt">.</span>seaport <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'seaport'</span><span class="hl opt">)()</span>
<span class="hl kwd">run</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">() {</span>
	<span class="hl kwa">var</span> s <span class="hl opt">=</span> mx<span class="hl opt">.</span><span class="hl kwd">createStream</span><span class="hl opt">(</span><span class="hl str">'seaport'</span><span class="hl opt">)</span>
	s<span class="hl opt">.</span><span class="hl kwd">pipe</span><span class="hl opt">(</span>ports<span class="hl opt">.</span><span class="hl kwd">createStream</span><span class="hl opt">()).</span><span class="hl kwd">pipe</span><span class="hl opt">(</span>s<span class="hl opt">)</span>
<span class="hl opt">})</span>

<span class="hl opt">},{</span><span class="hl str">&quot;../util/pull&quot;</span><span class="hl opt">:</span><span class="hl num">263</span><span class="hl opt">,</span><span class="hl str">&quot;mux-demux&quot;</span><span class="hl opt">:</span><span class="hl num">154</span><span class="hl opt">,</span><span class="hl str">&quot;reconnect-engine&quot;</span><span class="hl opt">:</span><span class="hl num">210</span><span class="hl opt">,</span><span class="hl str">&quot;seaport&quot;</span><span class="hl opt">:</span><span class="hl num">214</span><span class="hl opt">,</span><span class="hl str">&quot;url&quot;</span><span class="hl opt">:</span><span class="hl num">254</span><span class="hl opt">,</span><span class="hl str">&quot;xtend&quot;</span><span class="hl opt">:</span><span class="hl num">259</span><span class="hl opt">}],</span><span class="hl num">2</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>require<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl kwa">var</span> pull <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'../util/pull'</span><span class="hl opt">)</span>
<span class="hl kwa">var</span> xtend <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'xtend'</span><span class="hl opt">)</span>
<span class="hl kwa">var</span> URL <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'url'</span><span class="hl opt">)</span>
<span class="hl kwa">var</span> dnode <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'dnode'</span><span class="hl opt">)</span>
<span class="hl kwa">var</span> bean <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'../util/bean'</span><span class="hl opt">)</span>
<span class="hl kwa">var</span> co <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'co'</span><span class="hl opt">)</span>
<span class="hl kwa">var</span> Promise <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'bluebird'</span><span class="hl opt">)</span>
<span class="hl kwa">var</span> Player <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'./player'</span><span class="hl opt">)</span>
<span class="hl kwa">var</span> PlayerControls <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'./player-controls'</span><span class="hl opt">)</span>

<span class="hl kwa">var</span> conn <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'./connection'</span><span class="hl opt">)</span>
<span class="hl kwa">var</span> request <span class="hl opt">=</span> conn<span class="hl opt">.</span>request
<span class="hl kwa">var</span> tcp <span class="hl opt">=</span> conn<span class="hl opt">.</span>tcp
<span class="hl kwa">var</span> ports <span class="hl opt">=</span> Promise<span class="hl opt">.</span><span class="hl kwd">promisifyAll</span><span class="hl opt">(</span>conn<span class="hl opt">.</span>ports<span class="hl opt">)</span>

<span class="hl kwa">var</span> player

<span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'domready'</span><span class="hl opt">)(</span>co<span class="hl opt">.</span><span class="hl kwd">wrap</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">*() {</span>
	<span class="hl kwa">var</span> E <span class="hl opt">= {</span>
		mixer<span class="hl opt">: {</span>
			el<span class="hl opt">:</span> document<span class="hl opt">.</span><span class="hl kwd">getElementById</span><span class="hl opt">(</span><span class="hl str">'stations'</span><span class="hl opt">),</span>
			accounts<span class="hl opt">: {},</span>
			stations<span class="hl opt">: {},</span>
		<span class="hl opt">},</span>
		albumArt<span class="hl opt">:</span> document<span class="hl opt">.</span><span class="hl kwd">getElementById</span><span class="hl opt">(</span><span class="hl str">'albumart'</span><span class="hl opt">),</span>
		songName<span class="hl opt">:</span> document<span class="hl opt">.</span><span class="hl kwd">getElementById</span><span class="hl opt">(</span><span class="hl str">'song-name'</span><span class="hl opt">),</span>
		songArtist<span class="hl opt">:</span> document<span class="hl opt">.</span><span class="hl kwd">getElementById</span><span class="hl opt">(</span><span class="hl str">'song-artist'</span><span class="hl opt">),</span>
		positionSlider<span class="hl opt">:</span> document<span class="hl opt">.</span><span class="hl kwd">getElementById</span><span class="hl opt">(</span><span class="hl str">'position-slider'</span><span class="hl opt">),</span>
		songAlbum<span class="hl opt">:</span> document<span class="hl opt">.</span><span class="hl kwd">getElementById</span><span class="hl opt">(</span><span class="hl str">'song-album'</span><span class="hl opt">),</span>
		playPauseBtn<span class="hl opt">:</span> document<span class="hl opt">.</span><span class="hl kwd">getElementById</span><span class="hl opt">(</span><span class="hl str">'playpause-btn'</span><span class="hl opt">),</span>
		rating<span class="hl opt">: {</span>
			like<span class="hl opt">:</span> document<span class="hl opt">.</span><span class="hl kwd">getElementById</span><span class="hl opt">(</span><span class="hl str">'like-btn'</span><span class="hl opt">),</span>
			neutral<span class="hl opt">:</span> document<span class="hl opt">.</span><span class="hl kwd">getElementById</span><span class="hl opt">(</span><span class="hl str">'neutral-btn'</span><span class="hl opt">),</span>
			ban<span class="hl opt">:</span> document<span class="hl opt">.</span><span class="hl kwd">getElementById</span><span class="hl opt">(</span><span class="hl str">'ban-btn'</span><span class="hl opt">),</span>
		<span class="hl opt">},</span>
		player<span class="hl opt">: {</span>
			select<span class="hl opt">:</span> document<span class="hl opt">.</span><span class="hl kwd">getElementById</span><span class="hl opt">(</span><span class="hl str">'players'</span><span class="hl opt">),</span>
			players<span class="hl opt">: {},</span>
			enable<span class="hl opt">:</span> document<span class="hl opt">.</span><span class="hl kwd">getElementById</span><span class="hl opt">(</span><span class="hl str">'enable-player'</span><span class="hl opt">),</span>
			label<span class="hl opt">:</span> document<span class="hl opt">.</span><span class="hl kwd">getElementById</span><span class="hl opt">(</span><span class="hl str">'player-label'</span><span class="hl opt">),</span>
		<span class="hl opt">},</span>
	<span class="hl opt">}</span>

	<span class="hl kwd">pull</span><span class="hl opt">(</span>pull<span class="hl opt">.</span><span class="hl kwd">seaport</span><span class="hl opt">(</span>ports<span class="hl opt">,</span> <span class="hl str">'devious-boxes:player'</span><span class="hl opt">),</span> pull<span class="hl opt">.</span><span class="hl kwd">drain</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">(</span>d<span class="hl opt">) {</span>
		<span class="hl kwa">var</span> meta <span class="hl opt">=</span> d<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]</span>
		<span class="hl kwa">var</span> id <span class="hl opt">=</span> JSON<span class="hl opt">.</span><span class="hl kwd">stringify</span><span class="hl opt">([</span>meta<span class="hl opt">.</span>host<span class="hl opt">,</span> meta<span class="hl opt">.</span>port<span class="hl opt">])</span>
		<span class="hl kwa">var</span> label <span class="hl opt">=</span> meta<span class="hl opt">.</span>label <span class="hl opt">||</span> meta<span class="hl opt">.</span>host <span class="hl opt">+</span> <span class="hl str">':'</span> <span class="hl opt">+</span> meta<span class="hl opt">.</span>port
		<span class="hl kwa">if</span><span class="hl opt">(</span>d<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] ==</span> <span class="hl str">'add'</span><span class="hl opt">) {</span>
			<span class="hl kwa">var</span> el <span class="hl opt">=</span> document<span class="hl opt">.</span><span class="hl kwd">createElement</span><span class="hl opt">(</span><span class="hl str">'option'</span><span class="hl opt">)</span>
			el<span class="hl opt">.</span>textContent <span class="hl opt">=</span> label
			el<span class="hl opt">.</span>value <span class="hl opt">=</span> id
			E<span class="hl opt">.</span>player<span class="hl opt">.</span>players<span class="hl opt">[</span>id<span class="hl opt">] =</span> el
			E<span class="hl opt">.</span>player<span class="hl opt">.</span>select<span class="hl opt">.</span><span class="hl kwd">appendChild</span><span class="hl opt">(</span>el<span class="hl opt">)</span>
		<span class="hl opt">}</span> <span class="hl kwa">else if</span><span class="hl opt">(</span>d<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] ==</span> <span class="hl str">'del'</span><span class="hl opt">) {</span>
			<span class="hl kwa">var</span> el <span class="hl opt">=</span> E<span class="hl opt">.</span>player<span class="hl opt">.</span>players<span class="hl opt">[</span>id<span class="hl opt">]</span>
			<span class="hl kwa">if</span><span class="hl opt">(</span>el<span class="hl opt">)</span>
				el<span class="hl opt">.</span>parentNode<span class="hl opt">.</span><span class="hl kwd">removeChild</span><span class="hl opt">(</span>el<span class="hl opt">)</span>
			<span class="hl kwa">delete</span> E<span class="hl opt">.</span>player<span class="hl opt">.</span>players<span class="hl opt">[</span>id<span class="hl opt">]</span>
		<span class="hl opt">}</span>
		console<span class="hl opt">.</span><span class="hl kwd">log</span><span class="hl opt">(</span>d<span class="hl opt">)</span>
	<span class="hl opt">}))</span>

	<span class="hl slc">// var controls = PlayerControls(player, E)</span>
	<span class="hl slc">//</span>
	bean<span class="hl opt">.</span><span class="hl kwd">on</span><span class="hl opt">(</span>E<span class="hl opt">.</span>player<span class="hl opt">.</span>enable<span class="hl opt">,</span> <span class="hl str">'change'</span><span class="hl opt">,</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
		<span class="hl kwa">if</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>checked<span class="hl opt">) {</span>
			E<span class="hl opt">.</span>player<span class="hl opt">.</span>label<span class="hl opt">.</span>readOnly <span class="hl opt">=</span> <span class="hl kwa">true</span>
			player <span class="hl opt">=</span> <span class="hl kwd">Player</span><span class="hl opt">(</span>E<span class="hl opt">.</span>player<span class="hl opt">.</span>label<span class="hl opt">.</span>value<span class="hl opt">)</span>
		<span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
			E<span class="hl opt">.</span>player<span class="hl opt">.</span>label<span class="hl opt">.</span>readOnly <span class="hl opt">=</span> falsemeta<span class="hl opt">.</span>label <span class="hl opt">||</span> meta<span class="hl opt">.</span>host <span class="hl opt">+</span> <span class="hl str">':'</span> <span class="hl opt">+</span> meta<span class="hl opt">.</span>port
			player<span class="hl opt">.</span><span class="hl kwd">stop</span><span class="hl opt">()</span>
			player <span class="hl opt">=</span> <span class="hl kwa">null</span>
		<span class="hl opt">}</span>
	<span class="hl opt">})</span>

	window<span class="hl opt">.</span>bean <span class="hl opt">=</span> bean
	window<span class="hl opt">.</span>ports <span class="hl opt">=</span> ports
	window<span class="hl opt">.</span>co <span class="hl opt">=</span> co
	window<span class="hl opt">.</span>E <span class="hl opt">=</span> E
	yield Promise<span class="hl opt">.</span><span class="hl kwd">resolve</span><span class="hl opt">()</span>
<span class="hl opt">}))</span>

<span class="hl opt">},{</span><span class="hl str">&quot;../util/bean&quot;</span><span class="hl opt">:</span><span class="hl num">261</span><span class="hl opt">,</span><span class="hl str">&quot;../util/pull&quot;</span><span class="hl opt">:</span><span class="hl num">263</span><span class="hl opt">,</span><span class="hl str">&quot;./connection&quot;</span><span class="hl opt">:</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl str">&quot;./player&quot;</span><span class="hl opt">:</span><span class="hl num">4</span><span class="hl opt">,</span><span class="hl str">&quot;./player-controls&quot;</span><span class="hl opt">:</span><span class="hl num">3</span><span class="hl opt">,</span><span class="hl str">&quot;bluebird&quot;</span><span class="hl opt">:</span><span class="hl num">28</span><span class="hl opt">,</span><span class="hl str">&quot;co&quot;</span><span class="hl opt">:</span><span class="hl num">62</span><span class="hl opt">,</span><span class="hl str">&quot;dnode&quot;</span><span class="hl opt">:</span><span class="hl num">86</span><span class="hl opt">,</span><span class="hl str">&quot;domready&quot;</span><span class="hl opt">:</span><span class="hl num">88</span><span class="hl opt">,</span><span class="hl str">&quot;url&quot;</span><span class="hl opt">:</span><span class="hl num">254</span><span class="hl opt">,</span><span class="hl str">&quot;xtend&quot;</span><span class="hl opt">:</span><span class="hl num">259</span><span class="hl opt">}],</span><span class="hl num">3</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>require<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl kwa">var</span> pull <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'../util/pull'</span><span class="hl opt">)</span>
<span class="hl kwa">var</span> bean <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'../util/bean'</span><span class="hl opt">)</span>

<span class="hl kwa">function</span> <span class="hl kwd">PlayerControls</span><span class="hl opt">(</span>player<span class="hl opt">,</span> E<span class="hl opt">) {</span>
	<span class="hl kwa">var</span> self <span class="hl opt">=</span> <span class="hl kwa">this</span>
	self<span class="hl opt">.</span>player <span class="hl opt">=</span> player
	self<span class="hl opt">.</span>E <span class="hl opt">=</span> E

	self<span class="hl opt">.</span>bean <span class="hl opt">=</span> bean<span class="hl opt">.</span><span class="hl kwd">ctx</span><span class="hl opt">()</span>
	self<span class="hl opt">.</span>pullPause <span class="hl opt">=</span> pull<span class="hl opt">.</span><span class="hl kwd">pausable</span><span class="hl opt">()</span>
	self<span class="hl opt">.</span>pullPause<span class="hl opt">.</span><span class="hl kwd">pause</span><span class="hl opt">()</span>

	<span class="hl kwd">pull</span><span class="hl opt">(</span>self<span class="hl opt">.</span>player<span class="hl opt">.</span><span class="hl kwd">on</span><span class="hl opt">(</span><span class="hl str">'time'</span><span class="hl opt">),</span> self<span class="hl opt">.</span>pullPause<span class="hl opt">,</span> pull<span class="hl opt">.</span><span class="hl kwd">drain</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">(</span>msg<span class="hl opt">) {</span>
		self<span class="hl opt">.</span>E<span class="hl opt">.</span>positionSlider<span class="hl opt">.</span>value <span class="hl opt">=</span> msg<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]</span>
	<span class="hl opt">}))</span>
	self<span class="hl opt">.</span>bean<span class="hl opt">.</span><span class="hl kwd">on</span><span class="hl opt">(</span>document<span class="hl opt">.</span><span class="hl kwd">getElementById</span><span class="hl opt">(</span><span class="hl str">'skip-btn'</span><span class="hl opt">),</span> <span class="hl str">'click'</span><span class="hl opt">,</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
		<span class="hl kwd">co</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">*() {</span>
			yield self<span class="hl opt">.</span>player<span class="hl opt">.</span><span class="hl kwd">next</span><span class="hl opt">()</span>
		<span class="hl opt">}).</span><span class="hl kwa">catch</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">(</span>e<span class="hl opt">) {</span> console<span class="hl opt">.</span><span class="hl kwd">error</span><span class="hl opt">(</span>e<span class="hl opt">.</span>stack<span class="hl opt">) })</span>
	<span class="hl opt">})</span>
	self<span class="hl opt">.</span>bean<span class="hl opt">.</span><span class="hl kwd">on</span><span class="hl opt">(</span>document<span class="hl opt">.</span><span class="hl kwd">getElementById</span><span class="hl opt">(</span><span class="hl str">'volume-slider'</span><span class="hl opt">),</span> <span class="hl str">'change'</span><span class="hl opt">,</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
		self<span class="hl opt">.</span>player<span class="hl opt">.</span><span class="hl kwd">volume</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>valueAsNumber <span class="hl opt">/</span> <span class="hl num">100</span><span class="hl opt">)</span>
	<span class="hl opt">})</span>
	self<span class="hl opt">.</span>bean<span class="hl opt">.</span><span class="hl kwd">on</span><span class="hl opt">(</span>self<span class="hl opt">.</span>E<span class="hl opt">.</span>positionSlider<span class="hl opt">,</span> <span class="hl str">'change'</span><span class="hl opt">,</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
		self<span class="hl opt">.</span>player<span class="hl opt">.</span><span class="hl kwd">seek</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>valueAsNumber<span class="hl opt">)</span>
	<span class="hl opt">})</span>

	self<span class="hl opt">.</span>bean<span class="hl opt">.</span><span class="hl kwd">on</span><span class="hl opt">(</span>self<span class="hl opt">.</span>E<span class="hl opt">.</span>playPauseBtn<span class="hl opt">,</span> <span class="hl str">'click'</span><span class="hl opt">,</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
		<span class="hl kwa">var</span> self <span class="hl opt">=</span> <span class="hl kwa">this</span>
		<span class="hl kwd">co</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">*() {</span>
			<span class="hl kwa">if</span><span class="hl opt">(</span>self<span class="hl opt">.</span>textContent <span class="hl opt">==</span> <span class="hl str">'Play'</span><span class="hl opt">)</span> yield self<span class="hl opt">.</span>player<span class="hl opt">.</span><span class="hl kwd">resume</span><span class="hl opt">()</span>
			<span class="hl kwa">else if</span><span class="hl opt">(</span>self<span class="hl opt">.</span>textContent <span class="hl opt">==</span> <span class="hl str">'Pause'</span><span class="hl opt">)</span> yield self<span class="hl opt">.</span>player<span class="hl opt">.</span><span class="hl kwd">pause</span><span class="hl opt">()</span>
			<span class="hl kwa">else throw new</span> <span class="hl kwd">Error</span><span class="hl opt">(</span><span class="hl str">'bad: '</span> <span class="hl opt">+</span> self<span class="hl opt">.</span>textContent<span class="hl opt">)</span>
		<span class="hl opt">}).</span><span class="hl kwa">catch</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">(</span>e<span class="hl opt">) {</span> console<span class="hl opt">.</span><span class="hl kwd">error</span><span class="hl opt">(</span>e<span class="hl opt">.</span>stack<span class="hl opt">) })</span>
	<span class="hl opt">})</span>
	<span class="hl kwd">pull</span><span class="hl opt">(</span>self<span class="hl opt">.</span>player<span class="hl opt">.</span><span class="hl kwd">on</span><span class="hl opt">(</span><span class="hl str">'resume'</span><span class="hl opt">),</span> self<span class="hl opt">.</span>pullPause<span class="hl opt">,</span> pull<span class="hl opt">.</span><span class="hl kwd">drain</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">(</span>msg<span class="hl opt">) {</span>
		self<span class="hl opt">.</span>E<span class="hl opt">.</span>playPauseBtn<span class="hl opt">.</span>textContent <span class="hl opt">=</span> <span class="hl str">'Pause'</span>
	<span class="hl opt">}))</span>
	<span class="hl kwd">pull</span><span class="hl opt">(</span>self<span class="hl opt">.</span>player<span class="hl opt">.</span><span class="hl kwd">on</span><span class="hl opt">(</span><span class="hl str">'pause'</span><span class="hl opt">),</span> self<span class="hl opt">.</span>pullPause<span class="hl opt">,</span> pull<span class="hl opt">.</span><span class="hl kwd">drain</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">(</span>msg<span class="hl opt">) {</span>
		self<span class="hl opt">.</span>E<span class="hl opt">.</span>playPauseBtn<span class="hl opt">.</span>textContent <span class="hl opt">=</span> <span class="hl str">'Play'</span>
	<span class="hl opt">}))</span>

	<span class="hl kwd">pull</span><span class="hl opt">(</span>self<span class="hl opt">.</span>player<span class="hl opt">.</span><span class="hl kwd">on</span><span class="hl opt">(</span><span class="hl str">'song'</span><span class="hl opt">),</span> self<span class="hl opt">.</span>pullPause<span class="hl opt">,</span> pull<span class="hl opt">.</span><span class="hl kwd">drain</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">(</span>msg<span class="hl opt">) {</span>
		<span class="hl kwa">var</span> song <span class="hl opt">=</span> msg<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]</span>
		console<span class="hl opt">.</span><span class="hl kwd">log</span><span class="hl opt">(</span>song<span class="hl opt">.</span>songName<span class="hl opt">,</span> song<span class="hl opt">)</span>
		self<span class="hl opt">.</span>E<span class="hl opt">.</span>albumArt<span class="hl opt">.</span>src <span class="hl opt">=</span> song<span class="hl opt">.</span>albumArtUrl
		self<span class="hl opt">.</span>E<span class="hl opt">.</span>songName<span class="hl opt">.</span>textContent <span class="hl opt">=</span> song<span class="hl opt">.</span>songName
		self<span class="hl opt">.</span>E<span class="hl opt">.</span>songArtist<span class="hl opt">.</span>textContent <span class="hl opt">=</span> song<span class="hl opt">.</span>artistName
		self<span class="hl opt">.</span>E<span class="hl opt">.</span>songAlbum<span class="hl opt">.</span>textContent <span class="hl opt">=</span> song<span class="hl opt">.</span>albumName
		<span class="hl kwa">if</span><span class="hl opt">(</span>song<span class="hl opt">.</span>songRating <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">)</span> self<span class="hl opt">.</span>E<span class="hl opt">.</span>rating<span class="hl opt">.</span>like<span class="hl opt">.</span>checked <span class="hl opt">=</span> <span class="hl kwa">true</span>
		<span class="hl kwa">else if</span><span class="hl opt">(</span>song<span class="hl opt">.</span>songRating <span class="hl opt">==</span> <span class="hl num">0</span><span class="hl opt">)</span> self<span class="hl opt">.</span>E<span class="hl opt">.</span>rating<span class="hl opt">.</span>neutral<span class="hl opt">.</span>checked <span class="hl opt">=</span> <span class="hl kwa">true</span>
		<span class="hl kwa">else if</span><span class="hl opt">(</span>song<span class="hl opt">.</span>songRating <span class="hl opt">&lt;</span> <span class="hl num">0</span><span class="hl opt">)</span> self<span class="hl opt">.</span>E<span class="hl opt">.</span>rating<span class="hl opt">.</span>ban<span class="hl opt">.</span>checked <span class="hl opt">=</span> <span class="hl kwa">true</span>
	<span class="hl opt">}))</span>

	self<span class="hl opt">.</span>bean<span class="hl opt">.</span><span class="hl kwd">on</span><span class="hl opt">(</span>self<span class="hl opt">.</span>E<span class="hl opt">.</span>rating<span class="hl opt">.</span>like<span class="hl opt">,</span>    <span class="hl str">'change'</span><span class="hl opt">,</span> <span class="hl kwa">function</span><span class="hl opt">() {</span> <span class="hl kwa">if</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>checked<span class="hl opt">)</span> <span class="hl kwd">co</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">*() {</span> yield self<span class="hl opt">.</span>player<span class="hl opt">.</span><span class="hl kwd">rate</span><span class="hl opt">(</span> <span class="hl num">1</span><span class="hl opt">) }).</span><span class="hl kwa">catch</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">(</span>e<span class="hl opt">) {</span> console<span class="hl opt">.</span><span class="hl kwd">error</span><span class="hl opt">(</span>e<span class="hl opt">.</span>stack<span class="hl opt">) }) })</span>
	self<span class="hl opt">.</span>bean<span class="hl opt">.</span><span class="hl kwd">on</span><span class="hl opt">(</span>self<span class="hl opt">.</span>E<span class="hl opt">.</span>rating<span class="hl opt">.</span>neutral<span class="hl opt">,</span> <span class="hl str">'change'</span><span class="hl opt">,</span> <span class="hl kwa">function</span><span class="hl opt">() {</span> <span class="hl kwa">if</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>checked<span class="hl opt">)</span> <span class="hl kwd">co</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">*() {</span> yield self<span class="hl opt">.</span>player<span class="hl opt">.</span><span class="hl kwd">rate</span><span class="hl opt">(</span> <span class="hl num">0</span><span class="hl opt">) }).</span><span class="hl kwa">catch</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">(</span>e<span class="hl opt">) {</span> console<span class="hl opt">.</span><span class="hl kwd">error</span><span class="hl opt">(</span>e<span class="hl opt">.</span>stack<span class="hl opt">) }) })</span>
	self<span class="hl opt">.</span>bean<span class="hl opt">.</span><span class="hl kwd">on</span><span class="hl opt">(</span>self<span class="hl opt">.</span>E<span class="hl opt">.</span>rating<span class="hl opt">.</span>ban<span class="hl opt">,</span>     <span class="hl str">'change'</span><span class="hl opt">,</span> <span class="hl kwa">function</span><span class="hl opt">() {</span> <span class="hl kwa">if</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>checked<span class="hl opt">)</span> <span class="hl kwd">co</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">*() {</span> yield self<span class="hl opt">.</span>player<span class="hl opt">.</span><span class="hl kwd">rate</span><span class="hl opt">(-</span><span class="hl num">1</span><span class="hl opt">) }).</span><span class="hl kwa">catch</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">(</span>e<span class="hl opt">) {</span> console<span class="hl opt">.</span><span class="hl kwd">error</span><span class="hl opt">(</span>e<span class="hl opt">.</span>stack<span class="hl opt">) }) })</span>

	<span class="hl kwd">pull</span><span class="hl opt">(</span>self<span class="hl opt">.</span>player<span class="hl opt">.</span><span class="hl kwd">on</span><span class="hl opt">(</span><span class="hl str">'account:add'</span><span class="hl opt">),</span> self<span class="hl opt">.</span>pullPause<span class="hl opt">,</span> pull<span class="hl opt">.</span><span class="hl kwd">drain</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">(</span>msg<span class="hl opt">) {</span>
		<span class="hl kwa">var</span> account <span class="hl opt">=</span> msg<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]</span>
		<span class="hl kwa">var</span> el <span class="hl opt">=</span> self<span class="hl opt">.</span>E<span class="hl opt">.</span>mixer<span class="hl opt">.</span>accounts<span class="hl opt">[</span>account<span class="hl opt">.</span>id<span class="hl opt">] =</span> document<span class="hl opt">.</span><span class="hl kwd">createElement</span><span class="hl opt">(</span><span class="hl str">'optgroup'</span><span class="hl opt">)</span>
		el<span class="hl opt">.</span>label <span class="hl opt">=</span> account<span class="hl opt">.</span>id
		self<span class="hl opt">.</span>E<span class="hl opt">.</span>mixer<span class="hl opt">.</span>el<span class="hl opt">.</span><span class="hl kwd">appendChild</span><span class="hl opt">(</span>el<span class="hl opt">)</span>
	<span class="hl opt">}))</span>
	<span class="hl kwd">pull</span><span class="hl opt">(</span>self<span class="hl opt">.</span>player<span class="hl opt">.</span><span class="hl kwd">on</span><span class="hl opt">(</span><span class="hl str">'account:rm'</span><span class="hl opt">),</span> self<span class="hl opt">.</span>pullPause<span class="hl opt">,</span> pull<span class="hl opt">.</span><span class="hl kwd">drain</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">(</span>msg<span class="hl opt">) {</span>
		<span class="hl kwa">var</span> account <span class="hl opt">=</span> msg<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]</span>
		<span class="hl kwa">var</span> el <span class="hl opt">=</span> self<span class="hl opt">.</span>E<span class="hl opt">.</span>mixer<span class="hl opt">.</span>accounts<span class="hl opt">[</span>account<span class="hl opt">.</span>id<span class="hl opt">]</span>
		<span class="hl kwa">if</span><span class="hl opt">(</span>el <span class="hl opt">&amp;&amp;</span> el<span class="hl opt">.</span>parentNode<span class="hl opt">)</span>
			el<span class="hl opt">.</span>parentNode<span class="hl opt">.</span><span class="hl kwd">removeChild</span><span class="hl opt">(</span>el<span class="hl opt">)</span>
		<span class="hl kwa">delete</span> self<span class="hl opt">.</span>E<span class="hl opt">.</span>mixer<span class="hl opt">.</span>accounts<span class="hl opt">[</span>account<span class="hl opt">.</span>id<span class="hl opt">]</span>
	<span class="hl opt">}))</span>
	<span class="hl kwd">pull</span><span class="hl opt">(</span>self<span class="hl opt">.</span>player<span class="hl opt">.</span><span class="hl kwd">on</span><span class="hl opt">(</span><span class="hl str">'station:add'</span><span class="hl opt">),</span> self<span class="hl opt">.</span>pullPause<span class="hl opt">,</span> pull<span class="hl opt">.</span><span class="hl kwd">drain</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">(</span>msg<span class="hl opt">) {</span>
		<span class="hl kwa">var</span> station <span class="hl opt">=</span> msg<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]</span>
		<span class="hl kwa">var</span> el <span class="hl opt">=</span> self<span class="hl opt">.</span>E<span class="hl opt">.</span>mixer<span class="hl opt">.</span>stations<span class="hl opt">[</span>station<span class="hl opt">.</span>id<span class="hl opt">] =</span> document<span class="hl opt">.</span><span class="hl kwd">createElement</span><span class="hl opt">(</span><span class="hl str">'option'</span><span class="hl opt">)</span>
		el<span class="hl opt">.</span>textContent <span class="hl opt">=</span> station<span class="hl opt">.</span>name
		el<span class="hl opt">.</span>value <span class="hl opt">=</span> station<span class="hl opt">.</span>id
		self<span class="hl opt">.</span>E<span class="hl opt">.</span>mixer<span class="hl opt">.</span>accounts<span class="hl opt">[</span>station<span class="hl opt">.</span>account<span class="hl opt">.</span>id<span class="hl opt">].</span><span class="hl kwd">appendChild</span><span class="hl opt">(</span>el<span class="hl opt">)</span>
	<span class="hl opt">}))</span>
	<span class="hl kwd">pull</span><span class="hl opt">(</span>self<span class="hl opt">.</span>player<span class="hl opt">.</span><span class="hl kwd">on</span><span class="hl opt">(</span><span class="hl str">'station:rm'</span><span class="hl opt">),</span> self<span class="hl opt">.</span>pullPause<span class="hl opt">,</span> pull<span class="hl opt">.</span><span class="hl kwd">drain</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">(</span>msg<span class="hl opt">) {</span>
		<span class="hl kwa">var</span> station <span class="hl opt">=</span> msg<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]</span>
		<span class="hl kwa">var</span> el <span class="hl opt">=</span> self<span class="hl opt">.</span>E<span class="hl opt">.</span>mixer<span class="hl opt">.</span>stations<span class="hl opt">[</span>station<span class="hl opt">.</span>id<span class="hl opt">]</span>
		<span class="hl kwa">if</span><span class="hl opt">(</span>el <span class="hl opt">&amp;&amp;</span> el<span class="hl opt">.</span>parentNode<span class="hl opt">)</span>
			el<span class="hl opt">.</span>parentNode<span class="hl opt">.</span><span class="hl kwd">removeChild</span><span class="hl opt">(</span>el<span class="hl opt">)</span>
		<span class="hl kwa">delete</span> self<span class="hl opt">.</span>E<span class="hl opt">.</span>mixer<span class="hl opt">.</span>stations<span class="hl opt">[</span>station<span class="hl opt">.</span>id<span class="hl opt">]</span>
	<span class="hl opt">}))</span>
	self<span class="hl opt">.</span>bean<span class="hl opt">.</span><span class="hl kwd">on</span><span class="hl opt">(</span>self<span class="hl opt">.</span>E<span class="hl opt">.</span>mixer<span class="hl opt">.</span>el<span class="hl opt">,</span> <span class="hl str">'change'</span><span class="hl opt">,</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
		self<span class="hl opt">.</span>player<span class="hl opt">.</span><span class="hl kwd">mix</span><span class="hl opt">([].</span>slice<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span>self<span class="hl opt">.</span>E<span class="hl opt">.</span>mixer<span class="hl opt">.</span>el<span class="hl opt">.</span>selectedOptions<span class="hl opt">).</span><span class="hl kwd">map</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">(</span>o<span class="hl opt">) {</span> <span class="hl kwa">return</span> o<span class="hl opt">.</span>value <span class="hl opt">}))</span>
	<span class="hl opt">})</span>
<span class="hl opt">}</span>

PlayerControls<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">enable</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
	<span class="hl kwa">this</span><span class="hl opt">.</span>bean<span class="hl opt">.</span><span class="hl kwd">enable</span><span class="hl opt">()</span>
	<span class="hl kwa">this</span><span class="hl opt">.</span>pullPause<span class="hl opt">.</span><span class="hl kwd">resume</span><span class="hl opt">()</span>
<span class="hl opt">}</span>
PlayerControls<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">disable</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
	<span class="hl kwa">this</span><span class="hl opt">.</span>bean<span class="hl opt">.</span><span class="hl kwd">disable</span><span class="hl opt">()</span>
	<span class="hl kwa">this</span><span class="hl opt">.</span>pullPause<span class="hl opt">.</span><span class="hl kwd">pause</span><span class="hl opt">()</span>
<span class="hl opt">}</span>

module<span class="hl opt">.</span>exports <span class="hl opt">=</span> PlayerControls

<span class="hl opt">},{</span><span class="hl str">&quot;../util/bean&quot;</span><span class="hl opt">:</span><span class="hl num">261</span><span class="hl opt">,</span><span class="hl str">&quot;../util/pull&quot;</span><span class="hl opt">:</span><span class="hl num">263</span><span class="hl opt">}],</span><span class="hl num">4</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>require<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl kwa">var</span> conn <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'./connection'</span><span class="hl opt">)</span>

module<span class="hl opt">.</span><span class="hl kwd">exports</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>label<span class="hl opt">) {</span>
	<span class="hl kwa">var</span> player <span class="hl opt">=</span> <span class="hl kwa">new</span><span class="hl opt">(</span><span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'../player'</span><span class="hl opt">))(</span>ports<span class="hl opt">,</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'./speaker'</span><span class="hl opt">)(), {</span>
		connect<span class="hl opt">:</span> conn<span class="hl opt">.</span>tcp<span class="hl opt">.</span>client<span class="hl opt">,</span>
	<span class="hl opt">})</span>
	document<span class="hl opt">.</span>body<span class="hl opt">.</span><span class="hl kwd">appendChild</span><span class="hl opt">(</span>player<span class="hl opt">.</span>speaker<span class="hl opt">.</span>el<span class="hl opt">)</span>

	<span class="hl kwa">var</span> stopServer <span class="hl opt">=</span> conn<span class="hl opt">.</span>tcp<span class="hl opt">.</span><span class="hl kwd">server</span><span class="hl opt">({</span>
		role<span class="hl opt">:</span> <span class="hl str">'devious-boxes:player'</span><span class="hl opt">,</span>
	 	label<span class="hl opt">:</span> label<span class="hl opt">,</span>
	<span class="hl opt">},</span> <span class="hl kwa">function</span><span class="hl opt">(</span>s<span class="hl opt">) {</span>
		<span class="hl kwd">pull</span><span class="hl opt">(</span>s<span class="hl opt">,</span> player<span class="hl opt">.</span><span class="hl kwd">stream</span><span class="hl opt">(),</span> s<span class="hl opt">)</span>
	<span class="hl opt">})</span>

	player<span class="hl opt">.</span><span class="hl kwd">stop</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
		player<span class="hl opt">.</span><span class="hl kwd">pause</span><span class="hl opt">()</span>
		<span class="hl kwd">stopServer</span><span class="hl opt">()</span>
	<span class="hl opt">}</span>

	<span class="hl kwa">return</span> player
<span class="hl opt">}</span>

<span class="hl opt">},{</span><span class="hl str">&quot;../player&quot;</span><span class="hl opt">:</span><span class="hl num">260</span><span class="hl opt">,</span><span class="hl str">&quot;./connection&quot;</span><span class="hl opt">:</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl str">&quot;./speaker&quot;</span><span class="hl opt">:</span><span class="hl num">5</span><span class="hl opt">}],</span><span class="hl num">5</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>require<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl kwa">var</span> bean <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'bean'</span><span class="hl opt">)</span>
<span class="hl kwa">var</span> pull <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'../util/pull'</span><span class="hl opt">)</span>

module<span class="hl opt">.</span><span class="hl kwd">exports</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
	<span class="hl kwa">var</span> self <span class="hl opt">= {}</span>
	pull<span class="hl opt">.</span><span class="hl kwd">events</span><span class="hl opt">(</span>self<span class="hl opt">)</span>
	self<span class="hl opt">.</span>el <span class="hl opt">=</span> document<span class="hl opt">.</span><span class="hl kwd">createElement</span><span class="hl opt">(</span><span class="hl str">'audio'</span><span class="hl opt">)</span>

	bean<span class="hl opt">.</span><span class="hl kwd">on</span><span class="hl opt">(</span>self<span class="hl opt">.</span>el<span class="hl opt">,</span> <span class="hl str">'loadedmetadata'</span><span class="hl opt">,</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
		self<span class="hl opt">.</span>meta <span class="hl opt">= {</span>
			duration<span class="hl opt">:</span> <span class="hl kwa">this</span><span class="hl opt">.</span>duration<span class="hl opt">,</span>
		<span class="hl opt">}</span>
		self<span class="hl opt">.</span><span class="hl kwd">emit</span><span class="hl opt">(</span><span class="hl str">'audio:meta'</span><span class="hl opt">,</span> self<span class="hl opt">.</span>meta<span class="hl opt">)</span>
	<span class="hl opt">})</span>
	bean<span class="hl opt">.</span><span class="hl kwd">on</span><span class="hl opt">(</span>self<span class="hl opt">.</span>el<span class="hl opt">,</span> <span class="hl str">'timeupdate'</span><span class="hl opt">,</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
		self<span class="hl opt">.</span><span class="hl kwd">emit</span><span class="hl opt">(</span><span class="hl str">'time'</span><span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">.</span>currentTime<span class="hl opt">)</span>
	<span class="hl opt">})</span>
	bean<span class="hl opt">.</span><span class="hl kwd">on</span><span class="hl opt">(</span>self<span class="hl opt">.</span>el<span class="hl opt">,</span> <span class="hl str">'ended'</span><span class="hl opt">,</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
		self<span class="hl opt">.</span><span class="hl kwd">emit</span><span class="hl opt">(</span><span class="hl str">'end'</span><span class="hl opt">)</span>
	<span class="hl opt">})</span>
	bean<span class="hl opt">.</span><span class="hl kwd">on</span><span class="hl opt">(</span>self<span class="hl opt">.</span>el<span class="hl opt">,</span> <span class="hl str">'error'</span><span class="hl opt">,</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
		<span class="hl kwd">co</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">*() {</span>
			self<span class="hl opt">.</span><span class="hl kwd">emit</span><span class="hl opt">(</span><span class="hl str">'end'</span><span class="hl opt">)</span>
		<span class="hl opt">}).</span><span class="hl kwa">catch</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">(</span>e<span class="hl opt">) {</span> console<span class="hl opt">.</span><span class="hl kwd">error</span><span class="hl opt">(</span>e<span class="hl opt">.</span>stack<span class="hl opt">) })</span>
	<span class="hl opt">})</span>

	self<span class="hl opt">.</span><span class="hl kwd">load</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>url<span class="hl opt">) {</span> self<span class="hl opt">.</span>el<span class="hl opt">.</span>src <span class="hl opt">=</span> url<span class="hl opt">;</span> self<span class="hl opt">.</span>el<span class="hl opt">.</span><span class="hl kwd">load</span><span class="hl opt">() }</span>
	self<span class="hl opt">.</span><span class="hl kwd">resume</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span> self<span class="hl opt">.</span>el<span class="hl opt">.</span><span class="hl kwd">play</span><span class="hl opt">() }</span>
	self<span class="hl opt">.</span><span class="hl kwd">pause</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span> self<span class="hl opt">.</span>el<span class="hl opt">.</span><span class="hl kwd">pause</span><span class="hl opt">() }</span>
	self<span class="hl opt">.</span><span class="hl kwd">paused</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span> <span class="hl kwa">return</span> self<span class="hl opt">.</span>el<span class="hl opt">.</span>paused <span class="hl opt">}</span>

	<span class="hl kwa">return</span> self
<span class="hl opt">}</span>

<span class="hl opt">},{</span><span class="hl str">&quot;../util/pull&quot;</span><span class="hl opt">:</span><span class="hl num">263</span><span class="hl opt">,</span><span class="hl str">&quot;bean&quot;</span><span class="hl opt">:</span><span class="hl num">27</span><span class="hl opt">}],</span><span class="hl num">6</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>require<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
module<span class="hl opt">.</span><span class="hl kwd">exports</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
	<span class="hl kwa">function</span> <span class="hl kwd">mixer</span><span class="hl opt">() {</span>
		<span class="hl kwa">if</span><span class="hl opt">(</span>mixer<span class="hl opt">.</span>options<span class="hl opt">.</span>length <span class="hl opt">==</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">throw new</span> <span class="hl kwd">Error</span><span class="hl opt">(</span><span class="hl str">'no options'</span><span class="hl opt">)</span>
		<span class="hl kwa">if</span><span class="hl opt">(</span>mixer<span class="hl opt">.</span>next <span class="hl opt">==</span> <span class="hl kwa">null</span><span class="hl opt">)</span> mixer<span class="hl opt">.</span>next <span class="hl opt">=</span> mixer<span class="hl opt">.</span>options<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]</span>
		<span class="hl kwa">var</span> next <span class="hl opt">=</span> mixer<span class="hl opt">.</span>next
		mixer<span class="hl opt">.</span>last <span class="hl opt">=</span> next
		<span class="hl kwa">var</span> i <span class="hl opt">=</span> mixer<span class="hl opt">.</span>options<span class="hl opt">.</span><span class="hl kwd">indexOf</span><span class="hl opt">(</span>next<span class="hl opt">)</span>
		<span class="hl kwa">if</span><span class="hl opt">(</span>i <span class="hl opt">== -</span><span class="hl num">1</span><span class="hl opt">)</span> i <span class="hl opt">=</span> <span class="hl num">0</span>
		<span class="hl kwa">else if</span><span class="hl opt">(</span>i <span class="hl opt">&gt;=</span> mixer<span class="hl opt">.</span>options<span class="hl opt">.</span>length <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">)</span> i <span class="hl opt">=</span> <span class="hl num">0</span>
		<span class="hl kwa">else</span> i<span class="hl opt">++</span>
		<span class="hl kwa">var</span> option <span class="hl opt">=</span> mixer<span class="hl opt">.</span>options<span class="hl opt">[</span>i<span class="hl opt">]</span>
		mixer<span class="hl opt">.</span>next <span class="hl opt">=</span> option
		<span class="hl kwa">return</span> next
	<span class="hl opt">}</span>
	mixer<span class="hl opt">.</span>options <span class="hl opt">= []</span>

	<span class="hl kwa">return</span> mixer
<span class="hl opt">}</span>

<span class="hl opt">},{}],</span><span class="hl num">7</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>require<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl kwa">var</span> asn1 <span class="hl opt">=</span> exports<span class="hl opt">;</span>

asn1<span class="hl opt">.</span>bignum <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'bn.js'</span><span class="hl opt">);</span>

asn1<span class="hl opt">.</span>define <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'./asn1/api'</span><span class="hl opt">).</span>define<span class="hl opt">;</span>
asn1<span class="hl opt">.</span>base <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'./asn1/base'</span><span class="hl opt">);</span>
asn1<span class="hl opt">.</span>constants <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'./asn1/constants'</span><span class="hl opt">);</span>
asn1<span class="hl opt">.</span>decoders <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'./asn1/decoders'</span><span class="hl opt">);</span>
asn1<span class="hl opt">.</span>encoders <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'./asn1/encoders'</span><span class="hl opt">);</span>

<span class="hl opt">},{</span><span class="hl str">&quot;./asn1/api&quot;</span><span class="hl opt">:</span><span class="hl num">8</span><span class="hl opt">,</span><span class="hl str">&quot;./asn1/base&quot;</span><span class="hl opt">:</span><span class="hl num">10</span><span class="hl opt">,</span><span class="hl str">&quot;./asn1/constants&quot;</span><span class="hl opt">:</span><span class="hl num">14</span><span class="hl opt">,</span><span class="hl str">&quot;./asn1/decoders&quot;</span><span class="hl opt">:</span><span class="hl num">16</span><span class="hl opt">,</span><span class="hl str">&quot;./asn1/encoders&quot;</span><span class="hl opt">:</span><span class="hl num">19</span><span class="hl opt">,</span><span class="hl str">&quot;bn.js&quot;</span><span class="hl opt">:</span><span class="hl num">29</span><span class="hl opt">}],</span><span class="hl num">8</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>require<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl kwa">var</span> asn1 <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'../asn1'</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> inherits <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'inherits'</span><span class="hl opt">);</span>

<span class="hl kwa">var</span> api <span class="hl opt">=</span> exports<span class="hl opt">;</span>

api<span class="hl opt">.</span>define <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">define</span><span class="hl opt">(</span>name<span class="hl opt">,</span> body<span class="hl opt">) {</span>
  <span class="hl kwa">return new</span> <span class="hl kwd">Entity</span><span class="hl opt">(</span>name<span class="hl opt">,</span> body<span class="hl opt">);</span>
<span class="hl opt">};</span>

<span class="hl kwa">function</span> <span class="hl kwd">Entity</span><span class="hl opt">(</span>name<span class="hl opt">,</span> body<span class="hl opt">) {</span>
  <span class="hl kwa">this</span><span class="hl opt">.</span>name <span class="hl opt">=</span> name<span class="hl opt">;</span>
  <span class="hl kwa">this</span><span class="hl opt">.</span>body <span class="hl opt">=</span> body<span class="hl opt">;</span>

  <span class="hl kwa">this</span><span class="hl opt">.</span>decoders <span class="hl opt">= {};</span>
  <span class="hl kwa">this</span><span class="hl opt">.</span>encoders <span class="hl opt">= {};</span>
<span class="hl opt">};</span>

Entity<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_createNamed <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">createNamed</span><span class="hl opt">(</span>base<span class="hl opt">) {</span>
  <span class="hl kwa">var</span> named<span class="hl opt">;</span>
  <span class="hl kwa">try</span> <span class="hl opt">{</span>
    named <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'vm'</span><span class="hl opt">).</span><span class="hl kwd">runInThisContext</span><span class="hl opt">(</span>
      <span class="hl str">'(function '</span> <span class="hl opt">+</span> <span class="hl kwa">this</span><span class="hl opt">.</span>name <span class="hl opt">+</span> <span class="hl str">'(entity) {</span><span class="hl esc">\n</span><span class="hl str">'</span> <span class="hl opt">+</span>
      <span class="hl str">'  this._initNamed(entity);</span><span class="hl esc">\n</span><span class="hl str">'</span> <span class="hl opt">+</span>
      <span class="hl str">'})'</span>
    <span class="hl opt">);</span>
  <span class="hl opt">}</span> <span class="hl kwa">catch</span> <span class="hl opt">(</span>e<span class="hl opt">) {</span>
    <span class="hl kwd">named</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>entity<span class="hl opt">) {</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_initNamed</span><span class="hl opt">(</span>entity<span class="hl opt">);</span>
    <span class="hl opt">};</span>
  <span class="hl opt">}</span>
  <span class="hl kwd">inherits</span><span class="hl opt">(</span>named<span class="hl opt">,</span> base<span class="hl opt">);</span>
  named<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_initNamed <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">initnamed</span><span class="hl opt">(</span>entity<span class="hl opt">) {</span>
    base<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> entity<span class="hl opt">);</span>
  <span class="hl opt">};</span>

  <span class="hl kwa">return new</span> <span class="hl kwd">named</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">);</span>
<span class="hl opt">};</span>

Entity<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_getDecoder <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">_getDecoder</span><span class="hl opt">(</span>enc<span class="hl opt">) {</span>
  <span class="hl slc">// Lazily create decoder</span>
  <span class="hl kwa">if</span> <span class="hl opt">(!</span><span class="hl kwa">this</span><span class="hl opt">.</span>decoders<span class="hl opt">.</span><span class="hl kwd">hasOwnProperty</span><span class="hl opt">(</span>enc<span class="hl opt">))</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>decoders<span class="hl opt">[</span>enc<span class="hl opt">] =</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_createNamed</span><span class="hl opt">(</span>asn1<span class="hl opt">.</span>decoders<span class="hl opt">[</span>enc<span class="hl opt">]);</span>
  <span class="hl kwa">return this</span><span class="hl opt">.</span>decoders<span class="hl opt">[</span>enc<span class="hl opt">];</span>
<span class="hl opt">};</span>

Entity<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>decode <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">decode</span><span class="hl opt">(</span>data<span class="hl opt">,</span> enc<span class="hl opt">,</span> options<span class="hl opt">) {</span>
  <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_getDecoder</span><span class="hl opt">(</span>enc<span class="hl opt">).</span><span class="hl kwd">decode</span><span class="hl opt">(</span>data<span class="hl opt">,</span> options<span class="hl opt">);</span>
<span class="hl opt">};</span>

Entity<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_getEncoder <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">_getEncoder</span><span class="hl opt">(</span>enc<span class="hl opt">) {</span>
  <span class="hl slc">// Lazily create encoder</span>
  <span class="hl kwa">if</span> <span class="hl opt">(!</span><span class="hl kwa">this</span><span class="hl opt">.</span>encoders<span class="hl opt">.</span><span class="hl kwd">hasOwnProperty</span><span class="hl opt">(</span>enc<span class="hl opt">))</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>encoders<span class="hl opt">[</span>enc<span class="hl opt">] =</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_createNamed</span><span class="hl opt">(</span>asn1<span class="hl opt">.</span>encoders<span class="hl opt">[</span>enc<span class="hl opt">]);</span>
  <span class="hl kwa">return this</span><span class="hl opt">.</span>encoders<span class="hl opt">[</span>enc<span class="hl opt">];</span>
<span class="hl opt">};</span>

Entity<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>encode <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">encode</span><span class="hl opt">(</span>data<span class="hl opt">,</span> enc<span class="hl opt">,</span> <span class="hl com">/* internal */</span> reporter<span class="hl opt">) {</span>
  <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_getEncoder</span><span class="hl opt">(</span>enc<span class="hl opt">).</span><span class="hl kwd">encode</span><span class="hl opt">(</span>data<span class="hl opt">,</span> reporter<span class="hl opt">);</span>
<span class="hl opt">};</span>

<span class="hl opt">},{</span><span class="hl str">&quot;../asn1&quot;</span><span class="hl opt">:</span><span class="hl num">7</span><span class="hl opt">,</span><span class="hl str">&quot;inherits&quot;</span><span class="hl opt">:</span><span class="hl num">144</span><span class="hl opt">,</span><span class="hl str">&quot;vm&quot;</span><span class="hl opt">:</span><span class="hl num">257</span><span class="hl opt">}],</span><span class="hl num">9</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>require<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl kwa">var</span> inherits <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'inherits'</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> Reporter <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'../base'</span><span class="hl opt">).</span>Reporter<span class="hl opt">;</span>
<span class="hl kwa">var</span> Buffer <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'buffer'</span><span class="hl opt">).</span>Buffer<span class="hl opt">;</span>

<span class="hl kwa">function</span> <span class="hl kwd">DecoderBuffer</span><span class="hl opt">(</span>base<span class="hl opt">,</span> options<span class="hl opt">) {</span>
  Reporter<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> options<span class="hl opt">);</span>
  <span class="hl kwa">if</span> <span class="hl opt">(!</span>Buffer<span class="hl opt">.</span><span class="hl kwd">isBuffer</span><span class="hl opt">(</span>base<span class="hl opt">)) {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">error</span><span class="hl opt">(</span><span class="hl str">'Input not Buffer'</span><span class="hl opt">);</span>
    <span class="hl kwa">return</span><span class="hl opt">;</span>
  <span class="hl opt">}</span>

  <span class="hl kwa">this</span><span class="hl opt">.</span>base <span class="hl opt">=</span> base<span class="hl opt">;</span>
  <span class="hl kwa">this</span><span class="hl opt">.</span>offset <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
  <span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">=</span> base<span class="hl opt">.</span>length<span class="hl opt">;</span>
<span class="hl opt">}</span>
<span class="hl kwd">inherits</span><span class="hl opt">(</span>DecoderBuffer<span class="hl opt">,</span> Reporter<span class="hl opt">);</span>
exports<span class="hl opt">.</span>DecoderBuffer <span class="hl opt">=</span> DecoderBuffer<span class="hl opt">;</span>

DecoderBuffer<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>save <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">save</span><span class="hl opt">() {</span>
  <span class="hl kwa">return</span> <span class="hl opt">{</span> offset<span class="hl opt">:</span> <span class="hl kwa">this</span><span class="hl opt">.</span>offset<span class="hl opt">,</span> reporter<span class="hl opt">:</span> Reporter<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>save<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">) };</span>
<span class="hl opt">};</span>

DecoderBuffer<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>restore <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">restore</span><span class="hl opt">(</span>save<span class="hl opt">) {</span>
  <span class="hl slc">// Return skipped data</span>
  <span class="hl kwa">var</span> res <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">DecoderBuffer</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>base<span class="hl opt">);</span>
  res<span class="hl opt">.</span>offset <span class="hl opt">=</span> save<span class="hl opt">.</span>offset<span class="hl opt">;</span>
  res<span class="hl opt">.</span>length <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>offset<span class="hl opt">;</span>

  <span class="hl kwa">this</span><span class="hl opt">.</span>offset <span class="hl opt">=</span> save<span class="hl opt">.</span>offset<span class="hl opt">;</span>
  Reporter<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>restore<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> save<span class="hl opt">.</span>reporter<span class="hl opt">);</span>

  <span class="hl kwa">return</span> res<span class="hl opt">;</span>
<span class="hl opt">};</span>

DecoderBuffer<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>isEmpty <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">isEmpty</span><span class="hl opt">() {</span>
  <span class="hl kwa">return this</span><span class="hl opt">.</span>offset <span class="hl opt">===</span> <span class="hl kwa">this</span><span class="hl opt">.</span>length<span class="hl opt">;</span>
<span class="hl opt">};</span>

DecoderBuffer<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>readUInt8 <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">readUInt8</span><span class="hl opt">(</span>fail<span class="hl opt">) {</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>offset <span class="hl opt">+</span> <span class="hl num">1</span> <span class="hl opt">&lt;=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>length<span class="hl opt">)</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span>base<span class="hl opt">.</span><span class="hl kwd">readUInt8</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>offset<span class="hl opt">++,</span> <span class="hl kwa">true</span><span class="hl opt">);</span>
  <span class="hl kwa">else</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">error</span><span class="hl opt">(</span>fail <span class="hl opt">||</span> <span class="hl str">'DecoderBuffer overrun'</span><span class="hl opt">);</span>
<span class="hl opt">}</span>

DecoderBuffer<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>skip <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">skip</span><span class="hl opt">(</span>bytes<span class="hl opt">,</span> fail<span class="hl opt">) {</span>
  <span class="hl kwa">if</span> <span class="hl opt">(!(</span><span class="hl kwa">this</span><span class="hl opt">.</span>offset <span class="hl opt">+</span> bytes <span class="hl opt">&lt;=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>length<span class="hl opt">))</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">error</span><span class="hl opt">(</span>fail <span class="hl opt">||</span> <span class="hl str">'DecoderBuffer overrun'</span><span class="hl opt">);</span>

  <span class="hl kwa">var</span> res <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">DecoderBuffer</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>base<span class="hl opt">);</span>

  <span class="hl slc">// Share reporter state</span>
  res<span class="hl opt">.</span>_reporterState <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_reporterState<span class="hl opt">;</span>

  res<span class="hl opt">.</span>offset <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>offset<span class="hl opt">;</span>
  res<span class="hl opt">.</span>length <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>offset <span class="hl opt">+</span> bytes<span class="hl opt">;</span>
  <span class="hl kwa">this</span><span class="hl opt">.</span>offset <span class="hl opt">+=</span> bytes<span class="hl opt">;</span>
  <span class="hl kwa">return</span> res<span class="hl opt">;</span>
<span class="hl opt">}</span>

DecoderBuffer<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>raw <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">raw</span><span class="hl opt">(</span>save<span class="hl opt">) {</span>
  <span class="hl kwa">return this</span><span class="hl opt">.</span>base<span class="hl opt">.</span><span class="hl kwd">slice</span><span class="hl opt">(</span>save <span class="hl opt">?</span> save<span class="hl opt">.</span>offset <span class="hl opt">:</span> <span class="hl kwa">this</span><span class="hl opt">.</span>offset<span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">.</span>length<span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">EncoderBuffer</span><span class="hl opt">(</span>value<span class="hl opt">,</span> reporter<span class="hl opt">) {</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>Array<span class="hl opt">.</span><span class="hl kwd">isArray</span><span class="hl opt">(</span>value<span class="hl opt">)) {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>value <span class="hl opt">=</span> value<span class="hl opt">.</span><span class="hl kwd">map</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">(</span>item<span class="hl opt">) {</span>
      <span class="hl kwa">if</span> <span class="hl opt">(!(</span>item <span class="hl kwa">instanceof</span> EncoderBuffer<span class="hl opt">))</span>
        item <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">EncoderBuffer</span><span class="hl opt">(</span>item<span class="hl opt">,</span> reporter<span class="hl opt">);</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">+=</span> item<span class="hl opt">.</span>length<span class="hl opt">;</span>
      <span class="hl kwa">return</span> item<span class="hl opt">;</span>
    <span class="hl opt">},</span> <span class="hl kwa">this</span><span class="hl opt">);</span>
  <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> value <span class="hl opt">===</span> <span class="hl str">'number'</span><span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!(</span><span class="hl num">0</span> <span class="hl opt">&lt;=</span> value <span class="hl opt">&amp;&amp;</span> value <span class="hl opt">&lt;=</span> <span class="hl num">0xff</span><span class="hl opt">))</span>
      <span class="hl kwa">return</span> reporter<span class="hl opt">.</span><span class="hl kwd">error</span><span class="hl opt">(</span><span class="hl str">'non-byte EncoderBuffer value'</span><span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>value <span class="hl opt">=</span> value<span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>
  <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> value <span class="hl opt">===</span> <span class="hl str">'string'</span><span class="hl opt">) {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>value <span class="hl opt">=</span> value<span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">=</span> Buffer<span class="hl opt">.</span><span class="hl kwd">byteLength</span><span class="hl opt">(</span>value<span class="hl opt">);</span>
  <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>Buffer<span class="hl opt">.</span><span class="hl kwd">isBuffer</span><span class="hl opt">(</span>value<span class="hl opt">)) {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>value <span class="hl opt">=</span> value<span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">=</span> value<span class="hl opt">.</span>length<span class="hl opt">;</span>
  <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
    <span class="hl kwa">return</span> reporter<span class="hl opt">.</span><span class="hl kwd">error</span><span class="hl opt">(</span><span class="hl str">'Unsupported type: '</span> <span class="hl opt">+</span> <span class="hl kwa">typeof</span> value<span class="hl opt">);</span>
  <span class="hl opt">}</span>
<span class="hl opt">}</span>
exports<span class="hl opt">.</span>EncoderBuffer <span class="hl opt">=</span> EncoderBuffer<span class="hl opt">;</span>

EncoderBuffer<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>join <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">join</span><span class="hl opt">(</span>out<span class="hl opt">,</span> offset<span class="hl opt">) {</span>
  <span class="hl kwa">if</span> <span class="hl opt">(!</span>out<span class="hl opt">)</span>
    out <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Buffer</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>length<span class="hl opt">);</span>
  <span class="hl kwa">if</span> <span class="hl opt">(!</span>offset<span class="hl opt">)</span>
    offset <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>

  <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">===</span> <span class="hl num">0</span><span class="hl opt">)</span>
    <span class="hl kwa">return</span> out<span class="hl opt">;</span>

  <span class="hl kwa">if</span> <span class="hl opt">(</span>Array<span class="hl opt">.</span><span class="hl kwd">isArray</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>value<span class="hl opt">)) {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>value<span class="hl opt">.</span><span class="hl kwd">forEach</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">(</span>item<span class="hl opt">) {</span>
      item<span class="hl opt">.</span><span class="hl kwd">join</span><span class="hl opt">(</span>out<span class="hl opt">,</span> offset<span class="hl opt">);</span>
      offset <span class="hl opt">+=</span> item<span class="hl opt">.</span>length<span class="hl opt">;</span>
    <span class="hl opt">});</span>
  <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof this</span><span class="hl opt">.</span>value <span class="hl opt">===</span> <span class="hl str">'number'</span><span class="hl opt">)</span>
      out<span class="hl opt">[</span>offset<span class="hl opt">] =</span> <span class="hl kwa">this</span><span class="hl opt">.</span>value<span class="hl opt">;</span>
    <span class="hl kwa">else if</span> <span class="hl opt">(</span><span class="hl kwa">typeof this</span><span class="hl opt">.</span>value <span class="hl opt">===</span> <span class="hl str">'string'</span><span class="hl opt">)</span>
      out<span class="hl opt">.</span><span class="hl kwd">write</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>value<span class="hl opt">,</span> offset<span class="hl opt">);</span>
    <span class="hl kwa">else if</span> <span class="hl opt">(</span>Buffer<span class="hl opt">.</span><span class="hl kwd">isBuffer</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>value<span class="hl opt">))</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>value<span class="hl opt">.</span><span class="hl kwd">copy</span><span class="hl opt">(</span>out<span class="hl opt">,</span> offset<span class="hl opt">);</span>
    offset <span class="hl opt">+=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>length<span class="hl opt">;</span>
  <span class="hl opt">}</span>

  <span class="hl kwa">return</span> out<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl opt">},{</span><span class="hl str">&quot;../base&quot;</span><span class="hl opt">:</span><span class="hl num">10</span><span class="hl opt">,</span><span class="hl str">&quot;buffer&quot;</span><span class="hl opt">:</span><span class="hl num">58</span><span class="hl opt">,</span><span class="hl str">&quot;inherits&quot;</span><span class="hl opt">:</span><span class="hl num">144</span><span class="hl opt">}],</span><span class="hl num">10</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>require<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl kwa">var</span> base <span class="hl opt">=</span> exports<span class="hl opt">;</span>

base<span class="hl opt">.</span>Reporter <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'./reporter'</span><span class="hl opt">).</span>Reporter<span class="hl opt">;</span>
base<span class="hl opt">.</span>DecoderBuffer <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'./buffer'</span><span class="hl opt">).</span>DecoderBuffer<span class="hl opt">;</span>
base<span class="hl opt">.</span>EncoderBuffer <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'./buffer'</span><span class="hl opt">).</span>EncoderBuffer<span class="hl opt">;</span>
base<span class="hl opt">.</span>Node <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'./node'</span><span class="hl opt">);</span>

<span class="hl opt">},{</span><span class="hl str">&quot;./buffer&quot;</span><span class="hl opt">:</span><span class="hl num">9</span><span class="hl opt">,</span><span class="hl str">&quot;./node&quot;</span><span class="hl opt">:</span><span class="hl num">11</span><span class="hl opt">,</span><span class="hl str">&quot;./reporter&quot;</span><span class="hl opt">:</span><span class="hl num">12</span><span class="hl opt">}],</span><span class="hl num">11</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>require<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl kwa">var</span> Reporter <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'../base'</span><span class="hl opt">).</span>Reporter<span class="hl opt">;</span>
<span class="hl kwa">var</span> EncoderBuffer <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'../base'</span><span class="hl opt">).</span>EncoderBuffer<span class="hl opt">;</span>
<span class="hl kwa">var</span> DecoderBuffer <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'../base'</span><span class="hl opt">).</span>DecoderBuffer<span class="hl opt">;</span>
<span class="hl kwa">var</span> assert <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'minimalistic-assert'</span><span class="hl opt">);</span>

<span class="hl slc">// Supported tags</span>
<span class="hl kwa">var</span> tags <span class="hl opt">= [</span>
  <span class="hl str">'seq'</span><span class="hl opt">,</span> <span class="hl str">'seqof'</span><span class="hl opt">,</span> <span class="hl str">'set'</span><span class="hl opt">,</span> <span class="hl str">'setof'</span><span class="hl opt">,</span> <span class="hl str">'objid'</span><span class="hl opt">,</span> <span class="hl str">'bool'</span><span class="hl opt">,</span>
  <span class="hl str">'gentime'</span><span class="hl opt">,</span> <span class="hl str">'utctime'</span><span class="hl opt">,</span> <span class="hl str">'null_'</span><span class="hl opt">,</span> <span class="hl str">'enum'</span><span class="hl opt">,</span> <span class="hl str">'int'</span><span class="hl opt">,</span>
  <span class="hl str">'bitstr'</span><span class="hl opt">,</span> <span class="hl str">'bmpstr'</span><span class="hl opt">,</span> <span class="hl str">'charstr'</span><span class="hl opt">,</span> <span class="hl str">'genstr'</span><span class="hl opt">,</span> <span class="hl str">'graphstr'</span><span class="hl opt">,</span> <span class="hl str">'ia5str'</span><span class="hl opt">,</span> <span class="hl str">'iso646str'</span><span class="hl opt">,</span>
  <span class="hl str">'numstr'</span><span class="hl opt">,</span> <span class="hl str">'octstr'</span><span class="hl opt">,</span> <span class="hl str">'printstr'</span><span class="hl opt">,</span> <span class="hl str">'t61str'</span><span class="hl opt">,</span> <span class="hl str">'unistr'</span><span class="hl opt">,</span> <span class="hl str">'utf8str'</span><span class="hl opt">,</span> <span class="hl str">'videostr'</span>
<span class="hl opt">];</span>

<span class="hl slc">// Public methods list</span>
<span class="hl kwa">var</span> methods <span class="hl opt">= [</span>
  <span class="hl str">'key'</span><span class="hl opt">,</span> <span class="hl str">'obj'</span><span class="hl opt">,</span> <span class="hl str">'use'</span><span class="hl opt">,</span> <span class="hl str">'optional'</span><span class="hl opt">,</span> <span class="hl str">'explicit'</span><span class="hl opt">,</span> <span class="hl str">'implicit'</span><span class="hl opt">,</span> <span class="hl str">'def'</span><span class="hl opt">,</span> <span class="hl str">'choice'</span><span class="hl opt">,</span>
  <span class="hl str">'any'</span><span class="hl opt">,</span> <span class="hl str">'contains'</span>
<span class="hl opt">].</span><span class="hl kwd">concat</span><span class="hl opt">(</span>tags<span class="hl opt">);</span>

<span class="hl slc">// Overrided methods list</span>
<span class="hl kwa">var</span> overrided <span class="hl opt">= [</span>
  <span class="hl str">'_peekTag'</span><span class="hl opt">,</span> <span class="hl str">'_decodeTag'</span><span class="hl opt">,</span> <span class="hl str">'_use'</span><span class="hl opt">,</span>
  <span class="hl str">'_decodeStr'</span><span class="hl opt">,</span> <span class="hl str">'_decodeObjid'</span><span class="hl opt">,</span> <span class="hl str">'_decodeTime'</span><span class="hl opt">,</span>
  <span class="hl str">'_decodeNull'</span><span class="hl opt">,</span> <span class="hl str">'_decodeInt'</span><span class="hl opt">,</span> <span class="hl str">'_decodeBool'</span><span class="hl opt">,</span> <span class="hl str">'_decodeList'</span><span class="hl opt">,</span>

  <span class="hl str">'_encodeComposite'</span><span class="hl opt">,</span> <span class="hl str">'_encodeStr'</span><span class="hl opt">,</span> <span class="hl str">'_encodeObjid'</span><span class="hl opt">,</span> <span class="hl str">'_encodeTime'</span><span class="hl opt">,</span>
  <span class="hl str">'_encodeNull'</span><span class="hl opt">,</span> <span class="hl str">'_encodeInt'</span><span class="hl opt">,</span> <span class="hl str">'_encodeBool'</span>
<span class="hl opt">];</span>

<span class="hl kwa">function</span> <span class="hl kwd">Node</span><span class="hl opt">(</span>enc<span class="hl opt">,</span> parent<span class="hl opt">) {</span>
  <span class="hl kwa">var</span> state <span class="hl opt">= {};</span>
  <span class="hl kwa">this</span><span class="hl opt">.</span>_baseState <span class="hl opt">=</span> state<span class="hl opt">;</span>

  state<span class="hl opt">.</span>enc <span class="hl opt">=</span> enc<span class="hl opt">;</span>

  state<span class="hl opt">.</span>parent <span class="hl opt">=</span> parent <span class="hl opt">||</span> <span class="hl kwa">null</span><span class="hl opt">;</span>
  state<span class="hl opt">.</span>children <span class="hl opt">=</span> <span class="hl kwa">null</span><span class="hl opt">;</span>

  <span class="hl slc">// State</span>
  state<span class="hl opt">.</span>tag <span class="hl opt">=</span> <span class="hl kwa">null</span><span class="hl opt">;</span>
  state<span class="hl opt">.</span>args <span class="hl opt">=</span> <span class="hl kwa">null</span><span class="hl opt">;</span>
  state<span class="hl opt">.</span>reverseArgs <span class="hl opt">=</span> <span class="hl kwa">null</span><span class="hl opt">;</span>
  state<span class="hl opt">.</span>choice <span class="hl opt">=</span> <span class="hl kwa">null</span><span class="hl opt">;</span>
  state<span class="hl opt">.</span>optional <span class="hl opt">=</span> <span class="hl kwa">false</span><span class="hl opt">;</span>
  state<span class="hl opt">.</span>any <span class="hl opt">=</span> <span class="hl kwa">false</span><span class="hl opt">;</span>
  state<span class="hl opt">.</span>obj <span class="hl opt">=</span> <span class="hl kwa">false</span><span class="hl opt">;</span>
  state<span class="hl opt">.</span><span class="hl kwa">use</span> <span class="hl opt">=</span> <span class="hl kwa">null</span><span class="hl opt">;</span>
  state<span class="hl opt">.</span>useDecoder <span class="hl opt">=</span> <span class="hl kwa">null</span><span class="hl opt">;</span>
  state<span class="hl opt">.</span>key <span class="hl opt">=</span> <span class="hl kwa">null</span><span class="hl opt">;</span>
  state<span class="hl opt">[</span><span class="hl str">'default'</span><span class="hl opt">] =</span> <span class="hl kwa">null</span><span class="hl opt">;</span>
  state<span class="hl opt">.</span>explicit <span class="hl opt">=</span> <span class="hl kwa">null</span><span class="hl opt">;</span>
  state<span class="hl opt">.</span>implicit <span class="hl opt">=</span> <span class="hl kwa">null</span><span class="hl opt">;</span>
  state<span class="hl opt">.</span>contains <span class="hl opt">=</span> <span class="hl kwa">null</span><span class="hl opt">;</span>

  <span class="hl slc">// Should create new instance on each method</span>
  <span class="hl kwa">if</span> <span class="hl opt">(!</span>state<span class="hl opt">.</span>parent<span class="hl opt">) {</span>
    state<span class="hl opt">.</span>children <span class="hl opt">= [];</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_wrap</span><span class="hl opt">();</span>
  <span class="hl opt">}</span>
<span class="hl opt">}</span>
module<span class="hl opt">.</span>exports <span class="hl opt">=</span> Node<span class="hl opt">;</span>

<span class="hl kwa">var</span> stateProps <span class="hl opt">= [</span>
  <span class="hl str">'enc'</span><span class="hl opt">,</span> <span class="hl str">'parent'</span><span class="hl opt">,</span> <span class="hl str">'children'</span><span class="hl opt">,</span> <span class="hl str">'tag'</span><span class="hl opt">,</span> <span class="hl str">'args'</span><span class="hl opt">,</span> <span class="hl str">'reverseArgs'</span><span class="hl opt">,</span> <span class="hl str">'choice'</span><span class="hl opt">,</span>
  <span class="hl str">'optional'</span><span class="hl opt">,</span> <span class="hl str">'any'</span><span class="hl opt">,</span> <span class="hl str">'obj'</span><span class="hl opt">,</span> <span class="hl str">'use'</span><span class="hl opt">,</span> <span class="hl str">'alteredUse'</span><span class="hl opt">,</span> <span class="hl str">'key'</span><span class="hl opt">,</span> <span class="hl str">'default'</span><span class="hl opt">,</span> <span class="hl str">'explicit'</span><span class="hl opt">,</span>
  <span class="hl str">'implicit'</span>
<span class="hl opt">];</span>

Node<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>clone <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">clone</span><span class="hl opt">() {</span>
  <span class="hl kwa">var</span> state <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_baseState<span class="hl opt">;</span>
  <span class="hl kwa">var</span> cstate <span class="hl opt">= {};</span>
  stateProps<span class="hl opt">.</span><span class="hl kwd">forEach</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">(</span>prop<span class="hl opt">) {</span>
    cstate<span class="hl opt">[</span>prop<span class="hl opt">] =</span> state<span class="hl opt">[</span>prop<span class="hl opt">];</span>
  <span class="hl opt">});</span>
  <span class="hl kwa">var</span> res <span class="hl opt">=</span> <span class="hl kwa">new this</span><span class="hl opt">.</span><span class="hl kwd">constructor</span><span class="hl opt">(</span>cstate<span class="hl opt">.</span>parent<span class="hl opt">);</span>
  res<span class="hl opt">.</span>_baseState <span class="hl opt">=</span> cstate<span class="hl opt">;</span>
  <span class="hl kwa">return</span> res<span class="hl opt">;</span>
<span class="hl opt">};</span>

Node<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_wrap <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">wrap</span><span class="hl opt">() {</span>
  <span class="hl kwa">var</span> state <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_baseState<span class="hl opt">;</span>
  methods<span class="hl opt">.</span><span class="hl kwd">forEach</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">(</span>method<span class="hl opt">) {</span>
    <span class="hl kwa">this</span><span class="hl opt">[</span>method<span class="hl opt">] =</span> <span class="hl kwa">function</span> <span class="hl kwd">_wrappedMethod</span><span class="hl opt">() {</span>
      <span class="hl kwa">var</span> clone <span class="hl opt">=</span> <span class="hl kwa">new this</span><span class="hl opt">.</span><span class="hl kwd">constructor</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">);</span>
      state<span class="hl opt">.</span>children<span class="hl opt">.</span><span class="hl kwd">push</span><span class="hl opt">(</span>clone<span class="hl opt">);</span>
      <span class="hl kwa">return</span> clone<span class="hl opt">[</span>method<span class="hl opt">].</span><span class="hl kwd">apply</span><span class="hl opt">(</span>clone<span class="hl opt">,</span> arguments<span class="hl opt">);</span>
    <span class="hl opt">};</span>
  <span class="hl opt">},</span> <span class="hl kwa">this</span><span class="hl opt">);</span>
<span class="hl opt">};</span>

Node<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_init <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">init</span><span class="hl opt">(</span>body<span class="hl opt">) {</span>
  <span class="hl kwa">var</span> state <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_baseState<span class="hl opt">;</span>

  <span class="hl kwd">assert</span><span class="hl opt">(</span>state<span class="hl opt">.</span>parent <span class="hl opt">===</span> <span class="hl kwa">null</span><span class="hl opt">);</span>
  body<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">);</span>

  <span class="hl slc">// Filter children</span>
  state<span class="hl opt">.</span>children <span class="hl opt">=</span> state<span class="hl opt">.</span>children<span class="hl opt">.</span><span class="hl kwd">filter</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">(</span>child<span class="hl opt">) {</span>
    <span class="hl kwa">return</span> child<span class="hl opt">.</span>_baseState<span class="hl opt">.</span>parent <span class="hl opt">===</span> <span class="hl kwa">this</span><span class="hl opt">;</span>
  <span class="hl opt">},</span> <span class="hl kwa">this</span><span class="hl opt">);</span>
  assert<span class="hl opt">.</span><span class="hl kwd">equal</span><span class="hl opt">(</span>state<span class="hl opt">.</span>children<span class="hl opt">.</span>length<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl str">'Root node can have only one child'</span><span class="hl opt">);</span>
<span class="hl opt">};</span>

Node<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_useArgs <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">useArgs</span><span class="hl opt">(</span>args<span class="hl opt">) {</span>
  <span class="hl kwa">var</span> state <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_baseState<span class="hl opt">;</span>

  <span class="hl slc">// Filter children and args</span>
  <span class="hl kwa">var</span> children <span class="hl opt">=</span> args<span class="hl opt">.</span><span class="hl kwd">filter</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">(</span>arg<span class="hl opt">) {</span>
    <span class="hl kwa">return</span> arg <span class="hl kwa">instanceof this</span><span class="hl opt">.</span>constructor<span class="hl opt">;</span>
  <span class="hl opt">},</span> <span class="hl kwa">this</span><span class="hl opt">);</span>
  args <span class="hl opt">=</span> args<span class="hl opt">.</span><span class="hl kwd">filter</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">(</span>arg<span class="hl opt">) {</span>
    <span class="hl kwa">return</span> <span class="hl opt">!(</span>arg <span class="hl kwa">instanceof this</span><span class="hl opt">.</span>constructor<span class="hl opt">);</span>
  <span class="hl opt">},</span> <span class="hl kwa">this</span><span class="hl opt">);</span>

  <span class="hl kwa">if</span> <span class="hl opt">(</span>children<span class="hl opt">.</span>length <span class="hl opt">!==</span> <span class="hl num">0</span><span class="hl opt">) {</span>
    <span class="hl kwd">assert</span><span class="hl opt">(</span>state<span class="hl opt">.</span>children <span class="hl opt">===</span> <span class="hl kwa">null</span><span class="hl opt">);</span>
    state<span class="hl opt">.</span>children <span class="hl opt">=</span> children<span class="hl opt">;</span>

    <span class="hl slc">// Replace parent to maintain backward link</span>
    children<span class="hl opt">.</span><span class="hl kwd">forEach</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">(</span>child<span class="hl opt">) {</span>
      child<span class="hl opt">.</span>_baseState<span class="hl opt">.</span>parent <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">;</span>
    <span class="hl opt">},</span> <span class="hl kwa">this</span><span class="hl opt">);</span>
  <span class="hl opt">}</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>args<span class="hl opt">.</span>length <span class="hl opt">!==</span> <span class="hl num">0</span><span class="hl opt">) {</span>
    <span class="hl kwd">assert</span><span class="hl opt">(</span>state<span class="hl opt">.</span>args <span class="hl opt">===</span> <span class="hl kwa">null</span><span class="hl opt">);</span>
    state<span class="hl opt">.</span>args <span class="hl opt">=</span> args<span class="hl opt">;</span>
    state<span class="hl opt">.</span>reverseArgs <span class="hl opt">=</span> args<span class="hl opt">.</span><span class="hl kwd">map</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">(</span>arg<span class="hl opt">) {</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> arg <span class="hl opt">!==</span> <span class="hl str">'object'</span> <span class="hl opt">||</span> arg<span class="hl opt">.</span>constructor <span class="hl opt">!==</span> Object<span class="hl opt">)</span>
        <span class="hl kwa">return</span> arg<span class="hl opt">;</span>

      <span class="hl kwa">var</span> res <span class="hl opt">= {};</span>
      Object<span class="hl opt">.</span><span class="hl kwd">keys</span><span class="hl opt">(</span>arg<span class="hl opt">).</span><span class="hl kwd">forEach</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">(</span>key<span class="hl opt">) {</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>key <span class="hl opt">== (</span>key <span class="hl opt">|</span> <span class="hl num">0</span><span class="hl opt">))</span>
          key <span class="hl opt">|=</span> <span class="hl num">0</span><span class="hl opt">;</span>
        <span class="hl kwa">var</span> value <span class="hl opt">=</span> arg<span class="hl opt">[</span>key<span class="hl opt">];</span>
        res<span class="hl opt">[</span>value<span class="hl opt">] =</span> key<span class="hl opt">;</span>
      <span class="hl opt">});</span>
      <span class="hl kwa">return</span> res<span class="hl opt">;</span>
    <span class="hl opt">});</span>
  <span class="hl opt">}</span>
<span class="hl opt">};</span>

<span class="hl slc">//</span>
<span class="hl slc">// Overrided methods</span>
<span class="hl slc">//</span>

overrided<span class="hl opt">.</span><span class="hl kwd">forEach</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">(</span>method<span class="hl opt">) {</span>
  Node<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">[</span>method<span class="hl opt">] =</span> <span class="hl kwa">function</span> <span class="hl kwd">_overrided</span><span class="hl opt">() {</span>
    <span class="hl kwa">var</span> state <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_baseState<span class="hl opt">;</span>
    <span class="hl kwa">throw new</span> <span class="hl kwd">Error</span><span class="hl opt">(</span>method <span class="hl opt">+</span> <span class="hl str">' not implemented for encoding: '</span> <span class="hl opt">+</span> state<span class="hl opt">.</span>enc<span class="hl opt">);</span>
  <span class="hl opt">};</span>
<span class="hl opt">});</span>

<span class="hl slc">//</span>
<span class="hl slc">// Public methods</span>
<span class="hl slc">//</span>

tags<span class="hl opt">.</span><span class="hl kwd">forEach</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">(</span>tag<span class="hl opt">) {</span>
  Node<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">[</span>tag<span class="hl opt">] =</span> <span class="hl kwa">function</span> <span class="hl kwd">_tagMethod</span><span class="hl opt">() {</span>
    <span class="hl kwa">var</span> state <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_baseState<span class="hl opt">;</span>
    <span class="hl kwa">var</span> args <span class="hl opt">=</span> Array<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>slice<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span>arguments<span class="hl opt">);</span>

    <span class="hl kwd">assert</span><span class="hl opt">(</span>state<span class="hl opt">.</span>tag <span class="hl opt">===</span> <span class="hl kwa">null</span><span class="hl opt">);</span>
    state<span class="hl opt">.</span>tag <span class="hl opt">=</span> tag<span class="hl opt">;</span>

    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_useArgs</span><span class="hl opt">(</span>args<span class="hl opt">);</span>

    <span class="hl kwa">return this</span><span class="hl opt">;</span>
  <span class="hl opt">};</span>
<span class="hl opt">});</span>

Node<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwa">use</span> <span class="hl opt">=</span> <span class="hl kwa">function use</span><span class="hl opt">(</span>item<span class="hl opt">) {</span>
  <span class="hl kwa">var</span> state <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_baseState<span class="hl opt">;</span>

  <span class="hl kwd">assert</span><span class="hl opt">(</span>state<span class="hl opt">.</span><span class="hl kwa">use</span> <span class="hl opt">===</span> <span class="hl kwa">null</span><span class="hl opt">);</span>
  state<span class="hl opt">.</span><span class="hl kwa">use</span> <span class="hl opt">=</span> item<span class="hl opt">;</span>

  <span class="hl kwa">return this</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

Node<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>optional <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">optional</span><span class="hl opt">() {</span>
  <span class="hl kwa">var</span> state <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_baseState<span class="hl opt">;</span>

  state<span class="hl opt">.</span>optional <span class="hl opt">=</span> <span class="hl kwa">true</span><span class="hl opt">;</span>

  <span class="hl kwa">return this</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

Node<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>def <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">def</span><span class="hl opt">(</span>val<span class="hl opt">) {</span>
  <span class="hl kwa">var</span> state <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_baseState<span class="hl opt">;</span>

  <span class="hl kwd">assert</span><span class="hl opt">(</span>state<span class="hl opt">[</span><span class="hl str">'default'</span><span class="hl opt">] ===</span> <span class="hl kwa">null</span><span class="hl opt">);</span>
  state<span class="hl opt">[</span><span class="hl str">'default'</span><span class="hl opt">] =</span> val<span class="hl opt">;</span>
  state<span class="hl opt">.</span>optional <span class="hl opt">=</span> <span class="hl kwa">true</span><span class="hl opt">;</span>

  <span class="hl kwa">return this</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

Node<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>explicit <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">explicit</span><span class="hl opt">(</span>num<span class="hl opt">) {</span>
  <span class="hl kwa">var</span> state <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_baseState<span class="hl opt">;</span>

  <span class="hl kwd">assert</span><span class="hl opt">(</span>state<span class="hl opt">.</span>explicit <span class="hl opt">===</span> <span class="hl kwa">null</span> <span class="hl opt">&amp;&amp;</span> state<span class="hl opt">.</span>implicit <span class="hl opt">===</span> <span class="hl kwa">null</span><span class="hl opt">);</span>
  state<span class="hl opt">.</span>explicit <span class="hl opt">=</span> num<span class="hl opt">;</span>

  <span class="hl kwa">return this</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

Node<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>implicit <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">implicit</span><span class="hl opt">(</span>num<span class="hl opt">) {</span>
  <span class="hl kwa">var</span> state <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_baseState<span class="hl opt">;</span>

  <span class="hl kwd">assert</span><span class="hl opt">(</span>state<span class="hl opt">.</span>explicit <span class="hl opt">===</span> <span class="hl kwa">null</span> <span class="hl opt">&amp;&amp;</span> state<span class="hl opt">.</span>implicit <span class="hl opt">===</span> <span class="hl kwa">null</span><span class="hl opt">);</span>
  state<span class="hl opt">.</span>implicit <span class="hl opt">=</span> num<span class="hl opt">;</span>

  <span class="hl kwa">return this</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

Node<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>obj <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">obj</span><span class="hl opt">() {</span>
  <span class="hl kwa">var</span> state <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_baseState<span class="hl opt">;</span>
  <span class="hl kwa">var</span> args <span class="hl opt">=</span> Array<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>slice<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span>arguments<span class="hl opt">);</span>

  state<span class="hl opt">.</span>obj <span class="hl opt">=</span> <span class="hl kwa">true</span><span class="hl opt">;</span>

  <span class="hl kwa">if</span> <span class="hl opt">(</span>args<span class="hl opt">.</span>length <span class="hl opt">!==</span> <span class="hl num">0</span><span class="hl opt">)</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_useArgs</span><span class="hl opt">(</span>args<span class="hl opt">);</span>

  <span class="hl kwa">return this</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

Node<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>key <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">key</span><span class="hl opt">(</span>newKey<span class="hl opt">) {</span>
  <span class="hl kwa">var</span> state <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_baseState<span class="hl opt">;</span>

  <span class="hl kwd">assert</span><span class="hl opt">(</span>state<span class="hl opt">.</span>key <span class="hl opt">===</span> <span class="hl kwa">null</span><span class="hl opt">);</span>
  state<span class="hl opt">.</span>key <span class="hl opt">=</span> newKey<span class="hl opt">;</span>

  <span class="hl kwa">return this</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

Node<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>any <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">any</span><span class="hl opt">() {</span>
  <span class="hl kwa">var</span> state <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_baseState<span class="hl opt">;</span>

  state<span class="hl opt">.</span>any <span class="hl opt">=</span> <span class="hl kwa">true</span><span class="hl opt">;</span>

  <span class="hl kwa">return this</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

Node<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>choice <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">choice</span><span class="hl opt">(</span>obj<span class="hl opt">) {</span>
  <span class="hl kwa">var</span> state <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_baseState<span class="hl opt">;</span>

  <span class="hl kwd">assert</span><span class="hl opt">(</span>state<span class="hl opt">.</span>choice <span class="hl opt">===</span> <span class="hl kwa">null</span><span class="hl opt">);</span>
  state<span class="hl opt">.</span>choice <span class="hl opt">=</span> obj<span class="hl opt">;</span>
  <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_useArgs</span><span class="hl opt">(</span>Object<span class="hl opt">.</span><span class="hl kwd">keys</span><span class="hl opt">(</span>obj<span class="hl opt">).</span><span class="hl kwd">map</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">(</span>key<span class="hl opt">) {</span>
    <span class="hl kwa">return</span> obj<span class="hl opt">[</span>key<span class="hl opt">];</span>
  <span class="hl opt">}));</span>

  <span class="hl kwa">return this</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

Node<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>contains <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">contains</span><span class="hl opt">(</span>item<span class="hl opt">) {</span>
  <span class="hl kwa">var</span> state <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_baseState<span class="hl opt">;</span>

  <span class="hl kwd">assert</span><span class="hl opt">(</span>state<span class="hl opt">.</span><span class="hl kwa">use</span> <span class="hl opt">===</span> <span class="hl kwa">null</span><span class="hl opt">);</span>
  state<span class="hl opt">.</span>contains <span class="hl opt">=</span> item<span class="hl opt">;</span>

  <span class="hl kwa">return this</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl slc">//</span>
<span class="hl slc">// Decoding</span>
<span class="hl slc">//</span>

Node<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_decode <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">decode</span><span class="hl opt">(</span>input<span class="hl opt">) {</span>
  <span class="hl kwa">var</span> state <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_baseState<span class="hl opt">;</span>

  <span class="hl slc">// Decode root node</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>state<span class="hl opt">.</span>parent <span class="hl opt">===</span> <span class="hl kwa">null</span><span class="hl opt">)</span>
    <span class="hl kwa">return</span> input<span class="hl opt">.</span><span class="hl kwd">wrapResult</span><span class="hl opt">(</span>state<span class="hl opt">.</span>children<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">].</span><span class="hl kwd">_decode</span><span class="hl opt">(</span>input<span class="hl opt">));</span>

  <span class="hl kwa">var</span> result <span class="hl opt">=</span> state<span class="hl opt">[</span><span class="hl str">'default'</span><span class="hl opt">];</span>
  <span class="hl kwa">var</span> present <span class="hl opt">=</span> <span class="hl kwa">true</span><span class="hl opt">;</span>

  <span class="hl kwa">var</span> prevKey<span class="hl opt">;</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>state<span class="hl opt">.</span>key <span class="hl opt">!==</span> <span class="hl kwa">null</span><span class="hl opt">)</span>
    prevKey <span class="hl opt">=</span> input<span class="hl opt">.</span><span class="hl kwd">enterKey</span><span class="hl opt">(</span>state<span class="hl opt">.</span>key<span class="hl opt">);</span>

  <span class="hl slc">// Check if tag is there</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>state<span class="hl opt">.</span>optional<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> tag <span class="hl opt">=</span> <span class="hl kwa">null</span><span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>state<span class="hl opt">.</span>explicit <span class="hl opt">!==</span> <span class="hl kwa">null</span><span class="hl opt">)</span>
      tag <span class="hl opt">=</span> state<span class="hl opt">.</span>explicit<span class="hl opt">;</span>
    <span class="hl kwa">else if</span> <span class="hl opt">(</span>state<span class="hl opt">.</span>implicit <span class="hl opt">!==</span> <span class="hl kwa">null</span><span class="hl opt">)</span>
      tag <span class="hl opt">=</span> state<span class="hl opt">.</span>implicit<span class="hl opt">;</span>
    <span class="hl kwa">else if</span> <span class="hl opt">(</span>state<span class="hl opt">.</span>tag <span class="hl opt">!==</span> <span class="hl kwa">null</span><span class="hl opt">)</span>
      tag <span class="hl opt">=</span> state<span class="hl opt">.</span>tag<span class="hl opt">;</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>tag <span class="hl opt">===</span> <span class="hl kwa">null</span> <span class="hl opt">&amp;&amp; !</span>state<span class="hl opt">.</span>any<span class="hl opt">) {</span>
      <span class="hl slc">// Trial and Error</span>
      <span class="hl kwa">var</span> save <span class="hl opt">=</span> input<span class="hl opt">.</span><span class="hl kwd">save</span><span class="hl opt">();</span>
      <span class="hl kwa">try</span> <span class="hl opt">{</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>state<span class="hl opt">.</span>choice <span class="hl opt">===</span> <span class="hl kwa">null</span><span class="hl opt">)</span>
          <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_decodeGeneric</span><span class="hl opt">(</span>state<span class="hl opt">.</span>tag<span class="hl opt">,</span> input<span class="hl opt">);</span>
        <span class="hl kwa">else</span>
          <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_decodeChoice</span><span class="hl opt">(</span>input<span class="hl opt">);</span>
        present <span class="hl opt">=</span> <span class="hl kwa">true</span><span class="hl opt">;</span>
      <span class="hl opt">}</span> <span class="hl kwa">catch</span> <span class="hl opt">(</span>e<span class="hl opt">) {</span>
        present <span class="hl opt">=</span> <span class="hl kwa">false</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>
      input<span class="hl opt">.</span><span class="hl kwd">restore</span><span class="hl opt">(</span>save<span class="hl opt">);</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
      present <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_peekTag</span><span class="hl opt">(</span>input<span class="hl opt">,</span> tag<span class="hl opt">,</span> state<span class="hl opt">.</span>any<span class="hl opt">);</span>

      <span class="hl kwa">if</span> <span class="hl opt">(</span>input<span class="hl opt">.</span><span class="hl kwd">isError</span><span class="hl opt">(</span>present<span class="hl opt">))</span>
        <span class="hl kwa">return</span> present<span class="hl opt">;</span>
    <span class="hl opt">}</span>
  <span class="hl opt">}</span>

  <span class="hl slc">// Push object on stack</span>
  <span class="hl kwa">var</span> prevObj<span class="hl opt">;</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>state<span class="hl opt">.</span>obj <span class="hl opt">&amp;&amp;</span> present<span class="hl opt">)</span>
    prevObj <span class="hl opt">=</span> input<span class="hl opt">.</span><span class="hl kwd">enterObject</span><span class="hl opt">();</span>

  <span class="hl kwa">if</span> <span class="hl opt">(</span>present<span class="hl opt">) {</span>
    <span class="hl slc">// Unwrap explicit values</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>state<span class="hl opt">.</span>explicit <span class="hl opt">!==</span> <span class="hl kwa">null</span><span class="hl opt">) {</span>
      <span class="hl kwa">var</span> explicit <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_decodeTag</span><span class="hl opt">(</span>input<span class="hl opt">,</span> state<span class="hl opt">.</span>explicit<span class="hl opt">);</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>input<span class="hl opt">.</span><span class="hl kwd">isError</span><span class="hl opt">(</span>explicit<span class="hl opt">))</span>
        <span class="hl kwa">return</span> explicit<span class="hl opt">;</span>
      input <span class="hl opt">=</span> explicit<span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl slc">// Unwrap implicit and normal values</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>state<span class="hl opt">.</span><span class="hl kwa">use</span> <span class="hl opt">===</span> <span class="hl kwa">null</span> <span class="hl opt">&amp;&amp;</span> state<span class="hl opt">.</span>choice <span class="hl opt">===</span> <span class="hl kwa">null</span><span class="hl opt">) {</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>state<span class="hl opt">.</span>any<span class="hl opt">)</span>
        <span class="hl kwa">var</span> save <span class="hl opt">=</span> input<span class="hl opt">.</span><span class="hl kwd">save</span><span class="hl opt">();</span>
      <span class="hl kwa">var</span> body <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_decodeTag</span><span class="hl opt">(</span>
        input<span class="hl opt">,</span>
        state<span class="hl opt">.</span>implicit <span class="hl opt">!==</span> <span class="hl kwa">null</span> <span class="hl opt">?</span> state<span class="hl opt">.</span>implicit <span class="hl opt">:</span> state<span class="hl opt">.</span>tag<span class="hl opt">,</span>
        state<span class="hl opt">.</span>any
      <span class="hl opt">);</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>input<span class="hl opt">.</span><span class="hl kwd">isError</span><span class="hl opt">(</span>body<span class="hl opt">))</span>
        <span class="hl kwa">return</span> body<span class="hl opt">;</span>

      <span class="hl kwa">if</span> <span class="hl opt">(</span>state<span class="hl opt">.</span>any<span class="hl opt">)</span>
        result <span class="hl opt">=</span> input<span class="hl opt">.</span><span class="hl kwd">raw</span><span class="hl opt">(</span>save<span class="hl opt">);</span>
      <span class="hl kwa">else</span>
        input <span class="hl opt">=</span> body<span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl slc">// Select proper method for tag</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>state<span class="hl opt">.</span>any<span class="hl opt">)</span>
      result <span class="hl opt">=</span> result<span class="hl opt">;</span>
    <span class="hl kwa">else if</span> <span class="hl opt">(</span>state<span class="hl opt">.</span>choice <span class="hl opt">===</span> <span class="hl kwa">null</span><span class="hl opt">)</span>
      result <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_decodeGeneric</span><span class="hl opt">(</span>state<span class="hl opt">.</span>tag<span class="hl opt">,</span> input<span class="hl opt">);</span>
    <span class="hl kwa">else</span>
      result <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_decodeChoice</span><span class="hl opt">(</span>input<span class="hl opt">);</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>input<span class="hl opt">.</span><span class="hl kwd">isError</span><span class="hl opt">(</span>result<span class="hl opt">))</span>
      <span class="hl kwa">return</span> result<span class="hl opt">;</span>

    <span class="hl slc">// Decode children</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!</span>state<span class="hl opt">.</span>any <span class="hl opt">&amp;&amp;</span> state<span class="hl opt">.</span>choice <span class="hl opt">===</span> <span class="hl kwa">null</span> <span class="hl opt">&amp;&amp;</span> state<span class="hl opt">.</span>children <span class="hl opt">!==</span> <span class="hl kwa">null</span><span class="hl opt">) {</span>
      state<span class="hl opt">.</span>children<span class="hl opt">.</span><span class="hl kwd">forEach</span><span class="hl opt">(</span><span class="hl kwa">function</span> <span class="hl kwd">decodeChildren</span><span class="hl opt">(</span>child<span class="hl opt">) {</span>
        <span class="hl slc">// NOTE: We are ignoring errors here, to let parser continue with other</span>
        <span class="hl slc">// parts of encoded data</span>
        child<span class="hl opt">.</span><span class="hl kwd">_decode</span><span class="hl opt">(</span>input<span class="hl opt">);</span>
      <span class="hl opt">});</span>
    <span class="hl opt">}</span>

    <span class="hl slc">// Decode contained/encoded by schema, only in bit or octet strings</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>state<span class="hl opt">.</span>contains <span class="hl opt">&amp;&amp; (</span>state<span class="hl opt">.</span>tag <span class="hl opt">===</span> <span class="hl str">'octstr'</span> <span class="hl opt">||</span> state<span class="hl opt">.</span>tag <span class="hl opt">===</span> <span class="hl str">'bitstr'</span><span class="hl opt">)) {</span>
      <span class="hl kwa">var</span> data <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">DecoderBuffer</span><span class="hl opt">(</span>result<span class="hl opt">);</span>
      result <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_getUse</span><span class="hl opt">(</span>state<span class="hl opt">.</span>contains<span class="hl opt">,</span> input<span class="hl opt">.</span>_reporterState<span class="hl opt">.</span>obj<span class="hl opt">).</span><span class="hl kwd">_decode</span><span class="hl opt">(</span>data<span class="hl opt">);</span>
    <span class="hl opt">}</span>
  <span class="hl opt">}</span>

  <span class="hl slc">// Pop object</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>state<span class="hl opt">.</span>obj <span class="hl opt">&amp;&amp;</span> present<span class="hl opt">)</span>
    result <span class="hl opt">=</span> input<span class="hl opt">.</span><span class="hl kwd">leaveObject</span><span class="hl opt">(</span>prevObj<span class="hl opt">);</span>

  <span class="hl slc">// Set key</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>state<span class="hl opt">.</span>key <span class="hl opt">!==</span> <span class="hl kwa">null</span> <span class="hl opt">&amp;&amp; (</span>result <span class="hl opt">!==</span> <span class="hl kwa">null</span> <span class="hl opt">||</span> present <span class="hl opt">===</span> <span class="hl kwa">true</span><span class="hl opt">))</span>
    input<span class="hl opt">.</span><span class="hl kwd">leaveKey</span><span class="hl opt">(</span>prevKey<span class="hl opt">,</span> state<span class="hl opt">.</span>key<span class="hl opt">,</span> result<span class="hl opt">);</span>

  <span class="hl kwa">return</span> result<span class="hl opt">;</span>
<span class="hl opt">};</span>

Node<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_decodeGeneric <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">decodeGeneric</span><span class="hl opt">(</span>tag<span class="hl opt">,</span> input<span class="hl opt">) {</span>
  <span class="hl kwa">var</span> state <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_baseState<span class="hl opt">;</span>

  <span class="hl kwa">if</span> <span class="hl opt">(</span>tag <span class="hl opt">===</span> <span class="hl str">'seq'</span> <span class="hl opt">||</span> tag <span class="hl opt">===</span> <span class="hl str">'set'</span><span class="hl opt">)</span>
    <span class="hl kwa">return null</span><span class="hl opt">;</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>tag <span class="hl opt">===</span> <span class="hl str">'seqof'</span> <span class="hl opt">||</span> tag <span class="hl opt">===</span> <span class="hl str">'setof'</span><span class="hl opt">)</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_decodeList</span><span class="hl opt">(</span>input<span class="hl opt">,</span> tag<span class="hl opt">,</span> state<span class="hl opt">.</span>args<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]);</span>
  <span class="hl kwa">else if</span> <span class="hl opt">(</span><span class="hl kwc">/str$/</span><span class="hl opt">.</span><span class="hl kwd">test</span><span class="hl opt">(</span>tag<span class="hl opt">))</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_decodeStr</span><span class="hl opt">(</span>input<span class="hl opt">,</span> tag<span class="hl opt">);</span>
  <span class="hl kwa">else if</span> <span class="hl opt">(</span>tag <span class="hl opt">===</span> <span class="hl str">'objid'</span> <span class="hl opt">&amp;&amp;</span> state<span class="hl opt">.</span>args<span class="hl opt">)</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_decodeObjid</span><span class="hl opt">(</span>input<span class="hl opt">,</span> state<span class="hl opt">.</span>args<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">],</span> state<span class="hl opt">.</span>args<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]);</span>
  <span class="hl kwa">else if</span> <span class="hl opt">(</span>tag <span class="hl opt">===</span> <span class="hl str">'objid'</span><span class="hl opt">)</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_decodeObjid</span><span class="hl opt">(</span>input<span class="hl opt">,</span> <span class="hl kwa">null</span><span class="hl opt">,</span> <span class="hl kwa">null</span><span class="hl opt">);</span>
  <span class="hl kwa">else if</span> <span class="hl opt">(</span>tag <span class="hl opt">===</span> <span class="hl str">'gentime'</span> <span class="hl opt">||</span> tag <span class="hl opt">===</span> <span class="hl str">'utctime'</span><span class="hl opt">)</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_decodeTime</span><span class="hl opt">(</span>input<span class="hl opt">,</span> tag<span class="hl opt">);</span>
  <span class="hl kwa">else if</span> <span class="hl opt">(</span>tag <span class="hl opt">===</span> <span class="hl str">'null_'</span><span class="hl opt">)</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_decodeNull</span><span class="hl opt">(</span>input<span class="hl opt">);</span>
  <span class="hl kwa">else if</span> <span class="hl opt">(</span>tag <span class="hl opt">===</span> <span class="hl str">'bool'</span><span class="hl opt">)</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_decodeBool</span><span class="hl opt">(</span>input<span class="hl opt">);</span>
  <span class="hl kwa">else if</span> <span class="hl opt">(</span>tag <span class="hl opt">===</span> <span class="hl str">'int'</span> <span class="hl opt">||</span> tag <span class="hl opt">===</span> <span class="hl str">'enum'</span><span class="hl opt">)</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_decodeInt</span><span class="hl opt">(</span>input<span class="hl opt">,</span> state<span class="hl opt">.</span>args <span class="hl opt">&amp;&amp;</span> state<span class="hl opt">.</span>args<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]);</span>
  <span class="hl kwa">else if</span> <span class="hl opt">(</span>state<span class="hl opt">.</span><span class="hl kwa">use</span> <span class="hl opt">!==</span> <span class="hl kwa">null</span><span class="hl opt">)</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_getUse</span><span class="hl opt">(</span>state<span class="hl opt">.</span><span class="hl kwa">use</span><span class="hl opt">,</span> input<span class="hl opt">.</span>_reporterState<span class="hl opt">.</span>obj<span class="hl opt">).</span><span class="hl kwd">_decode</span><span class="hl opt">(</span>input<span class="hl opt">);</span>
  <span class="hl kwa">else</span>
    <span class="hl kwa">return</span> input<span class="hl opt">.</span><span class="hl kwd">error</span><span class="hl opt">(</span><span class="hl str">'unknown tag: '</span> <span class="hl opt">+</span> tag<span class="hl opt">);</span>

  <span class="hl kwa">return null</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

Node<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_getUse <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">_getUse</span><span class="hl opt">(</span>entity<span class="hl opt">,</span> obj<span class="hl opt">) {</span>

  <span class="hl kwa">var</span> state <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_baseState<span class="hl opt">;</span>
  <span class="hl slc">// Create altered use decoder if implicit is set</span>
  state<span class="hl opt">.</span>useDecoder <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_use</span><span class="hl opt">(</span>entity<span class="hl opt">,</span> obj<span class="hl opt">);</span>
  <span class="hl kwd">assert</span><span class="hl opt">(</span>state<span class="hl opt">.</span>useDecoder<span class="hl opt">.</span>_baseState<span class="hl opt">.</span>parent <span class="hl opt">===</span> <span class="hl kwa">null</span><span class="hl opt">);</span>
  state<span class="hl opt">.</span>useDecoder <span class="hl opt">=</span> state<span class="hl opt">.</span>useDecoder<span class="hl opt">.</span>_baseState<span class="hl opt">.</span>children<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">];</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>state<span class="hl opt">.</span>implicit <span class="hl opt">!==</span> state<span class="hl opt">.</span>useDecoder<span class="hl opt">.</span>_baseState<span class="hl opt">.</span>implicit<span class="hl opt">) {</span>
    state<span class="hl opt">.</span>useDecoder <span class="hl opt">=</span> state<span class="hl opt">.</span>useDecoder<span class="hl opt">.</span><span class="hl kwd">clone</span><span class="hl opt">();</span>
    state<span class="hl opt">.</span>useDecoder<span class="hl opt">.</span>_baseState<span class="hl opt">.</span>implicit <span class="hl opt">=</span> state<span class="hl opt">.</span>implicit<span class="hl opt">;</span>
  <span class="hl opt">}</span>
  <span class="hl kwa">return</span> state<span class="hl opt">.</span>useDecoder<span class="hl opt">;</span>
<span class="hl opt">};</span>

Node<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_decodeChoice <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">decodeChoice</span><span class="hl opt">(</span>input<span class="hl opt">) {</span>
  <span class="hl kwa">var</span> state <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_baseState<span class="hl opt">;</span>
  <span class="hl kwa">var</span> result <span class="hl opt">=</span> <span class="hl kwa">null</span><span class="hl opt">;</span>
  <span class="hl kwa">var</span> match <span class="hl opt">=</span> <span class="hl kwa">false</span><span class="hl opt">;</span>

  Object<span class="hl opt">.</span><span class="hl kwd">keys</span><span class="hl opt">(</span>state<span class="hl opt">.</span>choice<span class="hl opt">).</span><span class="hl kwd">some</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">(</span>key<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> save <span class="hl opt">=</span> input<span class="hl opt">.</span><span class="hl kwd">save</span><span class="hl opt">();</span>
    <span class="hl kwa">var</span> node <span class="hl opt">=</span> state<span class="hl opt">.</span>choice<span class="hl opt">[</span>key<span class="hl opt">];</span>
    <span class="hl kwa">try</span> <span class="hl opt">{</span>
      <span class="hl kwa">var</span> value <span class="hl opt">=</span> node<span class="hl opt">.</span><span class="hl kwd">_decode</span><span class="hl opt">(</span>input<span class="hl opt">);</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>input<span class="hl opt">.</span><span class="hl kwd">isError</span><span class="hl opt">(</span>value<span class="hl opt">))</span>
        <span class="hl kwa">return false</span><span class="hl opt">;</span>

      result <span class="hl opt">= {</span> type<span class="hl opt">:</span> key<span class="hl opt">,</span> value<span class="hl opt">:</span> value <span class="hl opt">};</span>
      match <span class="hl opt">=</span> <span class="hl kwa">true</span><span class="hl opt">;</span>
    <span class="hl opt">}</span> <span class="hl kwa">catch</span> <span class="hl opt">(</span>e<span class="hl opt">) {</span>
      input<span class="hl opt">.</span><span class="hl kwd">restore</span><span class="hl opt">(</span>save<span class="hl opt">);</span>
      <span class="hl kwa">return false</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return true</span><span class="hl opt">;</span>
  <span class="hl opt">},</span> <span class="hl kwa">this</span><span class="hl opt">);</span>

  <span class="hl kwa">if</span> <span class="hl opt">(!</span>match<span class="hl opt">)</span>
    <span class="hl kwa">return</span> input<span class="hl opt">.</span><span class="hl kwd">error</span><span class="hl opt">(</span><span class="hl str">'Choice not matched'</span><span class="hl opt">);</span>

  <span class="hl kwa">return</span> result<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl slc">//</span>
<span class="hl slc">// Encoding</span>
<span class="hl slc">//</span>

Node<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_createEncoderBuffer <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">createEncoderBuffer</span><span class="hl opt">(</span>data<span class="hl opt">) {</span>
  <span class="hl kwa">return new</span> <span class="hl kwd">EncoderBuffer</span><span class="hl opt">(</span>data<span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">.</span>reporter<span class="hl opt">);</span>
<span class="hl opt">};</span>

Node<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_encode <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">encode</span><span class="hl opt">(</span>data<span class="hl opt">,</span> reporter<span class="hl opt">,</span> parent<span class="hl opt">) {</span>
  <span class="hl kwa">var</span> state <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_baseState<span class="hl opt">;</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>state<span class="hl opt">[</span><span class="hl str">'default'</span><span class="hl opt">] !==</span> <span class="hl kwa">null</span> <span class="hl opt">&amp;&amp;</span> state<span class="hl opt">[</span><span class="hl str">'default'</span><span class="hl opt">] ===</span> data<span class="hl opt">)</span>
    <span class="hl kwa">return</span><span class="hl opt">;</span>

  <span class="hl kwa">var</span> result <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_encodeValue</span><span class="hl opt">(</span>data<span class="hl opt">,</span> reporter<span class="hl opt">,</span> parent<span class="hl opt">);</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>result <span class="hl opt">===</span> undefined<span class="hl opt">)</span>
    <span class="hl kwa">return</span><span class="hl opt">;</span>

  <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_skipDefault</span><span class="hl opt">(</span>result<span class="hl opt">,</span> reporter<span class="hl opt">,</span> parent<span class="hl opt">))</span>
    <span class="hl kwa">return</span><span class="hl opt">;</span>

  <span class="hl kwa">return</span> result<span class="hl opt">;</span>
<span class="hl opt">};</span>

Node<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_encodeValue <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">encode</span><span class="hl opt">(</span>data<span class="hl opt">,</span> reporter<span class="hl opt">,</span> parent<span class="hl opt">) {</span>
  <span class="hl kwa">var</span> state <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_baseState<span class="hl opt">;</span>

  <span class="hl slc">// Decode root node</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>state<span class="hl opt">.</span>parent <span class="hl opt">===</span> <span class="hl kwa">null</span><span class="hl opt">)</span>
    <span class="hl kwa">return</span> state<span class="hl opt">.</span>children<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">].</span><span class="hl kwd">_encode</span><span class="hl opt">(</span>data<span class="hl opt">,</span> reporter <span class="hl opt">||</span> <span class="hl kwa">new</span> <span class="hl kwd">Reporter</span><span class="hl opt">());</span>

  <span class="hl kwa">var</span> result <span class="hl opt">=</span> <span class="hl kwa">null</span><span class="hl opt">;</span>
  <span class="hl kwa">var</span> present <span class="hl opt">=</span> <span class="hl kwa">true</span><span class="hl opt">;</span>

  <span class="hl slc">// Set reporter to share it with a child class</span>
  <span class="hl kwa">this</span><span class="hl opt">.</span>reporter <span class="hl opt">=</span> reporter<span class="hl opt">;</span>

  <span class="hl slc">// Check if data is there</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>state<span class="hl opt">.</span>optional <span class="hl opt">&amp;&amp;</span> data <span class="hl opt">===</span> undefined<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>state<span class="hl opt">[</span><span class="hl str">'default'</span><span class="hl opt">] !==</span> <span class="hl kwa">null</span><span class="hl opt">)</span>
      data <span class="hl opt">=</span> state<span class="hl opt">[</span><span class="hl str">'default'</span><span class="hl opt">]</span>
    <span class="hl kwa">else</span>
      <span class="hl kwa">return</span><span class="hl opt">;</span>
  <span class="hl opt">}</span>

  <span class="hl slc">// For error reporting</span>
  <span class="hl kwa">var</span> prevKey<span class="hl opt">;</span>

  <span class="hl slc">// Encode children first</span>
  <span class="hl kwa">var</span> content <span class="hl opt">=</span> <span class="hl kwa">null</span><span class="hl opt">;</span>
  <span class="hl kwa">var</span> primitive <span class="hl opt">=</span> <span class="hl kwa">false</span><span class="hl opt">;</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>state<span class="hl opt">.</span>any<span class="hl opt">) {</span>
    <span class="hl slc">// Anything that was given is translated to buffer</span>
    result <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_createEncoderBuffer</span><span class="hl opt">(</span>data<span class="hl opt">);</span>
  <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>state<span class="hl opt">.</span>choice<span class="hl opt">) {</span>
    result <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_encodeChoice</span><span class="hl opt">(</span>data<span class="hl opt">,</span> reporter<span class="hl opt">);</span>
  <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>state<span class="hl opt">.</span>contains<span class="hl opt">) {</span>
    content <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_getUse</span><span class="hl opt">(</span>state<span class="hl opt">.</span>contains<span class="hl opt">,</span> parent<span class="hl opt">).</span><span class="hl kwd">_encode</span><span class="hl opt">(</span>data<span class="hl opt">,</span> reporter<span class="hl opt">);</span>
    primitive <span class="hl opt">=</span> <span class="hl kwa">true</span><span class="hl opt">;</span>
  <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>state<span class="hl opt">.</span>children<span class="hl opt">) {</span>
    content <span class="hl opt">=</span> state<span class="hl opt">.</span>children<span class="hl opt">.</span><span class="hl kwd">map</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">(</span>child<span class="hl opt">) {</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>child<span class="hl opt">.</span>_baseState<span class="hl opt">.</span>tag <span class="hl opt">===</span> <span class="hl str">'null_'</span><span class="hl opt">)</span>
        <span class="hl kwa">return</span> child<span class="hl opt">.</span><span class="hl kwd">_encode</span><span class="hl opt">(</span><span class="hl kwa">null</span><span class="hl opt">,</span> reporter<span class="hl opt">,</span> data<span class="hl opt">);</span>

      <span class="hl kwa">if</span> <span class="hl opt">(</span>child<span class="hl opt">.</span>_baseState<span class="hl opt">.</span>key <span class="hl opt">===</span> <span class="hl kwa">null</span><span class="hl opt">)</span>
        <span class="hl kwa">return</span> reporter<span class="hl opt">.</span><span class="hl kwd">error</span><span class="hl opt">(</span><span class="hl str">'Child should have a key'</span><span class="hl opt">);</span>
      <span class="hl kwa">var</span> prevKey <span class="hl opt">=</span> reporter<span class="hl opt">.</span><span class="hl kwd">enterKey</span><span class="hl opt">(</span>child<span class="hl opt">.</span>_baseState<span class="hl opt">.</span>key<span class="hl opt">);</span>

      <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> data <span class="hl opt">!==</span> <span class="hl str">'object'</span><span class="hl opt">)</span>
        <span class="hl kwa">return</span> reporter<span class="hl opt">.</span><span class="hl kwd">error</span><span class="hl opt">(</span><span class="hl str">'Child expected, but input is not object'</span><span class="hl opt">);</span>

      <span class="hl kwa">var</span> res <span class="hl opt">=</span> child<span class="hl opt">.</span><span class="hl kwd">_encode</span><span class="hl opt">(</span>data<span class="hl opt">[</span>child<span class="hl opt">.</span>_baseState<span class="hl opt">.</span>key<span class="hl opt">],</span> reporter<span class="hl opt">,</span> data<span class="hl opt">);</span>
      reporter<span class="hl opt">.</span><span class="hl kwd">leaveKey</span><span class="hl opt">(</span>prevKey<span class="hl opt">);</span>

      <span class="hl kwa">return</span> res<span class="hl opt">;</span>
    <span class="hl opt">},</span> <span class="hl kwa">this</span><span class="hl opt">).</span><span class="hl kwd">filter</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">(</span>child<span class="hl opt">) {</span>
      <span class="hl kwa">return</span> child<span class="hl opt">;</span>
    <span class="hl opt">});</span>
    content <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_createEncoderBuffer</span><span class="hl opt">(</span>content<span class="hl opt">);</span>
  <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>state<span class="hl opt">.</span>tag <span class="hl opt">===</span> <span class="hl str">'seqof'</span> <span class="hl opt">||</span> state<span class="hl opt">.</span>tag <span class="hl opt">===</span> <span class="hl str">'setof'</span><span class="hl opt">) {</span>
      <span class="hl slc">// TODO(indutny): this should be thrown on DSL level</span>
      <span class="hl kwa">if</span> <span class="hl opt">(!(</span>state<span class="hl opt">.</span>args <span class="hl opt">&amp;&amp;</span> state<span class="hl opt">.</span>args<span class="hl opt">.</span>length <span class="hl opt">===</span> <span class="hl num">1</span><span class="hl opt">))</span>
        <span class="hl kwa">return</span> reporter<span class="hl opt">.</span><span class="hl kwd">error</span><span class="hl opt">(</span><span class="hl str">'Too many args for : '</span> <span class="hl opt">+</span> state<span class="hl opt">.</span>tag<span class="hl opt">);</span>

      <span class="hl kwa">if</span> <span class="hl opt">(!</span>Array<span class="hl opt">.</span><span class="hl kwd">isArray</span><span class="hl opt">(</span>data<span class="hl opt">))</span>
        <span class="hl kwa">return</span> reporter<span class="hl opt">.</span><span class="hl kwd">error</span><span class="hl opt">(</span><span class="hl str">'seqof/setof, but data is not Array'</span><span class="hl opt">);</span>

      <span class="hl kwa">var</span> child <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">clone</span><span class="hl opt">();</span>
      child<span class="hl opt">.</span>_baseState<span class="hl opt">.</span>implicit <span class="hl opt">=</span> <span class="hl kwa">null</span><span class="hl opt">;</span>
      content <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_createEncoderBuffer</span><span class="hl opt">(</span>data<span class="hl opt">.</span><span class="hl kwd">map</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">(</span>item<span class="hl opt">) {</span>
        <span class="hl kwa">var</span> state <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_baseState<span class="hl opt">;</span>

        <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_getUse</span><span class="hl opt">(</span>state<span class="hl opt">.</span>args<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">],</span> data<span class="hl opt">).</span><span class="hl kwd">_encode</span><span class="hl opt">(</span>item<span class="hl opt">,</span> reporter<span class="hl opt">);</span>
      <span class="hl opt">},</span> child<span class="hl opt">));</span>
    <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>state<span class="hl opt">.</span><span class="hl kwa">use</span> <span class="hl opt">!==</span> <span class="hl kwa">null</span><span class="hl opt">) {</span>
      result <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_getUse</span><span class="hl opt">(</span>state<span class="hl opt">.</span><span class="hl kwa">use</span><span class="hl opt">,</span> parent<span class="hl opt">).</span><span class="hl kwd">_encode</span><span class="hl opt">(</span>data<span class="hl opt">,</span> reporter<span class="hl opt">);</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
      content <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_encodePrimitive</span><span class="hl opt">(</span>state<span class="hl opt">.</span>tag<span class="hl opt">,</span> data<span class="hl opt">);</span>
      primitive <span class="hl opt">=</span> <span class="hl kwa">true</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
  <span class="hl opt">}</span>

  <span class="hl slc">// Encode data itself</span>
  <span class="hl kwa">var</span> result<span class="hl opt">;</span>
  <span class="hl kwa">if</span> <span class="hl opt">(!</span>state<span class="hl opt">.</span>any <span class="hl opt">&amp;&amp;</span> state<span class="hl opt">.</span>choice <span class="hl opt">===</span> <span class="hl kwa">null</span><span class="hl opt">) {</span>
    <span class="hl kwa">var</span> tag <span class="hl opt">=</span> state<span class="hl opt">.</span>implicit <span class="hl opt">!==</span> <span class="hl kwa">null</span> <span class="hl opt">?</span> state<span class="hl opt">.</span>implicit <span class="hl opt">:</span> state<span class="hl opt">.</span>tag<span class="hl opt">;</span>
    <span class="hl kwa">var</span> cls <span class="hl opt">=</span> state<span class="hl opt">.</span>implicit <span class="hl opt">===</span> <span class="hl kwa">null</span> <span class="hl opt">?</span> <span class="hl str">'universal'</span> <span class="hl opt">:</span> <span class="hl str">'context'</span><span class="hl opt">;</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>tag <span class="hl opt">===</span> <span class="hl kwa">null</span><span class="hl opt">) {</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>state<span class="hl opt">.</span><span class="hl kwa">use</span> <span class="hl opt">===</span> <span class="hl kwa">null</span><span class="hl opt">)</span>
        reporter<span class="hl opt">.</span><span class="hl kwd">error</span><span class="hl opt">(</span><span class="hl str">'Tag could be ommited only for .use()'</span><span class="hl opt">);</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>state<span class="hl opt">.</span><span class="hl kwa">use</span> <span class="hl opt">===</span> <span class="hl kwa">null</span><span class="hl opt">)</span>
        result <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_encodeComposite</span><span class="hl opt">(</span>tag<span class="hl opt">,</span> primitive<span class="hl opt">,</span> cls<span class="hl opt">,</span> content<span class="hl opt">);</span>
    <span class="hl opt">}</span>
  <span class="hl opt">}</span>

  <span class="hl slc">// Wrap in explicit</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>state<span class="hl opt">.</span>explicit <span class="hl opt">!==</span> <span class="hl kwa">null</span><span class="hl opt">)</span>
    result <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_encodeComposite</span><span class="hl opt">(</span>state<span class="hl opt">.</span>explicit<span class="hl opt">,</span> <span class="hl kwa">false</span><span class="hl opt">,</span> <span class="hl str">'context'</span><span class="hl opt">,</span> result<span class="hl opt">);</span>

  <span class="hl kwa">return</span> result<span class="hl opt">;</span>
<span class="hl opt">};</span>

Node<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_encodeChoice <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">encodeChoice</span><span class="hl opt">(</span>data<span class="hl opt">,</span> reporter<span class="hl opt">) {</span>
  <span class="hl kwa">var</span> state <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_baseState<span class="hl opt">;</span>

  <span class="hl kwa">var</span> node <span class="hl opt">=</span> state<span class="hl opt">.</span>choice<span class="hl opt">[</span>data<span class="hl opt">.</span>type<span class="hl opt">];</span>
  <span class="hl kwa">if</span> <span class="hl opt">(!</span>node<span class="hl opt">) {</span>
    <span class="hl kwd">assert</span><span class="hl opt">(</span>
        <span class="hl kwa">false</span><span class="hl opt">,</span>
        data<span class="hl opt">.</span>type <span class="hl opt">+</span> <span class="hl str">' not found in '</span> <span class="hl opt">+</span>
            JSON<span class="hl opt">.</span><span class="hl kwd">stringify</span><span class="hl opt">(</span>Object<span class="hl opt">.</span><span class="hl kwd">keys</span><span class="hl opt">(</span>state<span class="hl opt">.</span>choice<span class="hl opt">)));</span>
  <span class="hl opt">}</span>
  <span class="hl kwa">return</span> node<span class="hl opt">.</span><span class="hl kwd">_encode</span><span class="hl opt">(</span>data<span class="hl opt">.</span>value<span class="hl opt">,</span> reporter<span class="hl opt">);</span>
<span class="hl opt">};</span>

Node<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_encodePrimitive <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">encodePrimitive</span><span class="hl opt">(</span>tag<span class="hl opt">,</span> data<span class="hl opt">) {</span>
  <span class="hl kwa">var</span> state <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_baseState<span class="hl opt">;</span>

  <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwc">/str$/</span><span class="hl opt">.</span><span class="hl kwd">test</span><span class="hl opt">(</span>tag<span class="hl opt">))</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_encodeStr</span><span class="hl opt">(</span>data<span class="hl opt">,</span> tag<span class="hl opt">);</span>
  <span class="hl kwa">else if</span> <span class="hl opt">(</span>tag <span class="hl opt">===</span> <span class="hl str">'objid'</span> <span class="hl opt">&amp;&amp;</span> state<span class="hl opt">.</span>args<span class="hl opt">)</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_encodeObjid</span><span class="hl opt">(</span>data<span class="hl opt">,</span> state<span class="hl opt">.</span>reverseArgs<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">],</span> state<span class="hl opt">.</span>args<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]);</span>
  <span class="hl kwa">else if</span> <span class="hl opt">(</span>tag <span class="hl opt">===</span> <span class="hl str">'objid'</span><span class="hl opt">)</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_encodeObjid</span><span class="hl opt">(</span>data<span class="hl opt">,</span> <span class="hl kwa">null</span><span class="hl opt">,</span> <span class="hl kwa">null</span><span class="hl opt">);</span>
  <span class="hl kwa">else if</span> <span class="hl opt">(</span>tag <span class="hl opt">===</span> <span class="hl str">'gentime'</span> <span class="hl opt">||</span> tag <span class="hl opt">===</span> <span class="hl str">'utctime'</span><span class="hl opt">)</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_encodeTime</span><span class="hl opt">(</span>data<span class="hl opt">,</span> tag<span class="hl opt">);</span>
  <span class="hl kwa">else if</span> <span class="hl opt">(</span>tag <span class="hl opt">===</span> <span class="hl str">'null_'</span><span class="hl opt">)</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_encodeNull</span><span class="hl opt">();</span>
  <span class="hl kwa">else if</span> <span class="hl opt">(</span>tag <span class="hl opt">===</span> <span class="hl str">'int'</span> <span class="hl opt">||</span> tag <span class="hl opt">===</span> <span class="hl str">'enum'</span><span class="hl opt">)</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_encodeInt</span><span class="hl opt">(</span>data<span class="hl opt">,</span> state<span class="hl opt">.</span>args <span class="hl opt">&amp;&amp;</span> state<span class="hl opt">.</span>reverseArgs<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]);</span>
  <span class="hl kwa">else if</span> <span class="hl opt">(</span>tag <span class="hl opt">===</span> <span class="hl str">'bool'</span><span class="hl opt">)</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_encodeBool</span><span class="hl opt">(</span>data<span class="hl opt">);</span>
  <span class="hl kwa">else</span>
    <span class="hl kwa">throw new</span> <span class="hl kwd">Error</span><span class="hl opt">(</span><span class="hl str">'Unsupported tag: '</span> <span class="hl opt">+</span> tag<span class="hl opt">);</span>
<span class="hl opt">};</span>

Node<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_isNumstr <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">isNumstr</span><span class="hl opt">(</span>str<span class="hl opt">) {</span>
  <span class="hl kwa">return</span> <span class="hl kwc">/^[0-9 ]*$/</span><span class="hl opt">.</span><span class="hl kwd">test</span><span class="hl opt">(</span>str<span class="hl opt">);</span>
<span class="hl opt">};</span>

Node<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_isPrintstr <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">isPrintstr</span><span class="hl opt">(</span>str<span class="hl opt">) {</span>
  <span class="hl kwa">return</span> <span class="hl kwc">/^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/</span><span class="hl opt">.</span><span class="hl kwd">test</span><span class="hl opt">(</span>str<span class="hl opt">);</span>
<span class="hl opt">};</span>

<span class="hl opt">},{</span><span class="hl str">&quot;../base&quot;</span><span class="hl opt">:</span><span class="hl num">10</span><span class="hl opt">,</span><span class="hl str">&quot;minimalistic-assert&quot;</span><span class="hl opt">:</span><span class="hl num">153</span><span class="hl opt">}],</span><span class="hl num">12</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>require<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl kwa">var</span> inherits <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'inherits'</span><span class="hl opt">);</span>

<span class="hl kwa">function</span> <span class="hl kwd">Reporter</span><span class="hl opt">(</span>options<span class="hl opt">) {</span>
  <span class="hl kwa">this</span><span class="hl opt">.</span>_reporterState <span class="hl opt">= {</span>
    obj<span class="hl opt">:</span> <span class="hl kwa">null</span><span class="hl opt">,</span>
    path<span class="hl opt">: [],</span>
    options<span class="hl opt">:</span> options <span class="hl opt">|| {},</span>
    errors<span class="hl opt">: []</span>
  <span class="hl opt">};</span>
<span class="hl opt">}</span>
exports<span class="hl opt">.</span>Reporter <span class="hl opt">=</span> Reporter<span class="hl opt">;</span>

Reporter<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>isError <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">isError</span><span class="hl opt">(</span>obj<span class="hl opt">) {</span>
  <span class="hl kwa">return</span> obj <span class="hl kwa">instanceof</span> ReporterError<span class="hl opt">;</span>
<span class="hl opt">};</span>

Reporter<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>save <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">save</span><span class="hl opt">() {</span>
  <span class="hl kwa">var</span> state <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_reporterState<span class="hl opt">;</span>

  <span class="hl kwa">return</span> <span class="hl opt">{</span> obj<span class="hl opt">:</span> state<span class="hl opt">.</span>obj<span class="hl opt">,</span> pathLen<span class="hl opt">:</span> state<span class="hl opt">.</span>path<span class="hl opt">.</span>length <span class="hl opt">};</span>
<span class="hl opt">};</span>

Reporter<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>restore <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">restore</span><span class="hl opt">(</span>data<span class="hl opt">) {</span>
  <span class="hl kwa">var</span> state <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_reporterState<span class="hl opt">;</span>

  state<span class="hl opt">.</span>obj <span class="hl opt">=</span> data<span class="hl opt">.</span>obj<span class="hl opt">;</span>
  state<span class="hl opt">.</span>path <span class="hl opt">=</span> state<span class="hl opt">.</span>path<span class="hl opt">.</span><span class="hl kwd">slice</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> data<span class="hl opt">.</span>pathLen<span class="hl opt">);</span>
<span class="hl opt">};</span>

Reporter<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>enterKey <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">enterKey</span><span class="hl opt">(</span>key<span class="hl opt">) {</span>
  <span class="hl kwa">return this</span><span class="hl opt">.</span>_reporterState<span class="hl opt">.</span>path<span class="hl opt">.</span><span class="hl kwd">push</span><span class="hl opt">(</span>key<span class="hl opt">);</span>
<span class="hl opt">};</span>

Reporter<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>leaveKey <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">leaveKey</span><span class="hl opt">(</span>index<span class="hl opt">,</span> key<span class="hl opt">,</span> value<span class="hl opt">) {</span>
  <span class="hl kwa">var</span> state <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_reporterState<span class="hl opt">;</span>

  state<span class="hl opt">.</span>path <span class="hl opt">=</span> state<span class="hl opt">.</span>path<span class="hl opt">.</span><span class="hl kwd">slice</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> index <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">);</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>state<span class="hl opt">.</span>obj <span class="hl opt">!==</span> <span class="hl kwa">null</span><span class="hl opt">)</span>
    state<span class="hl opt">.</span>obj<span class="hl opt">[</span>key<span class="hl opt">] =</span> value<span class="hl opt">;</span>
<span class="hl opt">};</span>

Reporter<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>enterObject <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">enterObject</span><span class="hl opt">() {</span>
  <span class="hl kwa">var</span> state <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_reporterState<span class="hl opt">;</span>

  <span class="hl kwa">var</span> prev <span class="hl opt">=</span> state<span class="hl opt">.</span>obj<span class="hl opt">;</span>
  state<span class="hl opt">.</span>obj <span class="hl opt">= {};</span>
  <span class="hl kwa">return</span> prev<span class="hl opt">;</span>
<span class="hl opt">};</span>

Reporter<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>leaveObject <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">leaveObject</span><span class="hl opt">(</span>prev<span class="hl opt">) {</span>
  <span class="hl kwa">var</span> state <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_reporterState<span class="hl opt">;</span>

  <span class="hl kwa">var</span> now <span class="hl opt">=</span> state<span class="hl opt">.</span>obj<span class="hl opt">;</span>
  state<span class="hl opt">.</span>obj <span class="hl opt">=</span> prev<span class="hl opt">;</span>
  <span class="hl kwa">return</span> now<span class="hl opt">;</span>
<span class="hl opt">};</span>

Reporter<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>error <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">error</span><span class="hl opt">(</span>msg<span class="hl opt">) {</span>
  <span class="hl kwa">var</span> err<span class="hl opt">;</span>
  <span class="hl kwa">var</span> state <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_reporterState<span class="hl opt">;</span>

  <span class="hl kwa">var</span> inherited <span class="hl opt">=</span> msg <span class="hl kwa">instanceof</span> ReporterError<span class="hl opt">;</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>inherited<span class="hl opt">) {</span>
    err <span class="hl opt">=</span> msg<span class="hl opt">;</span>
  <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
    err <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">ReporterError</span><span class="hl opt">(</span>state<span class="hl opt">.</span>path<span class="hl opt">.</span><span class="hl kwd">map</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">(</span>elem<span class="hl opt">) {</span>
      <span class="hl kwa">return</span> <span class="hl str">'['</span> <span class="hl opt">+</span> JSON<span class="hl opt">.</span><span class="hl kwd">stringify</span><span class="hl opt">(</span>elem<span class="hl opt">) +</span> <span class="hl str">']'</span><span class="hl opt">;</span>
    <span class="hl opt">}).</span><span class="hl kwd">join</span><span class="hl opt">(</span><span class="hl str">''</span><span class="hl opt">),</span> msg<span class="hl opt">.</span>message <span class="hl opt">||</span> msg<span class="hl opt">,</span> msg<span class="hl opt">.</span>stack<span class="hl opt">);</span>
  <span class="hl opt">}</span>

  <span class="hl kwa">if</span> <span class="hl opt">(!</span>state<span class="hl opt">.</span>options<span class="hl opt">.</span>partial<span class="hl opt">)</span>
    <span class="hl kwa">throw</span> err<span class="hl opt">;</span>

  <span class="hl kwa">if</span> <span class="hl opt">(!</span>inherited<span class="hl opt">)</span>
    state<span class="hl opt">.</span>errors<span class="hl opt">.</span><span class="hl kwd">push</span><span class="hl opt">(</span>err<span class="hl opt">);</span>

  <span class="hl kwa">return</span> err<span class="hl opt">;</span>
<span class="hl opt">};</span>

Reporter<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>wrapResult <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">wrapResult</span><span class="hl opt">(</span>result<span class="hl opt">) {</span>
  <span class="hl kwa">var</span> state <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_reporterState<span class="hl opt">;</span>
  <span class="hl kwa">if</span> <span class="hl opt">(!</span>state<span class="hl opt">.</span>options<span class="hl opt">.</span>partial<span class="hl opt">)</span>
    <span class="hl kwa">return</span> result<span class="hl opt">;</span>

  <span class="hl kwa">return</span> <span class="hl opt">{</span>
    result<span class="hl opt">:</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">isError</span><span class="hl opt">(</span>result<span class="hl opt">) ?</span> <span class="hl kwa">null</span> <span class="hl opt">:</span> result<span class="hl opt">,</span>
    errors<span class="hl opt">:</span> state<span class="hl opt">.</span>errors
  <span class="hl opt">};</span>
<span class="hl opt">};</span>

<span class="hl kwa">function</span> <span class="hl kwd">ReporterError</span><span class="hl opt">(</span>path<span class="hl opt">,</span> msg<span class="hl opt">) {</span>
  <span class="hl kwa">this</span><span class="hl opt">.</span>path <span class="hl opt">=</span> path<span class="hl opt">;</span>
  <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">rethrow</span><span class="hl opt">(</span>msg<span class="hl opt">);</span>
<span class="hl opt">};</span>
<span class="hl kwd">inherits</span><span class="hl opt">(</span>ReporterError<span class="hl opt">,</span> Error<span class="hl opt">);</span>

ReporterError<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>rethrow <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">rethrow</span><span class="hl opt">(</span>msg<span class="hl opt">) {</span>
  <span class="hl kwa">this</span><span class="hl opt">.</span>message <span class="hl opt">=</span> msg <span class="hl opt">+</span> <span class="hl str">' at: '</span> <span class="hl opt">+ (</span><span class="hl kwa">this</span><span class="hl opt">.</span>path <span class="hl opt">||</span> <span class="hl str">'(shallow)'</span><span class="hl opt">);</span>
  Error<span class="hl opt">.</span><span class="hl kwd">captureStackTrace</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> ReporterError<span class="hl opt">);</span>

  <span class="hl kwa">return this</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl opt">},{</span><span class="hl str">&quot;inherits&quot;</span><span class="hl opt">:</span><span class="hl num">144</span><span class="hl opt">}],</span><span class="hl num">13</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>require<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl kwa">var</span> constants <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'../constants'</span><span class="hl opt">);</span>

exports<span class="hl opt">.</span>tagClass <span class="hl opt">= {</span>
  <span class="hl num">0</span><span class="hl opt">:</span> <span class="hl str">'universal'</span><span class="hl opt">,</span>
  <span class="hl num">1</span><span class="hl opt">:</span> <span class="hl str">'application'</span><span class="hl opt">,</span>
  <span class="hl num">2</span><span class="hl opt">:</span> <span class="hl str">'context'</span><span class="hl opt">,</span>
  <span class="hl num">3</span><span class="hl opt">:</span> <span class="hl str">'private'</span>
<span class="hl opt">};</span>
exports<span class="hl opt">.</span>tagClassByName <span class="hl opt">=</span> constants<span class="hl opt">.</span><span class="hl kwd">_reverse</span><span class="hl opt">(</span>exports<span class="hl opt">.</span>tagClass<span class="hl opt">);</span>

exports<span class="hl opt">.</span>tag <span class="hl opt">= {</span>
  <span class="hl num">0x00</span><span class="hl opt">:</span> <span class="hl str">'end'</span><span class="hl opt">,</span>
  <span class="hl num">0x01</span><span class="hl opt">:</span> <span class="hl str">'bool'</span><span class="hl opt">,</span>
  <span class="hl num">0x02</span><span class="hl opt">:</span> <span class="hl str">'int'</span><span class="hl opt">,</span>
  <span class="hl num">0x03</span><span class="hl opt">:</span> <span class="hl str">'bitstr'</span><span class="hl opt">,</span>
  <span class="hl num">0x04</span><span class="hl opt">:</span> <span class="hl str">'octstr'</span><span class="hl opt">,</span>
  <span class="hl num">0x05</span><span class="hl opt">:</span> <span class="hl str">'null_'</span><span class="hl opt">,</span>
  <span class="hl num">0x06</span><span class="hl opt">:</span> <span class="hl str">'objid'</span><span class="hl opt">,</span>
  <span class="hl num">0x07</span><span class="hl opt">:</span> <span class="hl str">'objDesc'</span><span class="hl opt">,</span>
  <span class="hl num">0x08</span><span class="hl opt">:</span> <span class="hl str">'external'</span><span class="hl opt">,</span>
  <span class="hl num">0x09</span><span class="hl opt">:</span> <span class="hl str">'real'</span><span class="hl opt">,</span>
  <span class="hl num">0x0a</span><span class="hl opt">:</span> <span class="hl str">'enum'</span><span class="hl opt">,</span>
  <span class="hl num">0x0b</span><span class="hl opt">:</span> <span class="hl str">'embed'</span><span class="hl opt">,</span>
  <span class="hl num">0x0c</span><span class="hl opt">:</span> <span class="hl str">'utf8str'</span><span class="hl opt">,</span>
  <span class="hl num">0x0d</span><span class="hl opt">:</span> <span class="hl str">'relativeOid'</span><span class="hl opt">,</span>
  <span class="hl num">0x10</span><span class="hl opt">:</span> <span class="hl str">'seq'</span><span class="hl opt">,</span>
  <span class="hl num">0x11</span><span class="hl opt">:</span> <span class="hl str">'set'</span><span class="hl opt">,</span>
  <span class="hl num">0x12</span><span class="hl opt">:</span> <span class="hl str">'numstr'</span><span class="hl opt">,</span>
  <span class="hl num">0x13</span><span class="hl opt">:</span> <span class="hl str">'printstr'</span><span class="hl opt">,</span>
  <span class="hl num">0x14</span><span class="hl opt">:</span> <span class="hl str">'t61str'</span><span class="hl opt">,</span>
  <span class="hl num">0x15</span><span class="hl opt">:</span> <span class="hl str">'videostr'</span><span class="hl opt">,</span>
  <span class="hl num">0x16</span><span class="hl opt">:</span> <span class="hl str">'ia5str'</span><span class="hl opt">,</span>
  <span class="hl num">0x17</span><span class="hl opt">:</span> <span class="hl str">'utctime'</span><span class="hl opt">,</span>
  <span class="hl num">0x18</span><span class="hl opt">:</span> <span class="hl str">'gentime'</span><span class="hl opt">,</span>
  <span class="hl num">0x19</span><span class="hl opt">:</span> <span class="hl str">'graphstr'</span><span class="hl opt">,</span>
  <span class="hl num">0x1a</span><span class="hl opt">:</span> <span class="hl str">'iso646str'</span><span class="hl opt">,</span>
  <span class="hl num">0x1b</span><span class="hl opt">:</span> <span class="hl str">'genstr'</span><span class="hl opt">,</span>
  <span class="hl num">0x1c</span><span class="hl opt">:</span> <span class="hl str">'unistr'</span><span class="hl opt">,</span>
  <span class="hl num">0x1d</span><span class="hl opt">:</span> <span class="hl str">'charstr'</span><span class="hl opt">,</span>
  <span class="hl num">0x1e</span><span class="hl opt">:</span> <span class="hl str">'bmpstr'</span>
<span class="hl opt">};</span>
exports<span class="hl opt">.</span>tagByName <span class="hl opt">=</span> constants<span class="hl opt">.</span><span class="hl kwd">_reverse</span><span class="hl opt">(</span>exports<span class="hl opt">.</span>tag<span class="hl opt">);</span>

<span class="hl opt">},{</span><span class="hl str">&quot;../constants&quot;</span><span class="hl opt">:</span><span class="hl num">14</span><span class="hl opt">}],</span><span class="hl num">14</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>require<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl kwa">var</span> constants <span class="hl opt">=</span> exports<span class="hl opt">;</span>

<span class="hl slc">// Helper</span>
constants<span class="hl opt">.</span>_reverse <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">reverse</span><span class="hl opt">(</span>map<span class="hl opt">) {</span>
  <span class="hl kwa">var</span> res <span class="hl opt">= {};</span>

  Object<span class="hl opt">.</span><span class="hl kwd">keys</span><span class="hl opt">(</span>map<span class="hl opt">).</span><span class="hl kwd">forEach</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">(</span>key<span class="hl opt">) {</span>
    <span class="hl slc">// Convert key to integer if it is stringified</span>
    <span class="hl kwa">if</span> <span class="hl opt">((</span>key <span class="hl opt">|</span> <span class="hl num">0</span><span class="hl opt">) ==</span> key<span class="hl opt">)</span>
      key <span class="hl opt">=</span> key <span class="hl opt">|</span> <span class="hl num">0</span><span class="hl opt">;</span>

    <span class="hl kwa">var</span> value <span class="hl opt">=</span> map<span class="hl opt">[</span>key<span class="hl opt">];</span>
    res<span class="hl opt">[</span>value<span class="hl opt">] =</span> key<span class="hl opt">;</span>
  <span class="hl opt">});</span>

  <span class="hl kwa">return</span> res<span class="hl opt">;</span>
<span class="hl opt">};</span>

constants<span class="hl opt">.</span>der <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'./der'</span><span class="hl opt">);</span>

<span class="hl opt">},{</span><span class="hl str">&quot;./der&quot;</span><span class="hl opt">:</span><span class="hl num">13</span><span class="hl opt">}],</span><span class="hl num">15</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>require<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl kwa">var</span> inherits <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'inherits'</span><span class="hl opt">);</span>

<span class="hl kwa">var</span> asn1 <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'../../asn1'</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> base <span class="hl opt">=</span> asn1<span class="hl opt">.</span>base<span class="hl opt">;</span>
<span class="hl kwa">var</span> bignum <span class="hl opt">=</span> asn1<span class="hl opt">.</span>bignum<span class="hl opt">;</span>

<span class="hl slc">// Import DER constants</span>
<span class="hl kwa">var</span> der <span class="hl opt">=</span> asn1<span class="hl opt">.</span>constants<span class="hl opt">.</span>der<span class="hl opt">;</span>

<span class="hl kwa">function</span> <span class="hl kwd">DERDecoder</span><span class="hl opt">(</span>entity<span class="hl opt">) {</span>
  <span class="hl kwa">this</span><span class="hl opt">.</span>enc <span class="hl opt">=</span> <span class="hl str">'der'</span><span class="hl opt">;</span>
  <span class="hl kwa">this</span><span class="hl opt">.</span>name <span class="hl opt">=</span> entity<span class="hl opt">.</span>name<span class="hl opt">;</span>
  <span class="hl kwa">this</span><span class="hl opt">.</span>entity <span class="hl opt">=</span> entity<span class="hl opt">;</span>

  <span class="hl slc">// Construct base tree</span>
  <span class="hl kwa">this</span><span class="hl opt">.</span>tree <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">DERNode</span><span class="hl opt">();</span>
  <span class="hl kwa">this</span><span class="hl opt">.</span>tree<span class="hl opt">.</span><span class="hl kwd">_init</span><span class="hl opt">(</span>entity<span class="hl opt">.</span>body<span class="hl opt">);</span>
<span class="hl opt">};</span>
module<span class="hl opt">.</span>exports <span class="hl opt">=</span> DERDecoder<span class="hl opt">;</span>

DERDecoder<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>decode <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">decode</span><span class="hl opt">(</span>data<span class="hl opt">,</span> options<span class="hl opt">) {</span>
  <span class="hl kwa">if</span> <span class="hl opt">(!(</span>data <span class="hl kwa">instanceof</span> base<span class="hl opt">.</span>DecoderBuffer<span class="hl opt">))</span>
    data <span class="hl opt">=</span> <span class="hl kwa">new</span> base<span class="hl opt">.</span><span class="hl kwd">DecoderBuffer</span><span class="hl opt">(</span>data<span class="hl opt">,</span> options<span class="hl opt">);</span>

  <span class="hl kwa">return this</span><span class="hl opt">.</span>tree<span class="hl opt">.</span><span class="hl kwd">_decode</span><span class="hl opt">(</span>data<span class="hl opt">,</span> options<span class="hl opt">);</span>
<span class="hl opt">};</span>

<span class="hl slc">// Tree methods</span>

<span class="hl kwa">function</span> <span class="hl kwd">DERNode</span><span class="hl opt">(</span>parent<span class="hl opt">) {</span>
  base<span class="hl opt">.</span>Node<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> <span class="hl str">'der'</span><span class="hl opt">,</span> parent<span class="hl opt">);</span>
<span class="hl opt">}</span>
<span class="hl kwd">inherits</span><span class="hl opt">(</span>DERNode<span class="hl opt">,</span> base<span class="hl opt">.</span>Node<span class="hl opt">);</span>

DERNode<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_peekTag <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">peekTag</span><span class="hl opt">(</span>buffer<span class="hl opt">,</span> tag<span class="hl opt">,</span> any<span class="hl opt">) {</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>buffer<span class="hl opt">.</span><span class="hl kwd">isEmpty</span><span class="hl opt">())</span>
    <span class="hl kwa">return false</span><span class="hl opt">;</span>

  <span class="hl kwa">var</span> state <span class="hl opt">=</span> buffer<span class="hl opt">.</span><span class="hl kwd">save</span><span class="hl opt">();</span>
  <span class="hl kwa">var</span> decodedTag <span class="hl opt">=</span> <span class="hl kwd">derDecodeTag</span><span class="hl opt">(</span>buffer<span class="hl opt">,</span> <span class="hl str">'Failed to peek tag: &quot;'</span> <span class="hl opt">+</span> tag <span class="hl opt">+</span> <span class="hl str">'&quot;'</span><span class="hl opt">);</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>buffer<span class="hl opt">.</span><span class="hl kwd">isError</span><span class="hl opt">(</span>decodedTag<span class="hl opt">))</span>
    <span class="hl kwa">return</span> decodedTag<span class="hl opt">;</span>

  buffer<span class="hl opt">.</span><span class="hl kwd">restore</span><span class="hl opt">(</span>state<span class="hl opt">);</span>

  <span class="hl kwa">return</span> decodedTag<span class="hl opt">.</span>tag <span class="hl opt">===</span> tag <span class="hl opt">||</span> decodedTag<span class="hl opt">.</span>tagStr <span class="hl opt">===</span> tag <span class="hl opt">||</span>
    <span class="hl opt">(</span>decodedTag<span class="hl opt">.</span>tagStr <span class="hl opt">+</span> <span class="hl str">'of'</span><span class="hl opt">) ===</span> tag <span class="hl opt">||</span> any<span class="hl opt">;</span>
<span class="hl opt">};</span>

DERNode<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_decodeTag <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">decodeTag</span><span class="hl opt">(</span>buffer<span class="hl opt">,</span> tag<span class="hl opt">,</span> any<span class="hl opt">) {</span>
  <span class="hl kwa">var</span> decodedTag <span class="hl opt">=</span> <span class="hl kwd">derDecodeTag</span><span class="hl opt">(</span>buffer<span class="hl opt">,</span>
                                <span class="hl str">'Failed to decode tag of &quot;'</span> <span class="hl opt">+</span> tag <span class="hl opt">+</span> <span class="hl str">'&quot;'</span><span class="hl opt">);</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>buffer<span class="hl opt">.</span><span class="hl kwd">isError</span><span class="hl opt">(</span>decodedTag<span class="hl opt">))</span>
    <span class="hl kwa">return</span> decodedTag<span class="hl opt">;</span>

  <span class="hl kwa">var</span> len <span class="hl opt">=</span> <span class="hl kwd">derDecodeLen</span><span class="hl opt">(</span>buffer<span class="hl opt">,</span>
                         decodedTag<span class="hl opt">.</span>primitive<span class="hl opt">,</span>
                         <span class="hl str">'Failed to get length of &quot;'</span> <span class="hl opt">+</span> tag <span class="hl opt">+</span> <span class="hl str">'&quot;'</span><span class="hl opt">);</span>

  <span class="hl slc">// Failure</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>buffer<span class="hl opt">.</span><span class="hl kwd">isError</span><span class="hl opt">(</span>len<span class="hl opt">))</span>
    <span class="hl kwa">return</span> len<span class="hl opt">;</span>

  <span class="hl kwa">if</span> <span class="hl opt">(!</span>any <span class="hl opt">&amp;&amp;</span>
      decodedTag<span class="hl opt">.</span>tag <span class="hl opt">!==</span> tag <span class="hl opt">&amp;&amp;</span>
      decodedTag<span class="hl opt">.</span>tagStr <span class="hl opt">!==</span> tag <span class="hl opt">&amp;&amp;</span>
      decodedTag<span class="hl opt">.</span>tagStr <span class="hl opt">+</span> <span class="hl str">'of'</span> <span class="hl opt">!==</span> tag<span class="hl opt">) {</span>
    <span class="hl kwa">return</span> buffer<span class="hl opt">.</span><span class="hl kwd">error</span><span class="hl opt">(</span><span class="hl str">'Failed to match tag: &quot;'</span> <span class="hl opt">+</span> tag <span class="hl opt">+</span> <span class="hl str">'&quot;'</span><span class="hl opt">);</span>
  <span class="hl opt">}</span>

  <span class="hl kwa">if</span> <span class="hl opt">(</span>decodedTag<span class="hl opt">.</span>primitive <span class="hl opt">||</span> len <span class="hl opt">!==</span> <span class="hl kwa">null</span><span class="hl opt">)</span>
    <span class="hl kwa">return</span> buffer<span class="hl opt">.</span><span class="hl kwd">skip</span><span class="hl opt">(</span>len<span class="hl opt">,</span> <span class="hl str">'Failed to match body of: &quot;'</span> <span class="hl opt">+</span> tag <span class="hl opt">+</span> <span class="hl str">'&quot;'</span><span class="hl opt">);</span>

  <span class="hl slc">// Indefinite length... find END tag</span>
  <span class="hl kwa">var</span> state <span class="hl opt">=</span> buffer<span class="hl opt">.</span><span class="hl kwd">save</span><span class="hl opt">();</span>
  <span class="hl kwa">var</span> res <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_skipUntilEnd</span><span class="hl opt">(</span>
      buffer<span class="hl opt">,</span>
      <span class="hl str">'Failed to skip indefinite length body: &quot;'</span> <span class="hl opt">+</span> <span class="hl kwa">this</span><span class="hl opt">.</span>tag <span class="hl opt">+</span> <span class="hl str">'&quot;'</span><span class="hl opt">);</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>buffer<span class="hl opt">.</span><span class="hl kwd">isError</span><span class="hl opt">(</span>res<span class="hl opt">))</span>
    <span class="hl kwa">return</span> res<span class="hl opt">;</span>

  len <span class="hl opt">=</span> buffer<span class="hl opt">.</span>offset <span class="hl opt">-</span> state<span class="hl opt">.</span>offset<span class="hl opt">;</span>
  buffer<span class="hl opt">.</span><span class="hl kwd">restore</span><span class="hl opt">(</span>state<span class="hl opt">);</span>
  <span class="hl kwa">return</span> buffer<span class="hl opt">.</span><span class="hl kwd">skip</span><span class="hl opt">(</span>len<span class="hl opt">,</span> <span class="hl str">'Failed to match body of: &quot;'</span> <span class="hl opt">+</span> tag <span class="hl opt">+</span> <span class="hl str">'&quot;'</span><span class="hl opt">);</span>
<span class="hl opt">};</span>

DERNode<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_skipUntilEnd <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">skipUntilEnd</span><span class="hl opt">(</span>buffer<span class="hl opt">,</span> fail<span class="hl opt">) {</span>
  <span class="hl kwa">while</span> <span class="hl opt">(</span><span class="hl kwa">true</span><span class="hl opt">) {</span>
    <span class="hl kwa">var</span> tag <span class="hl opt">=</span> <span class="hl kwd">derDecodeTag</span><span class="hl opt">(</span>buffer<span class="hl opt">,</span> fail<span class="hl opt">);</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>buffer<span class="hl opt">.</span><span class="hl kwd">isError</span><span class="hl opt">(</span>tag<span class="hl opt">))</span>
      <span class="hl kwa">return</span> tag<span class="hl opt">;</span>
    <span class="hl kwa">var</span> len <span class="hl opt">=</span> <span class="hl kwd">derDecodeLen</span><span class="hl opt">(</span>buffer<span class="hl opt">,</span> tag<span class="hl opt">.</span>primitive<span class="hl opt">,</span> fail<span class="hl opt">);</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>buffer<span class="hl opt">.</span><span class="hl kwd">isError</span><span class="hl opt">(</span>len<span class="hl opt">))</span>
      <span class="hl kwa">return</span> len<span class="hl opt">;</span>

    <span class="hl kwa">var</span> res<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>tag<span class="hl opt">.</span>primitive <span class="hl opt">||</span> len <span class="hl opt">!==</span> <span class="hl kwa">null</span><span class="hl opt">)</span>
      res <span class="hl opt">=</span> buffer<span class="hl opt">.</span><span class="hl kwd">skip</span><span class="hl opt">(</span>len<span class="hl opt">)</span>
    <span class="hl kwa">else</span>
      res <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_skipUntilEnd</span><span class="hl opt">(</span>buffer<span class="hl opt">,</span> fail<span class="hl opt">);</span>

    <span class="hl slc">// Failure</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>buffer<span class="hl opt">.</span><span class="hl kwd">isError</span><span class="hl opt">(</span>res<span class="hl opt">))</span>
      <span class="hl kwa">return</span> res<span class="hl opt">;</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>tag<span class="hl opt">.</span>tagStr <span class="hl opt">===</span> <span class="hl str">'end'</span><span class="hl opt">)</span>
      <span class="hl kwa">break</span><span class="hl opt">;</span>
  <span class="hl opt">}</span>
<span class="hl opt">};</span>

DERNode<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_decodeList <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">decodeList</span><span class="hl opt">(</span>buffer<span class="hl opt">,</span> tag<span class="hl opt">,</span> decoder<span class="hl opt">) {</span>
  <span class="hl kwa">var</span> result <span class="hl opt">= [];</span>
  <span class="hl kwa">while</span> <span class="hl opt">(!</span>buffer<span class="hl opt">.</span><span class="hl kwd">isEmpty</span><span class="hl opt">()) {</span>
    <span class="hl kwa">var</span> possibleEnd <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_peekTag</span><span class="hl opt">(</span>buffer<span class="hl opt">,</span> <span class="hl str">'end'</span><span class="hl opt">);</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>buffer<span class="hl opt">.</span><span class="hl kwd">isError</span><span class="hl opt">(</span>possibleEnd<span class="hl opt">))</span>
      <span class="hl kwa">return</span> possibleEnd<span class="hl opt">;</span>

    <span class="hl kwa">var</span> res <span class="hl opt">=</span> decoder<span class="hl opt">.</span><span class="hl kwd">decode</span><span class="hl opt">(</span>buffer<span class="hl opt">,</span> <span class="hl str">'der'</span><span class="hl opt">);</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>buffer<span class="hl opt">.</span><span class="hl kwd">isError</span><span class="hl opt">(</span>res<span class="hl opt">) &amp;&amp;</span> possibleEnd<span class="hl opt">)</span>
      <span class="hl kwa">break</span><span class="hl opt">;</span>
    result<span class="hl opt">.</span><span class="hl kwd">push</span><span class="hl opt">(</span>res<span class="hl opt">);</span>
  <span class="hl opt">}</span>
  <span class="hl kwa">return</span> result<span class="hl opt">;</span>
<span class="hl opt">};</span>

DERNode<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_decodeStr <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">decodeStr</span><span class="hl opt">(</span>buffer<span class="hl opt">,</span> tag<span class="hl opt">) {</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>tag <span class="hl opt">===</span> <span class="hl str">'bitstr'</span><span class="hl opt">) {</span>
    <span class="hl kwa">var</span> unused <span class="hl opt">=</span> buffer<span class="hl opt">.</span><span class="hl kwd">readUInt8</span><span class="hl opt">();</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>buffer<span class="hl opt">.</span><span class="hl kwd">isError</span><span class="hl opt">(</span>unused<span class="hl opt">))</span>
      <span class="hl kwa">return</span> unused<span class="hl opt">;</span>
    <span class="hl kwa">return</span> <span class="hl opt">{</span> unused<span class="hl opt">:</span> unused<span class="hl opt">,</span> data<span class="hl opt">:</span> buffer<span class="hl opt">.</span><span class="hl kwd">raw</span><span class="hl opt">() };</span>
  <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>tag <span class="hl opt">===</span> <span class="hl str">'bmpstr'</span><span class="hl opt">) {</span>
    <span class="hl kwa">var</span> raw <span class="hl opt">=</span> buffer<span class="hl opt">.</span><span class="hl kwd">raw</span><span class="hl opt">();</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>raw<span class="hl opt">.</span>length <span class="hl opt">%</span> <span class="hl num">2</span> <span class="hl opt">===</span> <span class="hl num">1</span><span class="hl opt">)</span>
      <span class="hl kwa">return</span> buffer<span class="hl opt">.</span><span class="hl kwd">error</span><span class="hl opt">(</span><span class="hl str">'Decoding of string type: bmpstr length mismatch'</span><span class="hl opt">);</span>

    <span class="hl kwa">var</span> str <span class="hl opt">=</span> <span class="hl str">''</span><span class="hl opt">;</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> raw<span class="hl opt">.</span>length <span class="hl opt">/</span> <span class="hl num">2</span><span class="hl opt">;</span> i<span class="hl opt">++) {</span>
      str <span class="hl opt">+=</span> String<span class="hl opt">.</span><span class="hl kwd">fromCharCode</span><span class="hl opt">(</span>raw<span class="hl opt">.</span><span class="hl kwd">readUInt16BE</span><span class="hl opt">(</span>i <span class="hl opt">*</span> <span class="hl num">2</span><span class="hl opt">));</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return</span> str<span class="hl opt">;</span>
  <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>tag <span class="hl opt">===</span> <span class="hl str">'numstr'</span><span class="hl opt">) {</span>
    <span class="hl kwa">var</span> numstr <span class="hl opt">=</span> buffer<span class="hl opt">.</span><span class="hl kwd">raw</span><span class="hl opt">().</span><span class="hl kwd">toString</span><span class="hl opt">(</span><span class="hl str">'ascii'</span><span class="hl opt">);</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_isNumstr</span><span class="hl opt">(</span>numstr<span class="hl opt">)) {</span>
      <span class="hl kwa">return</span> buffer<span class="hl opt">.</span><span class="hl kwd">error</span><span class="hl opt">(</span><span class="hl str">'Decoding of string type: '</span> <span class="hl opt">+</span>
                          <span class="hl str">'numstr unsupported characters'</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return</span> numstr<span class="hl opt">;</span>
  <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>tag <span class="hl opt">===</span> <span class="hl str">'octstr'</span><span class="hl opt">) {</span>
    <span class="hl kwa">return</span> buffer<span class="hl opt">.</span><span class="hl kwd">raw</span><span class="hl opt">();</span>
  <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>tag <span class="hl opt">===</span> <span class="hl str">'printstr'</span><span class="hl opt">) {</span>
    <span class="hl kwa">var</span> printstr <span class="hl opt">=</span> buffer<span class="hl opt">.</span><span class="hl kwd">raw</span><span class="hl opt">().</span><span class="hl kwd">toString</span><span class="hl opt">(</span><span class="hl str">'ascii'</span><span class="hl opt">);</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_isPrintstr</span><span class="hl opt">(</span>printstr<span class="hl opt">)) {</span>
      <span class="hl kwa">return</span> buffer<span class="hl opt">.</span><span class="hl kwd">error</span><span class="hl opt">(</span><span class="hl str">'Decoding of string type: '</span> <span class="hl opt">+</span>
                          <span class="hl str">'printstr unsupported characters'</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return</span> printstr<span class="hl opt">;</span>
  <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span><span class="hl kwc">/str$/</span><span class="hl opt">.</span><span class="hl kwd">test</span><span class="hl opt">(</span>tag<span class="hl opt">)) {</span>
    <span class="hl kwa">return</span> buffer<span class="hl opt">.</span><span class="hl kwd">raw</span><span class="hl opt">().</span><span class="hl kwd">toString</span><span class="hl opt">();</span>
  <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
    <span class="hl kwa">return</span> buffer<span class="hl opt">.</span><span class="hl kwd">error</span><span class="hl opt">(</span><span class="hl str">'Decoding of string type: '</span> <span class="hl opt">+</span> tag <span class="hl opt">+</span> <span class="hl str">' unsupported'</span><span class="hl opt">);</span>
  <span class="hl opt">}</span>
<span class="hl opt">};</span>

DERNode<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_decodeObjid <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">decodeObjid</span><span class="hl opt">(</span>buffer<span class="hl opt">,</span> values<span class="hl opt">,</span> relative<span class="hl opt">) {</span>
  <span class="hl kwa">var</span> result<span class="hl opt">;</span>
  <span class="hl kwa">var</span> identifiers <span class="hl opt">= [];</span>
  <span class="hl kwa">var</span> ident <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
  <span class="hl kwa">while</span> <span class="hl opt">(!</span>buffer<span class="hl opt">.</span><span class="hl kwd">isEmpty</span><span class="hl opt">()) {</span>
    <span class="hl kwa">var</span> subident <span class="hl opt">=</span> buffer<span class="hl opt">.</span><span class="hl kwd">readUInt8</span><span class="hl opt">();</span>
    ident <span class="hl opt">&lt;&lt;=</span> <span class="hl num">7</span><span class="hl opt">;</span>
    ident <span class="hl opt">|=</span> subident <span class="hl opt">&amp;</span> <span class="hl num">0x7f</span><span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">((</span>subident <span class="hl opt">&amp;</span> <span class="hl num">0x80</span><span class="hl opt">) ===</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      identifiers<span class="hl opt">.</span><span class="hl kwd">push</span><span class="hl opt">(</span>ident<span class="hl opt">);</span>
      ident <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
  <span class="hl opt">}</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>subident <span class="hl opt">&amp;</span> <span class="hl num">0x80</span><span class="hl opt">)</span>
    identifiers<span class="hl opt">.</span><span class="hl kwd">push</span><span class="hl opt">(</span>ident<span class="hl opt">);</span>

  <span class="hl kwa">var</span> first <span class="hl opt">= (</span>identifiers<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] /</span> <span class="hl num">40</span><span class="hl opt">) |</span> <span class="hl num">0</span><span class="hl opt">;</span>
  <span class="hl kwa">var</span> second <span class="hl opt">=</span> identifiers<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] %</span> <span class="hl num">40</span><span class="hl opt">;</span>

  <span class="hl kwa">if</span> <span class="hl opt">(</span>relative<span class="hl opt">)</span>
    result <span class="hl opt">=</span> identifiers<span class="hl opt">;</span>
  <span class="hl kwa">else</span>
    result <span class="hl opt">= [</span>first<span class="hl opt">,</span> second<span class="hl opt">].</span><span class="hl kwd">concat</span><span class="hl opt">(</span>identifiers<span class="hl opt">.</span><span class="hl kwd">slice</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">));</span>

  <span class="hl kwa">if</span> <span class="hl opt">(</span>values<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> tmp <span class="hl opt">=</span> values<span class="hl opt">[</span>result<span class="hl opt">.</span><span class="hl kwd">join</span><span class="hl opt">(</span><span class="hl str">' '</span><span class="hl opt">)];</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>tmp <span class="hl opt">===</span> undefined<span class="hl opt">)</span>
      tmp <span class="hl opt">=</span> values<span class="hl opt">[</span>result<span class="hl opt">.</span><span class="hl kwd">join</span><span class="hl opt">(</span><span class="hl str">'.'</span><span class="hl opt">)];</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>tmp <span class="hl opt">!==</span> undefined<span class="hl opt">)</span>
      result <span class="hl opt">=</span> tmp<span class="hl opt">;</span>
  <span class="hl opt">}</span>

  <span class="hl kwa">return</span> result<span class="hl opt">;</span>
<span class="hl opt">};</span>

DERNode<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_decodeTime <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">decodeTime</span><span class="hl opt">(</span>buffer<span class="hl opt">,</span> tag<span class="hl opt">) {</span>
  <span class="hl kwa">var</span> str <span class="hl opt">=</span> buffer<span class="hl opt">.</span><span class="hl kwd">raw</span><span class="hl opt">().</span><span class="hl kwd">toString</span><span class="hl opt">();</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>tag <span class="hl opt">===</span> <span class="hl str">'gentime'</span><span class="hl opt">) {</span>
    <span class="hl kwa">var</span> year <span class="hl opt">=</span> str<span class="hl opt">.</span><span class="hl kwd">slice</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">4</span><span class="hl opt">) |</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> mon <span class="hl opt">=</span> str<span class="hl opt">.</span><span class="hl kwd">slice</span><span class="hl opt">(</span><span class="hl num">4</span><span class="hl opt">,</span> <span class="hl num">6</span><span class="hl opt">) |</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> day <span class="hl opt">=</span> str<span class="hl opt">.</span><span class="hl kwd">slice</span><span class="hl opt">(</span><span class="hl num">6</span><span class="hl opt">,</span> <span class="hl num">8</span><span class="hl opt">) |</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> hour <span class="hl opt">=</span> str<span class="hl opt">.</span><span class="hl kwd">slice</span><span class="hl opt">(</span><span class="hl num">8</span><span class="hl opt">,</span> <span class="hl num">10</span><span class="hl opt">) |</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> min <span class="hl opt">=</span> str<span class="hl opt">.</span><span class="hl kwd">slice</span><span class="hl opt">(</span><span class="hl num">10</span><span class="hl opt">,</span> <span class="hl num">12</span><span class="hl opt">) |</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> sec <span class="hl opt">=</span> str<span class="hl opt">.</span><span class="hl kwd">slice</span><span class="hl opt">(</span><span class="hl num">12</span><span class="hl opt">,</span> <span class="hl num">14</span><span class="hl opt">) |</span> <span class="hl num">0</span><span class="hl opt">;</span>
  <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>tag <span class="hl opt">===</span> <span class="hl str">'utctime'</span><span class="hl opt">) {</span>
    <span class="hl kwa">var</span> year <span class="hl opt">=</span> str<span class="hl opt">.</span><span class="hl kwd">slice</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">2</span><span class="hl opt">) |</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> mon <span class="hl opt">=</span> str<span class="hl opt">.</span><span class="hl kwd">slice</span><span class="hl opt">(</span><span class="hl num">2</span><span class="hl opt">,</span> <span class="hl num">4</span><span class="hl opt">) |</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> day <span class="hl opt">=</span> str<span class="hl opt">.</span><span class="hl kwd">slice</span><span class="hl opt">(</span><span class="hl num">4</span><span class="hl opt">,</span> <span class="hl num">6</span><span class="hl opt">) |</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> hour <span class="hl opt">=</span> str<span class="hl opt">.</span><span class="hl kwd">slice</span><span class="hl opt">(</span><span class="hl num">6</span><span class="hl opt">,</span> <span class="hl num">8</span><span class="hl opt">) |</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> min <span class="hl opt">=</span> str<span class="hl opt">.</span><span class="hl kwd">slice</span><span class="hl opt">(</span><span class="hl num">8</span><span class="hl opt">,</span> <span class="hl num">10</span><span class="hl opt">) |</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> sec <span class="hl opt">=</span> str<span class="hl opt">.</span><span class="hl kwd">slice</span><span class="hl opt">(</span><span class="hl num">10</span><span class="hl opt">,</span> <span class="hl num">12</span><span class="hl opt">) |</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>year <span class="hl opt">&lt;</span> <span class="hl num">70</span><span class="hl opt">)</span>
      year <span class="hl opt">=</span> <span class="hl num">2000</span> <span class="hl opt">+</span> year<span class="hl opt">;</span>
    <span class="hl kwa">else</span>
      year <span class="hl opt">=</span> <span class="hl num">1900</span> <span class="hl opt">+</span> year<span class="hl opt">;</span>
  <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
    <span class="hl kwa">return</span> buffer<span class="hl opt">.</span><span class="hl kwd">error</span><span class="hl opt">(</span><span class="hl str">'Decoding '</span> <span class="hl opt">+</span> tag <span class="hl opt">+</span> <span class="hl str">' time is not supported yet'</span><span class="hl opt">);</span>
  <span class="hl opt">}</span>

  <span class="hl kwa">return</span> Date<span class="hl opt">.</span><span class="hl kwd">UTC</span><span class="hl opt">(</span>year<span class="hl opt">,</span> mon <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">,</span> day<span class="hl opt">,</span> hour<span class="hl opt">,</span> min<span class="hl opt">,</span> sec<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">);</span>
<span class="hl opt">};</span>

DERNode<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_decodeNull <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">decodeNull</span><span class="hl opt">(</span>buffer<span class="hl opt">) {</span>
  <span class="hl kwa">return null</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

DERNode<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_decodeBool <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">decodeBool</span><span class="hl opt">(</span>buffer<span class="hl opt">) {</span>
  <span class="hl kwa">var</span> res <span class="hl opt">=</span> buffer<span class="hl opt">.</span><span class="hl kwd">readUInt8</span><span class="hl opt">();</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>buffer<span class="hl opt">.</span><span class="hl kwd">isError</span><span class="hl opt">(</span>res<span class="hl opt">))</span>
    <span class="hl kwa">return</span> res<span class="hl opt">;</span>
  <span class="hl kwa">else</span>
    <span class="hl kwa">return</span> res <span class="hl opt">!==</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

DERNode<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_decodeInt <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">decodeInt</span><span class="hl opt">(</span>buffer<span class="hl opt">,</span> values<span class="hl opt">) {</span>
  <span class="hl slc">// Bigint, return as it is (assume big endian)</span>
  <span class="hl kwa">var</span> raw <span class="hl opt">=</span> buffer<span class="hl opt">.</span><span class="hl kwd">raw</span><span class="hl opt">();</span>
  <span class="hl kwa">var</span> res <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">bignum</span><span class="hl opt">(</span>raw<span class="hl opt">);</span>

  <span class="hl kwa">if</span> <span class="hl opt">(</span>values<span class="hl opt">)</span>
    res <span class="hl opt">=</span> values<span class="hl opt">[</span>res<span class="hl opt">.</span><span class="hl kwd">toString</span><span class="hl opt">(</span><span class="hl num">10</span><span class="hl opt">)] ||</span> res<span class="hl opt">;</span>

  <span class="hl kwa">return</span> res<span class="hl opt">;</span>
<span class="hl opt">};</span>

DERNode<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_use <span class="hl opt">=</span> <span class="hl kwa">function use</span><span class="hl opt">(</span>entity<span class="hl opt">,</span> obj<span class="hl opt">) {</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> entity <span class="hl opt">===</span> <span class="hl str">'function'</span><span class="hl opt">)</span>
    entity <span class="hl opt">=</span> <span class="hl kwd">entity</span><span class="hl opt">(</span>obj<span class="hl opt">);</span>
  <span class="hl kwa">return</span> entity<span class="hl opt">.</span><span class="hl kwd">_getDecoder</span><span class="hl opt">(</span><span class="hl str">'der'</span><span class="hl opt">).</span>tree<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl slc">// Utility methods</span>

<span class="hl kwa">function</span> <span class="hl kwd">derDecodeTag</span><span class="hl opt">(</span>buf<span class="hl opt">,</span> fail<span class="hl opt">) {</span>
  <span class="hl kwa">var</span> tag <span class="hl opt">=</span> buf<span class="hl opt">.</span><span class="hl kwd">readUInt8</span><span class="hl opt">(</span>fail<span class="hl opt">);</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>buf<span class="hl opt">.</span><span class="hl kwd">isError</span><span class="hl opt">(</span>tag<span class="hl opt">))</span>
    <span class="hl kwa">return</span> tag<span class="hl opt">;</span>

  <span class="hl kwa">var</span> cls <span class="hl opt">=</span> der<span class="hl opt">.</span>tagClass<span class="hl opt">[</span>tag <span class="hl opt">&gt;&gt;</span> <span class="hl num">6</span><span class="hl opt">];</span>
  <span class="hl kwa">var</span> primitive <span class="hl opt">= (</span>tag <span class="hl opt">&amp;</span> <span class="hl num">0x20</span><span class="hl opt">) ===</span> <span class="hl num">0</span><span class="hl opt">;</span>

  <span class="hl slc">// Multi-octet tag - load</span>
  <span class="hl kwa">if</span> <span class="hl opt">((</span>tag <span class="hl opt">&amp;</span> <span class="hl num">0x1f</span><span class="hl opt">) ===</span> <span class="hl num">0x1f</span><span class="hl opt">) {</span>
    <span class="hl kwa">var</span> oct <span class="hl opt">=</span> tag<span class="hl opt">;</span>
    tag <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">while</span> <span class="hl opt">((</span>oct <span class="hl opt">&amp;</span> <span class="hl num">0x80</span><span class="hl opt">) ===</span> <span class="hl num">0x80</span><span class="hl opt">) {</span>
      oct <span class="hl opt">=</span> buf<span class="hl opt">.</span><span class="hl kwd">readUInt8</span><span class="hl opt">(</span>fail<span class="hl opt">);</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>buf<span class="hl opt">.</span><span class="hl kwd">isError</span><span class="hl opt">(</span>oct<span class="hl opt">))</span>
        <span class="hl kwa">return</span> oct<span class="hl opt">;</span>

      tag <span class="hl opt">&lt;&lt;=</span> <span class="hl num">7</span><span class="hl opt">;</span>
      tag <span class="hl opt">|=</span> oct <span class="hl opt">&amp;</span> <span class="hl num">0x7f</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
  <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
    tag <span class="hl opt">&amp;=</span> <span class="hl num">0x1f</span><span class="hl opt">;</span>
  <span class="hl opt">}</span>
  <span class="hl kwa">var</span> tagStr <span class="hl opt">=</span> der<span class="hl opt">.</span>tag<span class="hl opt">[</span>tag<span class="hl opt">];</span>

  <span class="hl kwa">return</span> <span class="hl opt">{</span>
    cls<span class="hl opt">:</span> cls<span class="hl opt">,</span>
    primitive<span class="hl opt">:</span> primitive<span class="hl opt">,</span>
    tag<span class="hl opt">:</span> tag<span class="hl opt">,</span>
    tagStr<span class="hl opt">:</span> tagStr
  <span class="hl opt">};</span>
<span class="hl opt">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">derDecodeLen</span><span class="hl opt">(</span>buf<span class="hl opt">,</span> primitive<span class="hl opt">,</span> fail<span class="hl opt">) {</span>
  <span class="hl kwa">var</span> len <span class="hl opt">=</span> buf<span class="hl opt">.</span><span class="hl kwd">readUInt8</span><span class="hl opt">(</span>fail<span class="hl opt">);</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>buf<span class="hl opt">.</span><span class="hl kwd">isError</span><span class="hl opt">(</span>len<span class="hl opt">))</span>
    <span class="hl kwa">return</span> len<span class="hl opt">;</span>

  <span class="hl slc">// Indefinite form</span>
  <span class="hl kwa">if</span> <span class="hl opt">(!</span>primitive <span class="hl opt">&amp;&amp;</span> len <span class="hl opt">===</span> <span class="hl num">0x80</span><span class="hl opt">)</span>
    <span class="hl kwa">return null</span><span class="hl opt">;</span>

  <span class="hl slc">// Definite form</span>
  <span class="hl kwa">if</span> <span class="hl opt">((</span>len <span class="hl opt">&amp;</span> <span class="hl num">0x80</span><span class="hl opt">) ===</span> <span class="hl num">0</span><span class="hl opt">) {</span>
    <span class="hl slc">// Short form</span>
    <span class="hl kwa">return</span> len<span class="hl opt">;</span>
  <span class="hl opt">}</span>

  <span class="hl slc">// Long form</span>
  <span class="hl kwa">var</span> num <span class="hl opt">=</span> len <span class="hl opt">&amp;</span> <span class="hl num">0x7f</span><span class="hl opt">;</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>num <span class="hl opt">&gt;=</span> <span class="hl num">4</span><span class="hl opt">)</span>
    <span class="hl kwa">return</span> buf<span class="hl opt">.</span><span class="hl kwd">error</span><span class="hl opt">(</span><span class="hl str">'length octect is too long'</span><span class="hl opt">);</span>

  len <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> num<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
    len <span class="hl opt">&lt;&lt;=</span> <span class="hl num">8</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> j <span class="hl opt">=</span> buf<span class="hl opt">.</span><span class="hl kwd">readUInt8</span><span class="hl opt">(</span>fail<span class="hl opt">);</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>buf<span class="hl opt">.</span><span class="hl kwd">isError</span><span class="hl opt">(</span>j<span class="hl opt">))</span>
      <span class="hl kwa">return</span> j<span class="hl opt">;</span>
    len <span class="hl opt">|=</span> j<span class="hl opt">;</span>
  <span class="hl opt">}</span>

  <span class="hl kwa">return</span> len<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl opt">},{</span><span class="hl str">&quot;../../asn1&quot;</span><span class="hl opt">:</span><span class="hl num">7</span><span class="hl opt">,</span><span class="hl str">&quot;inherits&quot;</span><span class="hl opt">:</span><span class="hl num">144</span><span class="hl opt">}],</span><span class="hl num">16</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>require<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl kwa">var</span> decoders <span class="hl opt">=</span> exports<span class="hl opt">;</span>

decoders<span class="hl opt">.</span>der <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'./der'</span><span class="hl opt">);</span>
decoders<span class="hl opt">.</span>pem <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'./pem'</span><span class="hl opt">);</span>

<span class="hl opt">},{</span><span class="hl str">&quot;./der&quot;</span><span class="hl opt">:</span><span class="hl num">15</span><span class="hl opt">,</span><span class="hl str">&quot;./pem&quot;</span><span class="hl opt">:</span><span class="hl num">17</span><span class="hl opt">}],</span><span class="hl num">17</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>require<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl kwa">var</span> inherits <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'inherits'</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> Buffer <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'buffer'</span><span class="hl opt">).</span>Buffer<span class="hl opt">;</span>

<span class="hl kwa">var</span> asn1 <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'../../asn1'</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> DERDecoder <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'./der'</span><span class="hl opt">);</span>

<span class="hl kwa">function</span> <span class="hl kwd">PEMDecoder</span><span class="hl opt">(</span>entity<span class="hl opt">) {</span>
  DERDecoder<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> entity<span class="hl opt">);</span>
  <span class="hl kwa">this</span><span class="hl opt">.</span>enc <span class="hl opt">=</span> <span class="hl str">'pem'</span><span class="hl opt">;</span>
<span class="hl opt">};</span>
<span class="hl kwd">inherits</span><span class="hl opt">(</span>PEMDecoder<span class="hl opt">,</span> DERDecoder<span class="hl opt">);</span>
module<span class="hl opt">.</span>exports <span class="hl opt">=</span> PEMDecoder<span class="hl opt">;</span>

PEMDecoder<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>decode <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">decode</span><span class="hl opt">(</span>data<span class="hl opt">,</span> options<span class="hl opt">) {</span>
  <span class="hl kwa">var</span> lines <span class="hl opt">=</span> data<span class="hl opt">.</span><span class="hl kwd">toString</span><span class="hl opt">().</span><span class="hl kwd">split</span><span class="hl opt">(</span><span class="hl kwc">/[\r\n]+/g</span><span class="hl opt">);</span>

  <span class="hl kwa">var</span> label <span class="hl opt">=</span> options<span class="hl opt">.</span>label<span class="hl opt">.</span><span class="hl kwd">toUpperCase</span><span class="hl opt">();</span>

  <span class="hl kwa">var</span> re <span class="hl opt">=</span> <span class="hl kwc">/^-----(BEGIN|END) ([^-]+)-----$/</span><span class="hl opt">;</span>
  <span class="hl kwa">var</span> start <span class="hl opt">= -</span><span class="hl num">1</span><span class="hl opt">;</span>
  <span class="hl kwa">var</span> end <span class="hl opt">= -</span><span class="hl num">1</span><span class="hl opt">;</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> lines<span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
    <span class="hl kwa">var</span> match <span class="hl opt">=</span> lines<span class="hl opt">[</span>i<span class="hl opt">].</span><span class="hl kwd">match</span><span class="hl opt">(</span>re<span class="hl opt">);</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>match <span class="hl opt">===</span> <span class="hl kwa">null</span><span class="hl opt">)</span>
      <span class="hl kwa">continue</span><span class="hl opt">;</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>match<span class="hl opt">[</span><span class="hl num">2</span><span class="hl opt">] !==</span> label<span class="hl opt">)</span>
      <span class="hl kwa">continue</span><span class="hl opt">;</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>start <span class="hl opt">=== -</span><span class="hl num">1</span><span class="hl opt">) {</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>match<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] !==</span> <span class="hl str">'BEGIN'</span><span class="hl opt">)</span>
        <span class="hl kwa">break</span><span class="hl opt">;</span>
      start <span class="hl opt">=</span> i<span class="hl opt">;</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>match<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] !==</span> <span class="hl str">'END'</span><span class="hl opt">)</span>
        <span class="hl kwa">break</span><span class="hl opt">;</span>
      end <span class="hl opt">=</span> i<span class="hl opt">;</span>
      <span class="hl kwa">break</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
  <span class="hl opt">}</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>start <span class="hl opt">=== -</span><span class="hl num">1</span> <span class="hl opt">||</span> end <span class="hl opt">=== -</span><span class="hl num">1</span><span class="hl opt">)</span>
    <span class="hl kwa">throw new</span> <span class="hl kwd">Error</span><span class="hl opt">(</span><span class="hl str">'PEM section not found for: '</span> <span class="hl opt">+</span> label<span class="hl opt">);</span>

  <span class="hl kwa">var</span> base64 <span class="hl opt">=</span> lines<span class="hl opt">.</span><span class="hl kwd">slice</span><span class="hl opt">(</span>start <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">,</span> end<span class="hl opt">).</span><span class="hl kwd">join</span><span class="hl opt">(</span><span class="hl str">''</span><span class="hl opt">);</span>
  <span class="hl slc">// Remove excessive symbols</span>
  base64<span class="hl opt">.</span><span class="hl kwd">replace</span><span class="hl opt">(</span><span class="hl kwc">/[^a-z0-9\+\/=]+/gi</span><span class="hl opt">,</span> <span class="hl str">''</span><span class="hl opt">);</span>

  <span class="hl kwa">var</span> input <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Buffer</span><span class="hl opt">(</span>base64<span class="hl opt">,</span> <span class="hl str">'base64'</span><span class="hl opt">);</span>
  <span class="hl kwa">return</span> DERDecoder<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>decode<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> input<span class="hl opt">,</span> options<span class="hl opt">);</span>
<span class="hl opt">};</span>

<span class="hl opt">},{</span><span class="hl str">&quot;../../asn1&quot;</span><span class="hl opt">:</span><span class="hl num">7</span><span class="hl opt">,</span><span class="hl str">&quot;./der&quot;</span><span class="hl opt">:</span><span class="hl num">15</span><span class="hl opt">,</span><span class="hl str">&quot;buffer&quot;</span><span class="hl opt">:</span><span class="hl num">58</span><span class="hl opt">,</span><span class="hl str">&quot;inherits&quot;</span><span class="hl opt">:</span><span class="hl num">144</span><span class="hl opt">}],</span><span class="hl num">18</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>require<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl kwa">var</span> inherits <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'inherits'</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> Buffer <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'buffer'</span><span class="hl opt">).</span>Buffer<span class="hl opt">;</span>

<span class="hl kwa">var</span> asn1 <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'../../asn1'</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> base <span class="hl opt">=</span> asn1<span class="hl opt">.</span>base<span class="hl opt">;</span>
<span class="hl kwa">var</span> bignum <span class="hl opt">=</span> asn1<span class="hl opt">.</span>bignum<span class="hl opt">;</span>

<span class="hl slc">// Import DER constants</span>
<span class="hl kwa">var</span> der <span class="hl opt">=</span> asn1<span class="hl opt">.</span>constants<span class="hl opt">.</span>der<span class="hl opt">;</span>

<span class="hl kwa">function</span> <span class="hl kwd">DEREncoder</span><span class="hl opt">(</span>entity<span class="hl opt">) {</span>
  <span class="hl kwa">this</span><span class="hl opt">.</span>enc <span class="hl opt">=</span> <span class="hl str">'der'</span><span class="hl opt">;</span>
  <span class="hl kwa">this</span><span class="hl opt">.</span>name <span class="hl opt">=</span> entity<span class="hl opt">.</span>name<span class="hl opt">;</span>
  <span class="hl kwa">this</span><span class="hl opt">.</span>entity <span class="hl opt">=</span> entity<span class="hl opt">;</span>

  <span class="hl slc">// Construct base tree</span>
  <span class="hl kwa">this</span><span class="hl opt">.</span>tree <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">DERNode</span><span class="hl opt">();</span>
  <span class="hl kwa">this</span><span class="hl opt">.</span>tree<span class="hl opt">.</span><span class="hl kwd">_init</span><span class="hl opt">(</span>entity<span class="hl opt">.</span>body<span class="hl opt">);</span>
<span class="hl opt">};</span>
module<span class="hl opt">.</span>exports <span class="hl opt">=</span> DEREncoder<span class="hl opt">;</span>

DEREncoder<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>encode <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">encode</span><span class="hl opt">(</span>data<span class="hl opt">,</span> reporter<span class="hl opt">) {</span>
  <span class="hl kwa">return this</span><span class="hl opt">.</span>tree<span class="hl opt">.</span><span class="hl kwd">_encode</span><span class="hl opt">(</span>data<span class="hl opt">,</span> reporter<span class="hl opt">).</span><span class="hl kwd">join</span><span class="hl opt">();</span>
<span class="hl opt">};</span>

<span class="hl slc">// Tree methods</span>

<span class="hl kwa">function</span> <span class="hl kwd">DERNode</span><span class="hl opt">(</span>parent<span class="hl opt">) {</span>
  base<span class="hl opt">.</span>Node<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> <span class="hl str">'der'</span><span class="hl opt">,</span> parent<span class="hl opt">);</span>
<span class="hl opt">}</span>
<span class="hl kwd">inherits</span><span class="hl opt">(</span>DERNode<span class="hl opt">,</span> base<span class="hl opt">.</span>Node<span class="hl opt">);</span>

DERNode<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_encodeComposite <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">encodeComposite</span><span class="hl opt">(</span>tag<span class="hl opt">,</span>
                                                              primitive<span class="hl opt">,</span>
                                                              cls<span class="hl opt">,</span>
                                                              content<span class="hl opt">) {</span>
  <span class="hl kwa">var</span> encodedTag <span class="hl opt">=</span> <span class="hl kwd">encodeTag</span><span class="hl opt">(</span>tag<span class="hl opt">,</span> primitive<span class="hl opt">,</span> cls<span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">.</span>reporter<span class="hl opt">);</span>

  <span class="hl slc">// Short form</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>content<span class="hl opt">.</span>length <span class="hl opt">&lt;</span> <span class="hl num">0x80</span><span class="hl opt">) {</span>
    <span class="hl kwa">var</span> header <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Buffer</span><span class="hl opt">(</span><span class="hl num">2</span><span class="hl opt">);</span>
    header<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] =</span> encodedTag<span class="hl opt">;</span>
    header<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] =</span> content<span class="hl opt">.</span>length<span class="hl opt">;</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_createEncoderBuffer</span><span class="hl opt">([</span> header<span class="hl opt">,</span> content <span class="hl opt">]);</span>
  <span class="hl opt">}</span>

  <span class="hl slc">// Long form</span>
  <span class="hl slc">// Count octets required to store length</span>
  <span class="hl kwa">var</span> lenOctets <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> content<span class="hl opt">.</span>length<span class="hl opt">;</span> i <span class="hl opt">&gt;=</span> <span class="hl num">0x100</span><span class="hl opt">;</span> i <span class="hl opt">&gt;&gt;=</span> <span class="hl num">8</span><span class="hl opt">)</span>
    lenOctets<span class="hl opt">++;</span>

  <span class="hl kwa">var</span> header <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Buffer</span><span class="hl opt">(</span><span class="hl num">1</span> <span class="hl opt">+</span> <span class="hl num">1</span> <span class="hl opt">+</span> lenOctets<span class="hl opt">);</span>
  header<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] =</span> encodedTag<span class="hl opt">;</span>
  header<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] =</span> <span class="hl num">0x80</span> <span class="hl opt">|</span> lenOctets<span class="hl opt">;</span>

  <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">1</span> <span class="hl opt">+</span> lenOctets<span class="hl opt">,</span> j <span class="hl opt">=</span> content<span class="hl opt">.</span>length<span class="hl opt">;</span> j <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">;</span> i<span class="hl opt">--,</span> j <span class="hl opt">&gt;&gt;=</span> <span class="hl num">8</span><span class="hl opt">)</span>
    header<span class="hl opt">[</span>i<span class="hl opt">] =</span> j <span class="hl opt">&amp;</span> <span class="hl num">0xff</span><span class="hl opt">;</span>

  <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_createEncoderBuffer</span><span class="hl opt">([</span> header<span class="hl opt">,</span> content <span class="hl opt">]);</span>
<span class="hl opt">};</span>

DERNode<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_encodeStr <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">encodeStr</span><span class="hl opt">(</span>str<span class="hl opt">,</span> tag<span class="hl opt">) {</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>tag <span class="hl opt">===</span> <span class="hl str">'bitstr'</span><span class="hl opt">) {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_createEncoderBuffer</span><span class="hl opt">([</span> str<span class="hl opt">.</span>unused <span class="hl opt">|</span> <span class="hl num">0</span><span class="hl opt">,</span> str<span class="hl opt">.</span>data <span class="hl opt">]);</span>
  <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>tag <span class="hl opt">===</span> <span class="hl str">'bmpstr'</span><span class="hl opt">) {</span>
    <span class="hl kwa">var</span> buf <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Buffer</span><span class="hl opt">(</span>str<span class="hl opt">.</span>length <span class="hl opt">*</span> <span class="hl num">2</span><span class="hl opt">);</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> str<span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
      buf<span class="hl opt">.</span><span class="hl kwd">writeUInt16BE</span><span class="hl opt">(</span>str<span class="hl opt">.</span><span class="hl kwd">charCodeAt</span><span class="hl opt">(</span>i<span class="hl opt">),</span> i <span class="hl opt">*</span> <span class="hl num">2</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_createEncoderBuffer</span><span class="hl opt">(</span>buf<span class="hl opt">);</span>
  <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>tag <span class="hl opt">===</span> <span class="hl str">'numstr'</span><span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_isNumstr</span><span class="hl opt">(</span>str<span class="hl opt">)) {</span>
      <span class="hl kwa">return this</span><span class="hl opt">.</span>reporter<span class="hl opt">.</span><span class="hl kwd">error</span><span class="hl opt">(</span><span class="hl str">'Encoding of string type: numstr supports '</span> <span class="hl opt">+</span>
                                 <span class="hl str">'only digits and space'</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_createEncoderBuffer</span><span class="hl opt">(</span>str<span class="hl opt">);</span>
  <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>tag <span class="hl opt">===</span> <span class="hl str">'printstr'</span><span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_isPrintstr</span><span class="hl opt">(</span>str<span class="hl opt">)) {</span>
      <span class="hl kwa">return this</span><span class="hl opt">.</span>reporter<span class="hl opt">.</span><span class="hl kwd">error</span><span class="hl opt">(</span><span class="hl str">'Encoding of string type: printstr supports '</span> <span class="hl opt">+</span>
                                 <span class="hl str">'only latin upper and lower case letters, '</span> <span class="hl opt">+</span>
                                 <span class="hl str">'digits, space, apostrophe, left and rigth '</span> <span class="hl opt">+</span>
                                 <span class="hl str">'parenthesis, plus sign, comma, hyphen, '</span> <span class="hl opt">+</span>
                                 <span class="hl str">'dot, slash, colon, equal sign, '</span> <span class="hl opt">+</span>
                                 <span class="hl str">'question mark'</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_createEncoderBuffer</span><span class="hl opt">(</span>str<span class="hl opt">);</span>
  <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span><span class="hl kwc">/str$/</span><span class="hl opt">.</span><span class="hl kwd">test</span><span class="hl opt">(</span>tag<span class="hl opt">)) {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_createEncoderBuffer</span><span class="hl opt">(</span>str<span class="hl opt">);</span>
  <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span>reporter<span class="hl opt">.</span><span class="hl kwd">error</span><span class="hl opt">(</span><span class="hl str">'Encoding of string type: '</span> <span class="hl opt">+</span> tag <span class="hl opt">+</span>
                               <span class="hl str">' unsupported'</span><span class="hl opt">);</span>
  <span class="hl opt">}</span>
<span class="hl opt">};</span>

DERNode<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_encodeObjid <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">encodeObjid</span><span class="hl opt">(</span>id<span class="hl opt">,</span> values<span class="hl opt">,</span> relative<span class="hl opt">) {</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> id <span class="hl opt">===</span> <span class="hl str">'string'</span><span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!</span>values<span class="hl opt">)</span>
      <span class="hl kwa">return this</span><span class="hl opt">.</span>reporter<span class="hl opt">.</span><span class="hl kwd">error</span><span class="hl opt">(</span><span class="hl str">'string objid given, but no values map found'</span><span class="hl opt">);</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!</span>values<span class="hl opt">.</span><span class="hl kwd">hasOwnProperty</span><span class="hl opt">(</span>id<span class="hl opt">))</span>
      <span class="hl kwa">return this</span><span class="hl opt">.</span>reporter<span class="hl opt">.</span><span class="hl kwd">error</span><span class="hl opt">(</span><span class="hl str">'objid not found in values map'</span><span class="hl opt">);</span>
    id <span class="hl opt">=</span> values<span class="hl opt">[</span>id<span class="hl opt">].</span><span class="hl kwd">split</span><span class="hl opt">(</span><span class="hl kwc">/[\s\.]+/g</span><span class="hl opt">);</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> id<span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">++)</span>
      id<span class="hl opt">[</span>i<span class="hl opt">] |=</span> <span class="hl num">0</span><span class="hl opt">;</span>
  <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>Array<span class="hl opt">.</span><span class="hl kwd">isArray</span><span class="hl opt">(</span>id<span class="hl opt">)) {</span>
    id <span class="hl opt">=</span> id<span class="hl opt">.</span><span class="hl kwd">slice</span><span class="hl opt">();</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> id<span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">++)</span>
      id<span class="hl opt">[</span>i<span class="hl opt">] |=</span> <span class="hl num">0</span><span class="hl opt">;</span>
  <span class="hl opt">}</span>

  <span class="hl kwa">if</span> <span class="hl opt">(!</span>Array<span class="hl opt">.</span><span class="hl kwd">isArray</span><span class="hl opt">(</span>id<span class="hl opt">)) {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span>reporter<span class="hl opt">.</span><span class="hl kwd">error</span><span class="hl opt">(</span><span class="hl str">'objid() should be either array or string, '</span> <span class="hl opt">+</span>
                               <span class="hl str">'got: '</span> <span class="hl opt">+</span> JSON<span class="hl opt">.</span><span class="hl kwd">stringify</span><span class="hl opt">(</span>id<span class="hl opt">));</span>
  <span class="hl opt">}</span>

  <span class="hl kwa">if</span> <span class="hl opt">(!</span>relative<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>id<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] &gt;=</span> <span class="hl num">40</span><span class="hl opt">)</span>
      <span class="hl kwa">return this</span><span class="hl opt">.</span>reporter<span class="hl opt">.</span><span class="hl kwd">error</span><span class="hl opt">(</span><span class="hl str">'Second objid identifier OOB'</span><span class="hl opt">);</span>
    id<span class="hl opt">.</span><span class="hl kwd">splice</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">2</span><span class="hl opt">,</span> id<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] *</span> <span class="hl num">40</span> <span class="hl opt">+</span> id<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]);</span>
  <span class="hl opt">}</span>

  <span class="hl slc">// Count number of octets</span>
  <span class="hl kwa">var</span> size <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> id<span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
    <span class="hl kwa">var</span> ident <span class="hl opt">=</span> id<span class="hl opt">[</span>i<span class="hl opt">];</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span>size<span class="hl opt">++;</span> ident <span class="hl opt">&gt;=</span> <span class="hl num">0x80</span><span class="hl opt">;</span> ident <span class="hl opt">&gt;&gt;=</span> <span class="hl num">7</span><span class="hl opt">)</span>
      size<span class="hl opt">++;</span>
  <span class="hl opt">}</span>

  <span class="hl kwa">var</span> objid <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Buffer</span><span class="hl opt">(</span>size<span class="hl opt">);</span>
  <span class="hl kwa">var</span> offset <span class="hl opt">=</span> objid<span class="hl opt">.</span>length <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> id<span class="hl opt">.</span>length <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span> i <span class="hl opt">&gt;=</span> <span class="hl num">0</span><span class="hl opt">;</span> i<span class="hl opt">--) {</span>
    <span class="hl kwa">var</span> ident <span class="hl opt">=</span> id<span class="hl opt">[</span>i<span class="hl opt">];</span>
    objid<span class="hl opt">[</span>offset<span class="hl opt">--] =</span> ident <span class="hl opt">&amp;</span> <span class="hl num">0x7f</span><span class="hl opt">;</span>
    <span class="hl kwa">while</span> <span class="hl opt">((</span>ident <span class="hl opt">&gt;&gt;=</span> <span class="hl num">7</span><span class="hl opt">) &gt;</span> <span class="hl num">0</span><span class="hl opt">)</span>
      objid<span class="hl opt">[</span>offset<span class="hl opt">--] =</span> <span class="hl num">0x80</span> <span class="hl opt">| (</span>ident <span class="hl opt">&amp;</span> <span class="hl num">0x7f</span><span class="hl opt">);</span>
  <span class="hl opt">}</span>

  <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_createEncoderBuffer</span><span class="hl opt">(</span>objid<span class="hl opt">);</span>
<span class="hl opt">};</span>

<span class="hl kwa">function</span> <span class="hl kwd">two</span><span class="hl opt">(</span>num<span class="hl opt">) {</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>num <span class="hl opt">&lt;</span> <span class="hl num">10</span><span class="hl opt">)</span>
    <span class="hl kwa">return</span> <span class="hl str">'0'</span> <span class="hl opt">+</span> num<span class="hl opt">;</span>
  <span class="hl kwa">else</span>
    <span class="hl kwa">return</span> num<span class="hl opt">;</span>
<span class="hl opt">}</span>

DERNode<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_encodeTime <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">encodeTime</span><span class="hl opt">(</span>time<span class="hl opt">,</span> tag<span class="hl opt">) {</span>
  <span class="hl kwa">var</span> str<span class="hl opt">;</span>
  <span class="hl kwa">var</span> date <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Date</span><span class="hl opt">(</span>time<span class="hl opt">);</span>

  <span class="hl kwa">if</span> <span class="hl opt">(</span>tag <span class="hl opt">===</span> <span class="hl str">'gentime'</span><span class="hl opt">) {</span>
    str <span class="hl opt">= [</span>
      <span class="hl kwd">two</span><span class="hl opt">(</span>date<span class="hl opt">.</span><span class="hl kwd">getFullYear</span><span class="hl opt">()),</span>
      <span class="hl kwd">two</span><span class="hl opt">(</span>date<span class="hl opt">.</span><span class="hl kwd">getUTCMonth</span><span class="hl opt">() +</span> <span class="hl num">1</span><span class="hl opt">),</span>
      <span class="hl kwd">two</span><span class="hl opt">(</span>date<span class="hl opt">.</span><span class="hl kwd">getUTCDate</span><span class="hl opt">()),</span>
      <span class="hl kwd">two</span><span class="hl opt">(</span>date<span class="hl opt">.</span><span class="hl kwd">getUTCHours</span><span class="hl opt">()),</span>
      <span class="hl kwd">two</span><span class="hl opt">(</span>date<span class="hl opt">.</span><span class="hl kwd">getUTCMinutes</span><span class="hl opt">()),</span>
      <span class="hl kwd">two</span><span class="hl opt">(</span>date<span class="hl opt">.</span><span class="hl kwd">getUTCSeconds</span><span class="hl opt">()),</span>
      <span class="hl str">'Z'</span>
    <span class="hl opt">].</span><span class="hl kwd">join</span><span class="hl opt">(</span><span class="hl str">''</span><span class="hl opt">);</span>
  <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>tag <span class="hl opt">===</span> <span class="hl str">'utctime'</span><span class="hl opt">) {</span>
    str <span class="hl opt">= [</span>
      <span class="hl kwd">two</span><span class="hl opt">(</span>date<span class="hl opt">.</span><span class="hl kwd">getFullYear</span><span class="hl opt">() %</span> <span class="hl num">100</span><span class="hl opt">),</span>
      <span class="hl kwd">two</span><span class="hl opt">(</span>date<span class="hl opt">.</span><span class="hl kwd">getUTCMonth</span><span class="hl opt">() +</span> <span class="hl num">1</span><span class="hl opt">),</span>
      <span class="hl kwd">two</span><span class="hl opt">(</span>date<span class="hl opt">.</span><span class="hl kwd">getUTCDate</span><span class="hl opt">()),</span>
      <span class="hl kwd">two</span><span class="hl opt">(</span>date<span class="hl opt">.</span><span class="hl kwd">getUTCHours</span><span class="hl opt">()),</span>
      <span class="hl kwd">two</span><span class="hl opt">(</span>date<span class="hl opt">.</span><span class="hl kwd">getUTCMinutes</span><span class="hl opt">()),</span>
      <span class="hl kwd">two</span><span class="hl opt">(</span>date<span class="hl opt">.</span><span class="hl kwd">getUTCSeconds</span><span class="hl opt">()),</span>
      <span class="hl str">'Z'</span>
    <span class="hl opt">].</span><span class="hl kwd">join</span><span class="hl opt">(</span><span class="hl str">''</span><span class="hl opt">);</span>
  <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>reporter<span class="hl opt">.</span><span class="hl kwd">error</span><span class="hl opt">(</span><span class="hl str">'Encoding '</span> <span class="hl opt">+</span> tag <span class="hl opt">+</span> <span class="hl str">' time is not supported yet'</span><span class="hl opt">);</span>
  <span class="hl opt">}</span>

  <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_encodeStr</span><span class="hl opt">(</span>str<span class="hl opt">,</span> <span class="hl str">'octstr'</span><span class="hl opt">);</span>
<span class="hl opt">};</span>

DERNode<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_encodeNull <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">encodeNull</span><span class="hl opt">() {</span>
  <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_createEncoderBuffer</span><span class="hl opt">(</span><span class="hl str">''</span><span class="hl opt">);</span>
<span class="hl opt">};</span>

DERNode<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_encodeInt <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">encodeInt</span><span class="hl opt">(</span>num<span class="hl opt">,</span> values<span class="hl opt">) {</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> num <span class="hl opt">===</span> <span class="hl str">'string'</span><span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!</span>values<span class="hl opt">)</span>
      <span class="hl kwa">return this</span><span class="hl opt">.</span>reporter<span class="hl opt">.</span><span class="hl kwd">error</span><span class="hl opt">(</span><span class="hl str">'String int or enum given, but no values map'</span><span class="hl opt">);</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!</span>values<span class="hl opt">.</span><span class="hl kwd">hasOwnProperty</span><span class="hl opt">(</span>num<span class="hl opt">)) {</span>
      <span class="hl kwa">return this</span><span class="hl opt">.</span>reporter<span class="hl opt">.</span><span class="hl kwd">error</span><span class="hl opt">(</span><span class="hl str">'Values map doesn</span><span class="hl esc">\'</span><span class="hl str">t contain: '</span> <span class="hl opt">+</span>
                                 JSON<span class="hl opt">.</span><span class="hl kwd">stringify</span><span class="hl opt">(</span>num<span class="hl opt">));</span>
    <span class="hl opt">}</span>
    num <span class="hl opt">=</span> values<span class="hl opt">[</span>num<span class="hl opt">];</span>
  <span class="hl opt">}</span>

  <span class="hl slc">// Bignum, assume big endian</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> num <span class="hl opt">!==</span> <span class="hl str">'number'</span> <span class="hl opt">&amp;&amp; !</span>Buffer<span class="hl opt">.</span><span class="hl kwd">isBuffer</span><span class="hl opt">(</span>num<span class="hl opt">)) {</span>
    <span class="hl kwa">var</span> numArray <span class="hl opt">=</span> num<span class="hl opt">.</span><span class="hl kwd">toArray</span><span class="hl opt">();</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!</span>num<span class="hl opt">.</span>sign <span class="hl opt">&amp;&amp;</span> numArray<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] &amp;</span> <span class="hl num">0x80</span><span class="hl opt">) {</span>
      numArray<span class="hl opt">.</span><span class="hl kwd">unshift</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
    num <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Buffer</span><span class="hl opt">(</span>numArray<span class="hl opt">);</span>
  <span class="hl opt">}</span>

  <span class="hl kwa">if</span> <span class="hl opt">(</span>Buffer<span class="hl opt">.</span><span class="hl kwd">isBuffer</span><span class="hl opt">(</span>num<span class="hl opt">)) {</span>
    <span class="hl kwa">var</span> size <span class="hl opt">=</span> num<span class="hl opt">.</span>length<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>num<span class="hl opt">.</span>length <span class="hl opt">===</span> <span class="hl num">0</span><span class="hl opt">)</span>
      size<span class="hl opt">++;</span>

    <span class="hl kwa">var</span> out <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Buffer</span><span class="hl opt">(</span>size<span class="hl opt">);</span>
    num<span class="hl opt">.</span><span class="hl kwd">copy</span><span class="hl opt">(</span>out<span class="hl opt">);</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>num<span class="hl opt">.</span>length <span class="hl opt">===</span> <span class="hl num">0</span><span class="hl opt">)</span>
      out<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] =</span> <span class="hl num">0</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_createEncoderBuffer</span><span class="hl opt">(</span>out<span class="hl opt">);</span>
  <span class="hl opt">}</span>

  <span class="hl kwa">if</span> <span class="hl opt">(</span>num <span class="hl opt">&lt;</span> <span class="hl num">0x80</span><span class="hl opt">)</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_createEncoderBuffer</span><span class="hl opt">(</span>num<span class="hl opt">);</span>

  <span class="hl kwa">if</span> <span class="hl opt">(</span>num <span class="hl opt">&lt;</span> <span class="hl num">0x100</span><span class="hl opt">)</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_createEncoderBuffer</span><span class="hl opt">([</span><span class="hl num">0</span><span class="hl opt">,</span> num<span class="hl opt">]);</span>

  <span class="hl kwa">var</span> size <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> num<span class="hl opt">;</span> i <span class="hl opt">&gt;=</span> <span class="hl num">0x100</span><span class="hl opt">;</span> i <span class="hl opt">&gt;&gt;=</span> <span class="hl num">8</span><span class="hl opt">)</span>
    size<span class="hl opt">++;</span>

  <span class="hl kwa">var</span> out <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Array</span><span class="hl opt">(</span>size<span class="hl opt">);</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> out<span class="hl opt">.</span>length <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span> i <span class="hl opt">&gt;=</span> <span class="hl num">0</span><span class="hl opt">;</span> i<span class="hl opt">--) {</span>
    out<span class="hl opt">[</span>i<span class="hl opt">] =</span> num <span class="hl opt">&amp;</span> <span class="hl num">0xff</span><span class="hl opt">;</span>
    num <span class="hl opt">&gt;&gt;=</span> <span class="hl num">8</span><span class="hl opt">;</span>
  <span class="hl opt">}</span>
  <span class="hl kwa">if</span><span class="hl opt">(</span>out<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] &amp;</span> <span class="hl num">0x80</span><span class="hl opt">) {</span>
    out<span class="hl opt">.</span><span class="hl kwd">unshift</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">);</span>
  <span class="hl opt">}</span>

  <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_createEncoderBuffer</span><span class="hl opt">(</span><span class="hl kwa">new</span> <span class="hl kwd">Buffer</span><span class="hl opt">(</span>out<span class="hl opt">));</span>
<span class="hl opt">};</span>

DERNode<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_encodeBool <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">encodeBool</span><span class="hl opt">(</span>value<span class="hl opt">) {</span>
  <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_createEncoderBuffer</span><span class="hl opt">(</span>value <span class="hl opt">?</span> <span class="hl num">0xff</span> <span class="hl opt">:</span> <span class="hl num">0</span><span class="hl opt">);</span>
<span class="hl opt">};</span>

DERNode<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_use <span class="hl opt">=</span> <span class="hl kwa">function use</span><span class="hl opt">(</span>entity<span class="hl opt">,</span> obj<span class="hl opt">) {</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> entity <span class="hl opt">===</span> <span class="hl str">'function'</span><span class="hl opt">)</span>
    entity <span class="hl opt">=</span> <span class="hl kwd">entity</span><span class="hl opt">(</span>obj<span class="hl opt">);</span>
  <span class="hl kwa">return</span> entity<span class="hl opt">.</span><span class="hl kwd">_getEncoder</span><span class="hl opt">(</span><span class="hl str">'der'</span><span class="hl opt">).</span>tree<span class="hl opt">;</span>
<span class="hl opt">};</span>

DERNode<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_skipDefault <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">skipDefault</span><span class="hl opt">(</span>dataBuffer<span class="hl opt">,</span> reporter<span class="hl opt">,</span> parent<span class="hl opt">) {</span>
  <span class="hl kwa">var</span> state <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_baseState<span class="hl opt">;</span>
  <span class="hl kwa">var</span> i<span class="hl opt">;</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>state<span class="hl opt">[</span><span class="hl str">'default'</span><span class="hl opt">] ===</span> <span class="hl kwa">null</span><span class="hl opt">)</span>
    <span class="hl kwa">return false</span><span class="hl opt">;</span>

  <span class="hl kwa">var</span> data <span class="hl opt">=</span> dataBuffer<span class="hl opt">.</span><span class="hl kwd">join</span><span class="hl opt">();</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>state<span class="hl opt">.</span>defaultBuffer <span class="hl opt">===</span> undefined<span class="hl opt">)</span>
    state<span class="hl opt">.</span>defaultBuffer <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_encodeValue</span><span class="hl opt">(</span>state<span class="hl opt">[</span><span class="hl str">'default'</span><span class="hl opt">],</span> reporter<span class="hl opt">,</span> parent<span class="hl opt">).</span><span class="hl kwd">join</span><span class="hl opt">();</span>

  <span class="hl kwa">if</span> <span class="hl opt">(</span>data<span class="hl opt">.</span>length <span class="hl opt">!==</span> state<span class="hl opt">.</span>defaultBuffer<span class="hl opt">.</span>length<span class="hl opt">)</span>
    <span class="hl kwa">return false</span><span class="hl opt">;</span>

  <span class="hl kwa">for</span> <span class="hl opt">(</span>i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> data<span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">++)</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>data<span class="hl opt">[</span>i<span class="hl opt">] !==</span> state<span class="hl opt">.</span>defaultBuffer<span class="hl opt">[</span>i<span class="hl opt">])</span>
      <span class="hl kwa">return false</span><span class="hl opt">;</span>

  <span class="hl kwa">return true</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl slc">// Utility methods</span>

<span class="hl kwa">function</span> <span class="hl kwd">encodeTag</span><span class="hl opt">(</span>tag<span class="hl opt">,</span> primitive<span class="hl opt">,</span> cls<span class="hl opt">,</span> reporter<span class="hl opt">) {</span>
  <span class="hl kwa">var</span> res<span class="hl opt">;</span>

  <span class="hl kwa">if</span> <span class="hl opt">(</span>tag <span class="hl opt">===</span> <span class="hl str">'seqof'</span><span class="hl opt">)</span>
    tag <span class="hl opt">=</span> <span class="hl str">'seq'</span><span class="hl opt">;</span>
  <span class="hl kwa">else if</span> <span class="hl opt">(</span>tag <span class="hl opt">===</span> <span class="hl str">'setof'</span><span class="hl opt">)</span>
    tag <span class="hl opt">=</span> <span class="hl str">'set'</span><span class="hl opt">;</span>

  <span class="hl kwa">if</span> <span class="hl opt">(</span>der<span class="hl opt">.</span>tagByName<span class="hl opt">.</span><span class="hl kwd">hasOwnProperty</span><span class="hl opt">(</span>tag<span class="hl opt">))</span>
    res <span class="hl opt">=</span> der<span class="hl opt">.</span>tagByName<span class="hl opt">[</span>tag<span class="hl opt">];</span>
  <span class="hl kwa">else if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> tag <span class="hl opt">===</span> <span class="hl str">'number'</span> <span class="hl opt">&amp;&amp; (</span>tag <span class="hl opt">|</span> <span class="hl num">0</span><span class="hl opt">) ===</span> tag<span class="hl opt">)</span>
    res <span class="hl opt">=</span> tag<span class="hl opt">;</span>
  <span class="hl kwa">else</span>
    <span class="hl kwa">return</span> reporter<span class="hl opt">.</span><span class="hl kwd">error</span><span class="hl opt">(</span><span class="hl str">'Unknown tag: '</span> <span class="hl opt">+</span> tag<span class="hl opt">);</span>

  <span class="hl kwa">if</span> <span class="hl opt">(</span>res <span class="hl opt">&gt;=</span> <span class="hl num">0x1f</span><span class="hl opt">)</span>
    <span class="hl kwa">return</span> reporter<span class="hl opt">.</span><span class="hl kwd">error</span><span class="hl opt">(</span><span class="hl str">'Multi-octet tag encoding unsupported'</span><span class="hl opt">);</span>

  <span class="hl kwa">if</span> <span class="hl opt">(!</span>primitive<span class="hl opt">)</span>
    res <span class="hl opt">|=</span> <span class="hl num">0x20</span><span class="hl opt">;</span>

  res <span class="hl opt">|= (</span>der<span class="hl opt">.</span>tagClassByName<span class="hl opt">[</span>cls <span class="hl opt">||</span> <span class="hl str">'universal'</span><span class="hl opt">] &lt;&lt;</span> <span class="hl num">6</span><span class="hl opt">);</span>

  <span class="hl kwa">return</span> res<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl opt">},{</span><span class="hl str">&quot;../../asn1&quot;</span><span class="hl opt">:</span><span class="hl num">7</span><span class="hl opt">,</span><span class="hl str">&quot;buffer&quot;</span><span class="hl opt">:</span><span class="hl num">58</span><span class="hl opt">,</span><span class="hl str">&quot;inherits&quot;</span><span class="hl opt">:</span><span class="hl num">144</span><span class="hl opt">}],</span><span class="hl num">19</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>require<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl kwa">var</span> encoders <span class="hl opt">=</span> exports<span class="hl opt">;</span>

encoders<span class="hl opt">.</span>der <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'./der'</span><span class="hl opt">);</span>
encoders<span class="hl opt">.</span>pem <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'./pem'</span><span class="hl opt">);</span>

<span class="hl opt">},{</span><span class="hl str">&quot;./der&quot;</span><span class="hl opt">:</span><span class="hl num">18</span><span class="hl opt">,</span><span class="hl str">&quot;./pem&quot;</span><span class="hl opt">:</span><span class="hl num">20</span><span class="hl opt">}],</span><span class="hl num">20</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>require<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl kwa">var</span> inherits <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'inherits'</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> Buffer <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'buffer'</span><span class="hl opt">).</span>Buffer<span class="hl opt">;</span>

<span class="hl kwa">var</span> asn1 <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'../../asn1'</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> DEREncoder <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'./der'</span><span class="hl opt">);</span>

<span class="hl kwa">function</span> <span class="hl kwd">PEMEncoder</span><span class="hl opt">(</span>entity<span class="hl opt">) {</span>
  DEREncoder<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> entity<span class="hl opt">);</span>
  <span class="hl kwa">this</span><span class="hl opt">.</span>enc <span class="hl opt">=</span> <span class="hl str">'pem'</span><span class="hl opt">;</span>
<span class="hl opt">};</span>
<span class="hl kwd">inherits</span><span class="hl opt">(</span>PEMEncoder<span class="hl opt">,</span> DEREncoder<span class="hl opt">);</span>
module<span class="hl opt">.</span>exports <span class="hl opt">=</span> PEMEncoder<span class="hl opt">;</span>

PEMEncoder<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>encode <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">encode</span><span class="hl opt">(</span>data<span class="hl opt">,</span> options<span class="hl opt">) {</span>
  <span class="hl kwa">var</span> buf <span class="hl opt">=</span> DEREncoder<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>encode<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> data<span class="hl opt">);</span>

  <span class="hl kwa">var</span> p <span class="hl opt">=</span> buf<span class="hl opt">.</span><span class="hl kwd">toString</span><span class="hl opt">(</span><span class="hl str">'base64'</span><span class="hl opt">);</span>
  <span class="hl kwa">var</span> out <span class="hl opt">= [</span> <span class="hl str">'-----BEGIN '</span> <span class="hl opt">+</span> options<span class="hl opt">.</span>label <span class="hl opt">+</span> <span class="hl str">'-----'</span> <span class="hl opt">];</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> p<span class="hl opt">.</span>length<span class="hl opt">;</span> i <span class="hl opt">+=</span> <span class="hl num">64</span><span class="hl opt">)</span>
    out<span class="hl opt">.</span><span class="hl kwd">push</span><span class="hl opt">(</span>p<span class="hl opt">.</span><span class="hl kwd">slice</span><span class="hl opt">(</span>i<span class="hl opt">,</span> i <span class="hl opt">+</span> <span class="hl num">64</span><span class="hl opt">));</span>
  out<span class="hl opt">.</span><span class="hl kwd">push</span><span class="hl opt">(</span><span class="hl str">'-----END '</span> <span class="hl opt">+</span> options<span class="hl opt">.</span>label <span class="hl opt">+</span> <span class="hl str">'-----'</span><span class="hl opt">);</span>
  <span class="hl kwa">return</span> out<span class="hl opt">.</span><span class="hl kwd">join</span><span class="hl opt">(</span><span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">);</span>
<span class="hl opt">};</span>

<span class="hl opt">},{</span><span class="hl str">&quot;../../asn1&quot;</span><span class="hl opt">:</span><span class="hl num">7</span><span class="hl opt">,</span><span class="hl str">&quot;./der&quot;</span><span class="hl opt">:</span><span class="hl num">18</span><span class="hl opt">,</span><span class="hl str">&quot;buffer&quot;</span><span class="hl opt">:</span><span class="hl num">58</span><span class="hl opt">,</span><span class="hl str">&quot;inherits&quot;</span><span class="hl opt">:</span><span class="hl num">144</span><span class="hl opt">}],</span><span class="hl num">21</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>require<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl com">/*</span>
<span class="hl com"> * Copyright (c) 2012 Mathieu Turcotte</span>
<span class="hl com"> * Licensed under the MIT license.</span>
<span class="hl com"> */</span>

<span class="hl kwa">var</span> Backoff <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'./lib/backoff'</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> ExponentialBackoffStrategy <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'./lib/strategy/exponential'</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> FibonacciBackoffStrategy <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'./lib/strategy/fibonacci'</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> FunctionCall <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'./lib/function_call.js'</span><span class="hl opt">);</span>

module<span class="hl opt">.</span>exports<span class="hl opt">.</span>Backoff <span class="hl opt">=</span> Backoff<span class="hl opt">;</span>
module<span class="hl opt">.</span>exports<span class="hl opt">.</span>FunctionCall <span class="hl opt">=</span> FunctionCall<span class="hl opt">;</span>
module<span class="hl opt">.</span>exports<span class="hl opt">.</span>FibonacciStrategy <span class="hl opt">=</span> FibonacciBackoffStrategy<span class="hl opt">;</span>
module<span class="hl opt">.</span>exports<span class="hl opt">.</span>ExponentialStrategy <span class="hl opt">=</span> ExponentialBackoffStrategy<span class="hl opt">;</span>

<span class="hl com">/**</span>
<span class="hl com"> * Constructs a Fibonacci backoff.</span>
<span class="hl com"> * &#64;param options Fibonacci backoff strategy arguments.</span>
<span class="hl com"> * &#64;return The fibonacci backoff.</span>
<span class="hl com"> * &#64;see FibonacciBackoffStrategy</span>
<span class="hl com"> */</span>
module<span class="hl opt">.</span>exports<span class="hl opt">.</span><span class="hl kwd">fibonacci</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>options<span class="hl opt">) {</span>
    <span class="hl kwa">return new</span> <span class="hl kwd">Backoff</span><span class="hl opt">(</span><span class="hl kwa">new</span> <span class="hl kwd">FibonacciBackoffStrategy</span><span class="hl opt">(</span>options<span class="hl opt">));</span>
<span class="hl opt">};</span>

<span class="hl com">/**</span>
<span class="hl com"> * Constructs an exponential backoff.</span>
<span class="hl com"> * &#64;param options Exponential strategy arguments.</span>
<span class="hl com"> * &#64;return The exponential backoff.</span>
<span class="hl com"> * &#64;see ExponentialBackoffStrategy</span>
<span class="hl com"> */</span>
module<span class="hl opt">.</span>exports<span class="hl opt">.</span><span class="hl kwd">exponential</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>options<span class="hl opt">) {</span>
    <span class="hl kwa">return new</span> <span class="hl kwd">Backoff</span><span class="hl opt">(</span><span class="hl kwa">new</span> <span class="hl kwd">ExponentialBackoffStrategy</span><span class="hl opt">(</span>options<span class="hl opt">));</span>
<span class="hl opt">};</span>

<span class="hl com">/**</span>
<span class="hl com"> * Constructs a FunctionCall for the given function and arguments.</span>
<span class="hl com"> * &#64;param fn The function to wrap in a backoff handler.</span>
<span class="hl com"> * &#64;param vargs The function's arguments (var args).</span>
<span class="hl com"> * &#64;param callback The function's callback.</span>
<span class="hl com"> * &#64;return The FunctionCall instance.</span>
<span class="hl com"> */</span>
module<span class="hl opt">.</span>exports<span class="hl opt">.</span><span class="hl kwd">call</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>fn<span class="hl opt">,</span> vargs<span class="hl opt">,</span> callback<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> args <span class="hl opt">=</span> Array<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>slice<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span>arguments<span class="hl opt">);</span>
    fn <span class="hl opt">=</span> args<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">];</span>
    vargs <span class="hl opt">=</span> args<span class="hl opt">.</span><span class="hl kwd">slice</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span> args<span class="hl opt">.</span>length <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">);</span>
    callback <span class="hl opt">=</span> args<span class="hl opt">[</span>args<span class="hl opt">.</span>length <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">];</span>
    <span class="hl kwa">return new</span> <span class="hl kwd">FunctionCall</span><span class="hl opt">(</span>fn<span class="hl opt">,</span> vargs<span class="hl opt">,</span> callback<span class="hl opt">);</span>
<span class="hl opt">};</span>

<span class="hl opt">},{</span><span class="hl str">&quot;./lib/backoff&quot;</span><span class="hl opt">:</span><span class="hl num">22</span><span class="hl opt">,</span><span class="hl str">&quot;./lib/function_call.js&quot;</span><span class="hl opt">:</span><span class="hl num">23</span><span class="hl opt">,</span><span class="hl str">&quot;./lib/strategy/exponential&quot;</span><span class="hl opt">:</span><span class="hl num">24</span><span class="hl opt">,</span><span class="hl str">&quot;./lib/strategy/fibonacci&quot;</span><span class="hl opt">:</span><span class="hl num">25</span><span class="hl opt">}],</span><span class="hl num">22</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>require<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl com">/*</span>
<span class="hl com"> * Copyright (c) 2012 Mathieu Turcotte</span>
<span class="hl com"> * Licensed under the MIT license.</span>
<span class="hl com"> */</span>

<span class="hl kwa">var</span> events <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'events'</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> util <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'util'</span><span class="hl opt">);</span>

<span class="hl com">/**</span>
<span class="hl com"> * Backoff driver.</span>
<span class="hl com"> * &#64;param backoffStrategy Backoff delay generator/strategy.</span>
<span class="hl com"> * &#64;constructor</span>
<span class="hl com"> */</span>
<span class="hl kwa">function</span> <span class="hl kwd">Backoff</span><span class="hl opt">(</span>backoffStrategy<span class="hl opt">) {</span>
    events<span class="hl opt">.</span>EventEmitter<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">);</span>

    <span class="hl kwa">this</span><span class="hl opt">.</span>backoffStrategy_ <span class="hl opt">=</span> backoffStrategy<span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>maxNumberOfRetry_ <span class="hl opt">= -</span><span class="hl num">1</span><span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>backoffNumber_ <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>backoffDelay_ <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>timeoutID_ <span class="hl opt">= -</span><span class="hl num">1</span><span class="hl opt">;</span>

    <span class="hl kwa">this</span><span class="hl opt">.</span>handlers <span class="hl opt">= {</span>
        backoff<span class="hl opt">:</span> <span class="hl kwa">this</span><span class="hl opt">.</span>onBackoff_<span class="hl opt">.</span><span class="hl kwd">bind</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">)</span>
    <span class="hl opt">};</span>
<span class="hl opt">}</span>
util<span class="hl opt">.</span><span class="hl kwd">inherits</span><span class="hl opt">(</span>Backoff<span class="hl opt">,</span> events<span class="hl opt">.</span>EventEmitter<span class="hl opt">);</span>

<span class="hl com">/**</span>
<span class="hl com"> * Sets a limit, greater than 0, on the maximum number of backoffs. A 'fail'</span>
<span class="hl com"> * event will be emitted when the limit is reached.</span>
<span class="hl com"> * &#64;param maxNumberOfRetry The maximum number of backoffs.</span>
<span class="hl com"> */</span>
Backoff<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">failAfter</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>maxNumberOfRetry<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>maxNumberOfRetry <span class="hl opt">&lt;</span> <span class="hl num">1</span><span class="hl opt">) {</span>
        <span class="hl kwa">throw new</span> <span class="hl kwd">Error</span><span class="hl opt">(</span><span class="hl str">'Maximum number of retry must be greater than 0. '</span> <span class="hl opt">+</span>
                        <span class="hl str">'Actual: '</span> <span class="hl opt">+</span> maxNumberOfRetry<span class="hl opt">);</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">this</span><span class="hl opt">.</span>maxNumberOfRetry_ <span class="hl opt">=</span> maxNumberOfRetry<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl com">/**</span>
<span class="hl com"> * Starts a backoff operation.</span>
<span class="hl com"> * &#64;param err Optional paramater to let the listeners know why the backoff</span>
<span class="hl com"> *     operation was started.</span>
<span class="hl com"> */</span>
Backoff<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">backoff</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>err<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>timeoutID_ <span class="hl opt">!== -</span><span class="hl num">1</span><span class="hl opt">) {</span>
        <span class="hl kwa">throw new</span> <span class="hl kwd">Error</span><span class="hl opt">(</span><span class="hl str">'Backoff in progress.'</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>backoffNumber_ <span class="hl opt">===</span> <span class="hl kwa">this</span><span class="hl opt">.</span>maxNumberOfRetry_<span class="hl opt">) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">emit</span><span class="hl opt">(</span><span class="hl str">'fail'</span><span class="hl opt">,</span> err<span class="hl opt">);</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">reset</span><span class="hl opt">();</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>backoffDelay_ <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>backoffStrategy_<span class="hl opt">.</span><span class="hl kwd">next</span><span class="hl opt">();</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>timeoutID_ <span class="hl opt">=</span> <span class="hl kwd">setTimeout</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>handlers<span class="hl opt">.</span>backoff<span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">.</span>backoffDelay_<span class="hl opt">);</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">emit</span><span class="hl opt">(</span><span class="hl str">'backoff'</span><span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">.</span>backoffNumber_<span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">.</span>backoffDelay_<span class="hl opt">,</span> err<span class="hl opt">);</span>
    <span class="hl opt">}</span>
<span class="hl opt">};</span>

<span class="hl com">/**</span>
<span class="hl com"> * Handles the backoff timeout completion.</span>
<span class="hl com"> * &#64;private</span>
<span class="hl com"> */</span>
Backoff<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">onBackoff_</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>timeoutID_ <span class="hl opt">= -</span><span class="hl num">1</span><span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">emit</span><span class="hl opt">(</span><span class="hl str">'ready'</span><span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">.</span>backoffNumber_<span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">.</span>backoffDelay_<span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>backoffNumber_<span class="hl opt">++;</span>
<span class="hl opt">};</span>

<span class="hl com">/**</span>
<span class="hl com"> * Stops any backoff operation and resets the backoff delay to its inital</span>
<span class="hl com"> * value.</span>
<span class="hl com"> */</span>
Backoff<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">reset</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>backoffNumber_ <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>backoffStrategy_<span class="hl opt">.</span><span class="hl kwd">reset</span><span class="hl opt">();</span>
    <span class="hl kwd">clearTimeout</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>timeoutID_<span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>timeoutID_ <span class="hl opt">= -</span><span class="hl num">1</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

module<span class="hl opt">.</span>exports <span class="hl opt">=</span> Backoff<span class="hl opt">;</span>

<span class="hl opt">},{</span><span class="hl str">&quot;events&quot;</span><span class="hl opt">:</span><span class="hl num">131</span><span class="hl opt">,</span><span class="hl str">&quot;util&quot;</span><span class="hl opt">:</span><span class="hl num">256</span><span class="hl opt">}],</span><span class="hl num">23</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>require<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl com">/*</span>
<span class="hl com"> * Copyright (c) 2012 Mathieu Turcotte</span>
<span class="hl com"> * Licensed under the MIT license.</span>
<span class="hl com"> */</span>

<span class="hl kwa">var</span> events <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'events'</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> util <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'util'</span><span class="hl opt">);</span>

<span class="hl kwa">var</span> Backoff <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'./backoff'</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> FibonacciBackoffStrategy <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'./strategy/fibonacci'</span><span class="hl opt">);</span>

<span class="hl com">/**</span>
<span class="hl com"> * Returns true if the specified value is a function</span>
<span class="hl com"> * &#64;param val Variable to test.</span>
<span class="hl com"> * &#64;return Whether variable is a function.</span>
<span class="hl com"> */</span>
<span class="hl kwa">function</span> <span class="hl kwd">isFunction</span><span class="hl opt">(</span>val<span class="hl opt">) {</span>
    <span class="hl kwa">return typeof</span> val <span class="hl opt">==</span> <span class="hl str">'function'</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl com">/**</span>
<span class="hl com"> * Manages the calling of a function in a backoff loop.</span>
<span class="hl com"> * &#64;param fn Function to wrap in a backoff handler.</span>
<span class="hl com"> * &#64;param args Array of function's arguments.</span>
<span class="hl com"> * &#64;param callback Function's callback.</span>
<span class="hl com"> * &#64;constructor</span>
<span class="hl com"> */</span>
<span class="hl kwa">function</span> <span class="hl kwd">FunctionCall</span><span class="hl opt">(</span>fn<span class="hl opt">,</span> args<span class="hl opt">,</span> callback<span class="hl opt">) {</span>
    events<span class="hl opt">.</span>EventEmitter<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">);</span>

    <span class="hl kwa">if</span> <span class="hl opt">(!</span><span class="hl kwd">isFunction</span><span class="hl opt">(</span>fn<span class="hl opt">)) {</span>
        <span class="hl kwa">throw new</span> <span class="hl kwd">Error</span><span class="hl opt">(</span><span class="hl str">'fn should be a function.'</span> <span class="hl opt">+</span>
                        <span class="hl str">'Actual: '</span> <span class="hl opt">+</span> <span class="hl kwa">typeof</span> fn<span class="hl opt">);</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">if</span> <span class="hl opt">(!</span><span class="hl kwd">isFunction</span><span class="hl opt">(</span>callback<span class="hl opt">)) {</span>
        <span class="hl kwa">throw new</span> <span class="hl kwd">Error</span><span class="hl opt">(</span><span class="hl str">'callback should be a function.'</span> <span class="hl opt">+</span>
                        <span class="hl str">'Actual: '</span> <span class="hl opt">+</span> <span class="hl kwa">typeof</span> fn<span class="hl opt">);</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">this</span><span class="hl opt">.</span>function_ <span class="hl opt">=</span> fn<span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>arguments_ <span class="hl opt">=</span> args<span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>callback_ <span class="hl opt">=</span> callback<span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>results_ <span class="hl opt">= [];</span>

    <span class="hl kwa">this</span><span class="hl opt">.</span>backoff_ <span class="hl opt">=</span> <span class="hl kwa">null</span><span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>strategy_ <span class="hl opt">=</span> <span class="hl kwa">null</span><span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>failAfter_ <span class="hl opt">= -</span><span class="hl num">1</span><span class="hl opt">;</span>

    <span class="hl kwa">this</span><span class="hl opt">.</span>state_ <span class="hl opt">=</span> FunctionCall<span class="hl opt">.</span>State_<span class="hl opt">.</span>PENDING<span class="hl opt">;</span>
<span class="hl opt">}</span>
util<span class="hl opt">.</span><span class="hl kwd">inherits</span><span class="hl opt">(</span>FunctionCall<span class="hl opt">,</span> events<span class="hl opt">.</span>EventEmitter<span class="hl opt">);</span>

<span class="hl com">/**</span>
<span class="hl com"> * Enum of states in which the FunctionCall can be.</span>
<span class="hl com"> * &#64;private</span>
<span class="hl com"> */</span>
FunctionCall<span class="hl opt">.</span>State_ <span class="hl opt">= {</span>
    PENDING<span class="hl opt">:</span> <span class="hl num">0</span><span class="hl opt">,</span>
    RUNNING<span class="hl opt">:</span> <span class="hl num">1</span><span class="hl opt">,</span>
    COMPLETED<span class="hl opt">:</span> <span class="hl num">2</span><span class="hl opt">,</span>
    ABORTED<span class="hl opt">:</span> <span class="hl num">3</span>
<span class="hl opt">};</span>

<span class="hl com">/**</span>
<span class="hl com"> * &#64;return Whether the call is pending.</span>
<span class="hl com"> */</span>
FunctionCall<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">isPending</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span>state_ <span class="hl opt">==</span> FunctionCall<span class="hl opt">.</span>State_<span class="hl opt">.</span>PENDING<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl com">/**</span>
<span class="hl com"> * &#64;return Whether the call is in progress.</span>
<span class="hl com"> */</span>
FunctionCall<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">isRunning</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span>state_ <span class="hl opt">==</span> FunctionCall<span class="hl opt">.</span>State_<span class="hl opt">.</span>RUNNING<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl com">/**</span>
<span class="hl com"> * &#64;return Whether the call is completed.</span>
<span class="hl com"> */</span>
FunctionCall<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">isCompleted</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span>state_ <span class="hl opt">==</span> FunctionCall<span class="hl opt">.</span>State_<span class="hl opt">.</span>COMPLETED<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl com">/**</span>
<span class="hl com"> * &#64;return Whether the call is aborted.</span>
<span class="hl com"> */</span>
FunctionCall<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">isAborted</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span>state_ <span class="hl opt">==</span> FunctionCall<span class="hl opt">.</span>State_<span class="hl opt">.</span>ABORTED<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl com">/**</span>
<span class="hl com"> * Sets the backoff strategy.</span>
<span class="hl com"> * &#64;param strategy The backoff strategy to use.</span>
<span class="hl com"> * &#64;return Itself for chaining.</span>
<span class="hl com"> */</span>
FunctionCall<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">setStrategy</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>strategy<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">isPending</span><span class="hl opt">()) {</span>
        <span class="hl kwa">throw new</span> <span class="hl kwd">Error</span><span class="hl opt">(</span><span class="hl str">'FunctionCall in progress.'</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>strategy_ <span class="hl opt">=</span> strategy<span class="hl opt">;</span>
    <span class="hl kwa">return this</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl com">/**</span>
<span class="hl com"> * Returns all intermediary results returned by the wrapped function since</span>
<span class="hl com"> * the initial call.</span>
<span class="hl com"> * &#64;return An array of intermediary results.</span>
<span class="hl com"> */</span>
FunctionCall<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">getResults</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span>results_<span class="hl opt">.</span><span class="hl kwd">concat</span><span class="hl opt">();</span>
<span class="hl opt">};</span>

<span class="hl com">/**</span>
<span class="hl com"> * Sets the backoff limit.</span>
<span class="hl com"> * &#64;param maxNumberOfRetry The maximum number of backoffs.</span>
<span class="hl com"> * &#64;return Itself for chaining.</span>
<span class="hl com"> */</span>
FunctionCall<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">failAfter</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>maxNumberOfRetry<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">isPending</span><span class="hl opt">()) {</span>
        <span class="hl kwa">throw new</span> <span class="hl kwd">Error</span><span class="hl opt">(</span><span class="hl str">'FunctionCall in progress.'</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>failAfter_ <span class="hl opt">=</span> maxNumberOfRetry<span class="hl opt">;</span>
    <span class="hl kwa">return this</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl com">/**</span>
<span class="hl com"> * Aborts the call.</span>
<span class="hl com"> */</span>
FunctionCall<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">abort</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">isCompleted</span><span class="hl opt">()) {</span>
        <span class="hl kwa">throw new</span> <span class="hl kwd">Error</span><span class="hl opt">(</span><span class="hl str">'FunctionCall already completed.'</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">isRunning</span><span class="hl opt">()) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>backoff_<span class="hl opt">.</span><span class="hl kwd">reset</span><span class="hl opt">();</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">this</span><span class="hl opt">.</span>state_ <span class="hl opt">=</span> FunctionCall<span class="hl opt">.</span>State_<span class="hl opt">.</span>ABORTED<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl com">/**</span>
<span class="hl com"> * Initiates the call to the wrapped function.</span>
<span class="hl com"> * &#64;param backoffFactory Optional factory function used to create the backoff</span>
<span class="hl com"> *     instance.</span>
<span class="hl com"> */</span>
FunctionCall<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">start</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>backoffFactory<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">isAborted</span><span class="hl opt">()) {</span>
        <span class="hl kwa">throw new</span> <span class="hl kwd">Error</span><span class="hl opt">(</span><span class="hl str">'FunctionCall aborted.'</span><span class="hl opt">);</span>
    <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(!</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">isPending</span><span class="hl opt">()) {</span>
        <span class="hl kwa">throw new</span> <span class="hl kwd">Error</span><span class="hl opt">(</span><span class="hl str">'FunctionCall already started.'</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">var</span> strategy <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>strategy_ <span class="hl opt">||</span> <span class="hl kwa">new</span> <span class="hl kwd">FibonacciBackoffStrategy</span><span class="hl opt">();</span>

    <span class="hl kwa">this</span><span class="hl opt">.</span>backoff_ <span class="hl opt">=</span> backoffFactory <span class="hl opt">?</span>
        <span class="hl kwd">backoffFactory</span><span class="hl opt">(</span>strategy<span class="hl opt">) :</span>
        <span class="hl kwa">new</span> <span class="hl kwd">Backoff</span><span class="hl opt">(</span>strategy<span class="hl opt">);</span>

    <span class="hl kwa">this</span><span class="hl opt">.</span>backoff_<span class="hl opt">.</span><span class="hl kwd">on</span><span class="hl opt">(</span><span class="hl str">'ready'</span><span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">.</span>doCall_<span class="hl opt">.</span><span class="hl kwd">bind</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">));</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>backoff_<span class="hl opt">.</span><span class="hl kwd">on</span><span class="hl opt">(</span><span class="hl str">'fail'</span><span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">.</span>doCallback_<span class="hl opt">.</span><span class="hl kwd">bind</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">));</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>backoff_<span class="hl opt">.</span><span class="hl kwd">on</span><span class="hl opt">(</span><span class="hl str">'backoff'</span><span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">.</span>handleBackoff_<span class="hl opt">.</span><span class="hl kwd">bind</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">));</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>failAfter_ <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>backoff_<span class="hl opt">.</span><span class="hl kwd">failAfter</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>failAfter_<span class="hl opt">);</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">this</span><span class="hl opt">.</span>state_ <span class="hl opt">=</span> FunctionCall<span class="hl opt">.</span>State_<span class="hl opt">.</span>RUNNING<span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">doCall_</span><span class="hl opt">();</span>
<span class="hl opt">};</span>

<span class="hl com">/**</span>
<span class="hl com"> * Calls the wrapped function.</span>
<span class="hl com"> * &#64;private</span>
<span class="hl com"> */</span>
FunctionCall<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">doCall_</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
    <span class="hl kwa">var</span> eventArgs <span class="hl opt">= [</span><span class="hl str">'call'</span><span class="hl opt">].</span><span class="hl kwd">concat</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>arguments_<span class="hl opt">);</span>
    events<span class="hl opt">.</span>EventEmitter<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>emit<span class="hl opt">.</span><span class="hl kwd">apply</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> eventArgs<span class="hl opt">);</span>
    <span class="hl kwa">var</span> callback <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>handleFunctionCallback_<span class="hl opt">.</span><span class="hl kwd">bind</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>function_<span class="hl opt">.</span><span class="hl kwd">apply</span><span class="hl opt">(</span><span class="hl kwa">null</span><span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">.</span>arguments_<span class="hl opt">.</span><span class="hl kwd">concat</span><span class="hl opt">(</span>callback<span class="hl opt">));</span>
<span class="hl opt">};</span>

<span class="hl com">/**</span>
<span class="hl com"> * Calls the wrapped function's callback with the last result returned by the</span>
<span class="hl com"> * wrapped function.</span>
<span class="hl com"> * &#64;private</span>
<span class="hl com"> */</span>
FunctionCall<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">doCallback_</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
    <span class="hl kwa">var</span> args <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>results_<span class="hl opt">[</span><span class="hl kwa">this</span><span class="hl opt">.</span>results_<span class="hl opt">.</span>length <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">];</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>callback_<span class="hl opt">.</span><span class="hl kwd">apply</span><span class="hl opt">(</span><span class="hl kwa">null</span><span class="hl opt">,</span> args<span class="hl opt">);</span>
<span class="hl opt">};</span>

<span class="hl com">/**</span>
<span class="hl com"> * Handles wrapped function's completion. This method acts as a replacement</span>
<span class="hl com"> * for the original callback function.</span>
<span class="hl com"> * &#64;private</span>
<span class="hl com"> */</span>
FunctionCall<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">handleFunctionCallback_</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">isAborted</span><span class="hl opt">()) {</span>
        <span class="hl kwa">return</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">var</span> args <span class="hl opt">=</span> Array<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>slice<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span>arguments<span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>results_<span class="hl opt">.</span><span class="hl kwd">push</span><span class="hl opt">(</span>args<span class="hl opt">);</span> <span class="hl slc">// Save callback arguments.</span>
    events<span class="hl opt">.</span>EventEmitter<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>emit<span class="hl opt">.</span><span class="hl kwd">apply</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">, [</span><span class="hl str">'callback'</span><span class="hl opt">].</span><span class="hl kwd">concat</span><span class="hl opt">(</span>args<span class="hl opt">));</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>args<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>backoff_<span class="hl opt">.</span><span class="hl kwd">backoff</span><span class="hl opt">(</span>args<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]);</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>state_ <span class="hl opt">=</span> FunctionCall<span class="hl opt">.</span>State_<span class="hl opt">.</span>COMPLETED<span class="hl opt">;</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">doCallback_</span><span class="hl opt">();</span>
    <span class="hl opt">}</span>
<span class="hl opt">};</span>

<span class="hl com">/**</span>
<span class="hl com"> * Handles backoff event.</span>
<span class="hl com"> * &#64;param number Backoff number.</span>
<span class="hl com"> * &#64;param delay Backoff delay.</span>
<span class="hl com"> * &#64;param err The error that caused the backoff.</span>
<span class="hl com"> * &#64;private</span>
<span class="hl com"> */</span>
FunctionCall<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">handleBackoff_</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>number<span class="hl opt">,</span> delay<span class="hl opt">,</span> err<span class="hl opt">) {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">emit</span><span class="hl opt">(</span><span class="hl str">'backoff'</span><span class="hl opt">,</span> number<span class="hl opt">,</span> delay<span class="hl opt">,</span> err<span class="hl opt">);</span>
<span class="hl opt">};</span>

module<span class="hl opt">.</span>exports <span class="hl opt">=</span> FunctionCall<span class="hl opt">;</span>

<span class="hl opt">},{</span><span class="hl str">&quot;./backoff&quot;</span><span class="hl opt">:</span><span class="hl num">22</span><span class="hl opt">,</span><span class="hl str">&quot;./strategy/fibonacci&quot;</span><span class="hl opt">:</span><span class="hl num">25</span><span class="hl opt">,</span><span class="hl str">&quot;events&quot;</span><span class="hl opt">:</span><span class="hl num">131</span><span class="hl opt">,</span><span class="hl str">&quot;util&quot;</span><span class="hl opt">:</span><span class="hl num">256</span><span class="hl opt">}],</span><span class="hl num">24</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>require<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl com">/*</span>
<span class="hl com"> * Copyright (c) 2012 Mathieu Turcotte</span>
<span class="hl com"> * Licensed under the MIT license.</span>
<span class="hl com"> */</span>

<span class="hl kwa">var</span> util <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'util'</span><span class="hl opt">);</span>

<span class="hl kwa">var</span> BackoffStrategy <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'./strategy'</span><span class="hl opt">);</span>

<span class="hl com">/**</span>
<span class="hl com"> * Exponential backoff strategy.</span>
<span class="hl com"> * &#64;extends BackoffStrategy</span>
<span class="hl com"> */</span>
<span class="hl kwa">function</span> <span class="hl kwd">ExponentialBackoffStrategy</span><span class="hl opt">(</span>options<span class="hl opt">) {</span>
    BackoffStrategy<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> options<span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>backoffDelay_ <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>nextBackoffDelay_ <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">getInitialDelay</span><span class="hl opt">();</span>
<span class="hl opt">}</span>
util<span class="hl opt">.</span><span class="hl kwd">inherits</span><span class="hl opt">(</span>ExponentialBackoffStrategy<span class="hl opt">,</span> BackoffStrategy<span class="hl opt">);</span>

<span class="hl com">/** &#64;inheritDoc */</span>
ExponentialBackoffStrategy<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">next_</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>backoffDelay_ <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">min</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>nextBackoffDelay_<span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">getMaxDelay</span><span class="hl opt">());</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>nextBackoffDelay_ <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>backoffDelay_ <span class="hl opt">*</span> <span class="hl num">2</span><span class="hl opt">;</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span>backoffDelay_<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl com">/** &#64;inheritDoc */</span>
ExponentialBackoffStrategy<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">reset_</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>backoffDelay_ <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>nextBackoffDelay_ <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">getInitialDelay</span><span class="hl opt">();</span>
<span class="hl opt">};</span>

module<span class="hl opt">.</span>exports <span class="hl opt">=</span> ExponentialBackoffStrategy<span class="hl opt">;</span>

<span class="hl opt">},{</span><span class="hl str">&quot;./strategy&quot;</span><span class="hl opt">:</span><span class="hl num">26</span><span class="hl opt">,</span><span class="hl str">&quot;util&quot;</span><span class="hl opt">:</span><span class="hl num">256</span><span class="hl opt">}],</span><span class="hl num">25</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>require<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl com">/*</span>
<span class="hl com"> * Copyright (c) 2012 Mathieu Turcotte</span>
<span class="hl com"> * Licensed under the MIT license.</span>
<span class="hl com"> */</span>

<span class="hl kwa">var</span> util <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'util'</span><span class="hl opt">);</span>

<span class="hl kwa">var</span> BackoffStrategy <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'./strategy'</span><span class="hl opt">);</span>

<span class="hl com">/**</span>
<span class="hl com"> * Fibonacci backoff strategy.</span>
<span class="hl com"> * &#64;extends BackoffStrategy</span>
<span class="hl com"> */</span>
<span class="hl kwa">function</span> <span class="hl kwd">FibonacciBackoffStrategy</span><span class="hl opt">(</span>options<span class="hl opt">) {</span>
    BackoffStrategy<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> options<span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>backoffDelay_ <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>nextBackoffDelay_ <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">getInitialDelay</span><span class="hl opt">();</span>
<span class="hl opt">}</span>
util<span class="hl opt">.</span><span class="hl kwd">inherits</span><span class="hl opt">(</span>FibonacciBackoffStrategy<span class="hl opt">,</span> BackoffStrategy<span class="hl opt">);</span>

<span class="hl com">/** &#64;inheritDoc */</span>
FibonacciBackoffStrategy<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">next_</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
    <span class="hl kwa">var</span> backoffDelay <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">min</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>nextBackoffDelay_<span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">getMaxDelay</span><span class="hl opt">());</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>nextBackoffDelay_ <span class="hl opt">+=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>backoffDelay_<span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>backoffDelay_ <span class="hl opt">=</span> backoffDelay<span class="hl opt">;</span>
    <span class="hl kwa">return</span> backoffDelay<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl com">/** &#64;inheritDoc */</span>
FibonacciBackoffStrategy<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">reset_</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>nextBackoffDelay_ <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">getInitialDelay</span><span class="hl opt">();</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>backoffDelay_ <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

module<span class="hl opt">.</span>exports <span class="hl opt">=</span> FibonacciBackoffStrategy<span class="hl opt">;</span>

<span class="hl opt">},{</span><span class="hl str">&quot;./strategy&quot;</span><span class="hl opt">:</span><span class="hl num">26</span><span class="hl opt">,</span><span class="hl str">&quot;util&quot;</span><span class="hl opt">:</span><span class="hl num">256</span><span class="hl opt">}],</span><span class="hl num">26</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>require<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl com">/*</span>
<span class="hl com"> * Copyright (c) 2012 Mathieu Turcotte</span>
<span class="hl com"> * Licensed under the MIT license.</span>
<span class="hl com"> */</span>

<span class="hl kwa">var</span> events <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'events'</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> util <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'util'</span><span class="hl opt">);</span>

<span class="hl kwa">function</span> <span class="hl kwd">isDef</span><span class="hl opt">(</span>value<span class="hl opt">) {</span>
    <span class="hl kwa">return</span> value <span class="hl opt">!==</span> undefined <span class="hl opt">&amp;&amp;</span> value <span class="hl opt">!==</span> <span class="hl kwa">null</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl com">/**</span>
<span class="hl com"> * Abstract class defining the skeleton for all backoff strategies.</span>
<span class="hl com"> * &#64;param options Backoff strategy options.</span>
<span class="hl com"> * &#64;param options.randomisationFactor The randomisation factor, must be between</span>
<span class="hl com"> * 0 and 1.</span>
<span class="hl com"> * &#64;param options.initialDelay The backoff initial delay, in milliseconds.</span>
<span class="hl com"> * &#64;param options.maxDelay The backoff maximal delay, in milliseconds.</span>
<span class="hl com"> * &#64;constructor</span>
<span class="hl com"> */</span>
<span class="hl kwa">function</span> <span class="hl kwd">BackoffStrategy</span><span class="hl opt">(</span>options<span class="hl opt">) {</span>
    options <span class="hl opt">=</span> options <span class="hl opt">|| {};</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">isDef</span><span class="hl opt">(</span>options<span class="hl opt">.</span>initialDelay<span class="hl opt">) &amp;&amp;</span> options<span class="hl opt">.</span>initialDelay <span class="hl opt">&lt;</span> <span class="hl num">1</span><span class="hl opt">) {</span>
        <span class="hl kwa">throw new</span> <span class="hl kwd">Error</span><span class="hl opt">(</span><span class="hl str">'The initial timeout must be greater than 0.'</span><span class="hl opt">);</span>
    <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span><span class="hl kwd">isDef</span><span class="hl opt">(</span>options<span class="hl opt">.</span>maxDelay<span class="hl opt">) &amp;&amp;</span> options<span class="hl opt">.</span>maxDelay <span class="hl opt">&lt;</span> <span class="hl num">1</span><span class="hl opt">) {</span>
        <span class="hl kwa">throw new</span> <span class="hl kwd">Error</span><span class="hl opt">(</span><span class="hl str">'The maximal timeout must be greater than 0.'</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">this</span><span class="hl opt">.</span>initialDelay_ <span class="hl opt">=</span> options<span class="hl opt">.</span>initialDelay <span class="hl opt">||</span> <span class="hl num">100</span><span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>maxDelay_ <span class="hl opt">=</span> options<span class="hl opt">.</span>maxDelay <span class="hl opt">||</span> <span class="hl num">10000</span><span class="hl opt">;</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>maxDelay_ <span class="hl opt">&lt;=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>initialDelay_<span class="hl opt">) {</span>
        <span class="hl kwa">throw new</span> <span class="hl kwd">Error</span><span class="hl opt">(</span><span class="hl str">'The maximal backoff delay must be '</span> <span class="hl opt">+</span>
                        <span class="hl str">'greater than the initial backoff delay.'</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">isDef</span><span class="hl opt">(</span>options<span class="hl opt">.</span>randomisationFactor<span class="hl opt">) &amp;&amp;</span>
        <span class="hl opt">(</span>options<span class="hl opt">.</span>randomisationFactor <span class="hl opt">&lt;</span> <span class="hl num">0</span> <span class="hl opt">||</span> options<span class="hl opt">.</span>randomisationFactor <span class="hl opt">&gt;</span> <span class="hl num">1</span><span class="hl opt">)) {</span>
        <span class="hl kwa">throw new</span> <span class="hl kwd">Error</span><span class="hl opt">(</span><span class="hl str">'The randomisation factor must be between 0 and 1.'</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">this</span><span class="hl opt">.</span>randomisationFactor_ <span class="hl opt">=</span> options<span class="hl opt">.</span>randomisationFactor <span class="hl opt">||</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl com">/**</span>
<span class="hl com"> * Retrieves the maximal backoff delay.</span>
<span class="hl com"> * &#64;return The maximal backoff delay, in milliseconds.</span>
<span class="hl com"> */</span>
BackoffStrategy<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">getMaxDelay</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span>maxDelay_<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl com">/**</span>
<span class="hl com"> * Retrieves the initial backoff delay.</span>
<span class="hl com"> * &#64;return The initial backoff delay, in milliseconds.</span>
<span class="hl com"> */</span>
BackoffStrategy<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">getInitialDelay</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span>initialDelay_<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl com">/**</span>
<span class="hl com"> * Template method that computes the next backoff delay.</span>
<span class="hl com"> * &#64;return The backoff delay, in milliseconds.</span>
<span class="hl com"> */</span>
BackoffStrategy<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">next</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
    <span class="hl kwa">var</span> backoffDelay <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">next_</span><span class="hl opt">();</span>
    <span class="hl kwa">var</span> randomisationMultiple <span class="hl opt">=</span> <span class="hl num">1</span> <span class="hl opt">+</span> Math<span class="hl opt">.</span><span class="hl kwd">random</span><span class="hl opt">() *</span> <span class="hl kwa">this</span><span class="hl opt">.</span>randomisationFactor_<span class="hl opt">;</span>
    <span class="hl kwa">var</span> randomizedDelay <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">round</span><span class="hl opt">(</span>backoffDelay <span class="hl opt">*</span> randomisationMultiple<span class="hl opt">);</span>
    <span class="hl kwa">return</span> randomizedDelay<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl com">/**</span>
<span class="hl com"> * Computes the next backoff delay.</span>
<span class="hl com"> * &#64;return The backoff delay, in milliseconds.</span>
<span class="hl com"> * &#64;protected</span>
<span class="hl com"> */</span>
BackoffStrategy<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">next_</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
    <span class="hl kwa">throw new</span> <span class="hl kwd">Error</span><span class="hl opt">(</span><span class="hl str">'BackoffStrategy.next_() unimplemented.'</span><span class="hl opt">);</span>
<span class="hl opt">};</span>

<span class="hl com">/**</span>
<span class="hl com"> * Template method that resets the backoff delay to its initial value.</span>
<span class="hl com"> */</span>
BackoffStrategy<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">reset</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">reset_</span><span class="hl opt">();</span>
<span class="hl opt">};</span>

<span class="hl com">/**</span>
<span class="hl com"> * Resets the backoff delay to its initial value.</span>
<span class="hl com"> * &#64;protected</span>
<span class="hl com"> */</span>
BackoffStrategy<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">reset_</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
    <span class="hl kwa">throw new</span> <span class="hl kwd">Error</span><span class="hl opt">(</span><span class="hl str">'BackoffStrategy.reset_() unimplemented.'</span><span class="hl opt">);</span>
<span class="hl opt">};</span>

module<span class="hl opt">.</span>exports <span class="hl opt">=</span> BackoffStrategy<span class="hl opt">;</span>

<span class="hl opt">},{</span><span class="hl str">&quot;events&quot;</span><span class="hl opt">:</span><span class="hl num">131</span><span class="hl opt">,</span><span class="hl str">&quot;util&quot;</span><span class="hl opt">:</span><span class="hl num">256</span><span class="hl opt">}],</span><span class="hl num">27</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>require<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl com">/*!</span>
<span class="hl com">  * Bean - copyright (c) Jacob Thornton 2011-2012</span>
<span class="hl com">  * https://github.com/fat/bean</span>
<span class="hl com">  * MIT license</span>
<span class="hl com">  */</span>
<span class="hl opt">(</span><span class="hl kwa">function</span> <span class="hl opt">(</span>name<span class="hl opt">,</span> context<span class="hl opt">,</span> definition<span class="hl opt">) {</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> module <span class="hl opt">!=</span> <span class="hl str">'undefined'</span> <span class="hl opt">&amp;&amp;</span> module<span class="hl opt">.</span>exports<span class="hl opt">)</span> module<span class="hl opt">.</span>exports <span class="hl opt">=</span> <span class="hl kwd">definition</span><span class="hl opt">()</span>
  <span class="hl kwa">else if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> define <span class="hl opt">==</span> <span class="hl str">'function'</span> <span class="hl opt">&amp;&amp;</span> define<span class="hl opt">.</span>amd<span class="hl opt">)</span> <span class="hl kwd">define</span><span class="hl opt">(</span>definition<span class="hl opt">)</span>
  <span class="hl kwa">else</span> context<span class="hl opt">[</span>name<span class="hl opt">] =</span> <span class="hl kwd">definition</span><span class="hl opt">()</span>
<span class="hl opt">})(</span><span class="hl str">'bean'</span><span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">,</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>name<span class="hl opt">,</span> context<span class="hl opt">) {</span>
  name    <span class="hl opt">=</span> name    <span class="hl opt">||</span> <span class="hl str">'bean'</span>
  context <span class="hl opt">=</span> context <span class="hl opt">||</span> <span class="hl kwa">this</span>

  <span class="hl kwa">var</span> win            <span class="hl opt">=</span> window
    <span class="hl opt">,</span> old            <span class="hl opt">=</span> context<span class="hl opt">[</span>name<span class="hl opt">]</span>
    <span class="hl opt">,</span> namespaceRegex <span class="hl opt">=</span> <span class="hl kwc">/[^\.]*(?=\..*)\.|.*/</span>
    <span class="hl opt">,</span> nameRegex      <span class="hl opt">=</span> <span class="hl kwc">/\..*/</span>
    <span class="hl opt">,</span> addEvent       <span class="hl opt">=</span> <span class="hl str">'addEventListener'</span>
    <span class="hl opt">,</span> removeEvent    <span class="hl opt">=</span> <span class="hl str">'removeEventListener'</span>
    <span class="hl opt">,</span> doc            <span class="hl opt">=</span> document <span class="hl opt">|| {}</span>
    <span class="hl opt">,</span> root           <span class="hl opt">=</span> doc<span class="hl opt">.</span>documentElement <span class="hl opt">|| {}</span>
    <span class="hl opt">,</span> W3C_MODEL      <span class="hl opt">=</span> root<span class="hl opt">[</span>addEvent<span class="hl opt">]</span>
    <span class="hl opt">,</span> eventSupport   <span class="hl opt">=</span> W3C_MODEL <span class="hl opt">?</span> addEvent <span class="hl opt">:</span> <span class="hl str">'attachEvent'</span>
    <span class="hl opt">,</span> ONE            <span class="hl opt">= {}</span> <span class="hl slc">// singleton for quick matching making add() do one()</span>

    <span class="hl opt">,</span> slice          <span class="hl opt">=</span> Array<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>slice
    <span class="hl opt">,</span> <span class="hl kwd">str2arr</span>        <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>s<span class="hl opt">,</span> d<span class="hl opt">) {</span> <span class="hl kwa">return</span> s<span class="hl opt">.</span><span class="hl kwd">split</span><span class="hl opt">(</span>d <span class="hl opt">||</span> <span class="hl str">' '</span><span class="hl opt">) }</span>
    <span class="hl opt">,</span> <span class="hl kwd">isString</span>       <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>o<span class="hl opt">) {</span> <span class="hl kwa">return typeof</span> o <span class="hl opt">==</span> <span class="hl str">'string'</span> <span class="hl opt">}</span>
    <span class="hl opt">,</span> <span class="hl kwd">isFunction</span>     <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>o<span class="hl opt">) {</span> <span class="hl kwa">return typeof</span> o <span class="hl opt">==</span> <span class="hl str">'function'</span> <span class="hl opt">}</span>

      <span class="hl slc">// events that we consider to be 'native', anything not in this list will</span>
      <span class="hl slc">// be treated as a custom event</span>
    <span class="hl opt">,</span> standardNativeEvents <span class="hl opt">=</span>
        <span class="hl str">'click dblclick mouseup mousedown contextmenu '</span>                  <span class="hl opt">+</span> <span class="hl slc">// mouse buttons</span>
        <span class="hl str">'mousewheel mousemultiwheel DOMMouseScroll '</span>                     <span class="hl opt">+</span> <span class="hl slc">// mouse wheel</span>
        <span class="hl str">'mouseover mouseout mousemove selectstart selectend '</span>            <span class="hl opt">+</span> <span class="hl slc">// mouse movement</span>
        <span class="hl str">'keydown keypress keyup '</span>                                        <span class="hl opt">+</span> <span class="hl slc">// keyboard</span>
        <span class="hl str">'orientationchange '</span>                                             <span class="hl opt">+</span> <span class="hl slc">// mobile</span>
        <span class="hl str">'focus blur change reset select submit '</span>                         <span class="hl opt">+</span> <span class="hl slc">// form elements</span>
        <span class="hl str">'load unload beforeunload resize move DOMContentLoaded '</span>         <span class="hl opt">+</span> <span class="hl slc">// window</span>
        <span class="hl str">'readystatechange message '</span>                                      <span class="hl opt">+</span> <span class="hl slc">// window</span>
        <span class="hl str">'error abort scroll '</span>                                              <span class="hl slc">// misc</span>
      <span class="hl slc">// element.fireEvent('onXYZ'... is not forgiving if we try to fire an event</span>
      <span class="hl slc">// that doesn't actually exist, so make sure we only do these on newer browsers</span>
    <span class="hl opt">,</span> w3cNativeEvents <span class="hl opt">=</span>
        <span class="hl str">'show '</span>                                                          <span class="hl opt">+</span> <span class="hl slc">// mouse buttons</span>
        <span class="hl str">'input invalid '</span>                                                 <span class="hl opt">+</span> <span class="hl slc">// form elements</span>
        <span class="hl str">'touchstart touchmove touchend touchcancel '</span>                     <span class="hl opt">+</span> <span class="hl slc">// touch</span>
        <span class="hl str">'gesturestart gesturechange gestureend '</span>                         <span class="hl opt">+</span> <span class="hl slc">// gesture</span>
        <span class="hl str">'textinput '</span>                                                     <span class="hl opt">+</span> <span class="hl slc">// TextEvent</span>
        <span class="hl str">'readystatechange pageshow pagehide popstate '</span>                   <span class="hl opt">+</span> <span class="hl slc">// window</span>
        <span class="hl str">'hashchange offline online '</span>                                     <span class="hl opt">+</span> <span class="hl slc">// window</span>
        <span class="hl str">'afterprint beforeprint '</span>                                        <span class="hl opt">+</span> <span class="hl slc">// printing</span>
        <span class="hl str">'dragstart dragenter dragover dragleave drag drop dragend '</span>      <span class="hl opt">+</span> <span class="hl slc">// dnd</span>
        <span class="hl str">'loadstart progress suspend emptied stalled loadmetadata '</span>       <span class="hl opt">+</span> <span class="hl slc">// media</span>
        <span class="hl str">'loadeddata canplay canplaythrough playing waiting seeking '</span>     <span class="hl opt">+</span> <span class="hl slc">// media</span>
        <span class="hl str">'seeked ended durationchange timeupdate play pause ratechange '</span>  <span class="hl opt">+</span> <span class="hl slc">// media</span>
        <span class="hl str">'volumechange cuechange '</span>                                        <span class="hl opt">+</span> <span class="hl slc">// media</span>
        <span class="hl str">'checking noupdate downloading cached updateready obsolete '</span>       <span class="hl slc">// appcache</span>

      <span class="hl slc">// convert to a hash for quick lookups</span>
    <span class="hl opt">,</span> nativeEvents <span class="hl opt">= (</span><span class="hl kwa">function</span> <span class="hl opt">(</span>hash<span class="hl opt">,</span> events<span class="hl opt">,</span> i<span class="hl opt">) {</span>
        <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> events<span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">++)</span> events<span class="hl opt">[</span>i<span class="hl opt">] &amp;&amp; (</span>hash<span class="hl opt">[</span>events<span class="hl opt">[</span>i<span class="hl opt">]] =</span> <span class="hl num">1</span><span class="hl opt">)</span>
        <span class="hl kwa">return</span> hash
      <span class="hl opt">}({},</span> <span class="hl kwd">str2arr</span><span class="hl opt">(</span>standardNativeEvents <span class="hl opt">+ (</span>W3C_MODEL <span class="hl opt">?</span> w3cNativeEvents <span class="hl opt">:</span> <span class="hl str">''</span><span class="hl opt">))))</span>

      <span class="hl slc">// custom events are events that we *fake*, they are not provided natively but</span>
      <span class="hl slc">// we can use native events to generate them</span>
    <span class="hl opt">,</span> customEvents <span class="hl opt">= (</span><span class="hl kwa">function</span> <span class="hl opt">() {</span>
        <span class="hl kwa">var</span> isAncestor <span class="hl opt">=</span> <span class="hl str">'compareDocumentPosition'</span> <span class="hl kwa">in</span> root
              <span class="hl opt">?</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>element<span class="hl opt">,</span> container<span class="hl opt">) {</span>
                  <span class="hl kwa">return</span> container<span class="hl opt">.</span>compareDocumentPosition <span class="hl opt">&amp;&amp; (</span>container<span class="hl opt">.</span><span class="hl kwd">compareDocumentPosition</span><span class="hl opt">(</span>element<span class="hl opt">) &amp;</span> <span class="hl num">16</span><span class="hl opt">) ===</span> <span class="hl num">16</span>
                <span class="hl opt">}</span>
              <span class="hl opt">:</span> <span class="hl str">'contains'</span> <span class="hl kwa">in</span> root
                <span class="hl opt">?</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>element<span class="hl opt">,</span> container<span class="hl opt">) {</span>
                    container <span class="hl opt">=</span> container<span class="hl opt">.</span>nodeType <span class="hl opt">===</span> <span class="hl num">9</span> <span class="hl opt">||</span> container <span class="hl opt">===</span> window <span class="hl opt">?</span> root <span class="hl opt">:</span> container
                    <span class="hl kwa">return</span> container <span class="hl opt">!==</span> element <span class="hl opt">&amp;&amp;</span> container<span class="hl opt">.</span><span class="hl kwd">contains</span><span class="hl opt">(</span>element<span class="hl opt">)</span>
                  <span class="hl opt">}</span>
                <span class="hl opt">:</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>element<span class="hl opt">,</span> container<span class="hl opt">) {</span>
                    <span class="hl kwa">while</span> <span class="hl opt">(</span>element <span class="hl opt">=</span> element<span class="hl opt">.</span>parentNode<span class="hl opt">)</span> <span class="hl kwa">if</span> <span class="hl opt">(</span>element <span class="hl opt">===</span> container<span class="hl opt">)</span> <span class="hl kwa">return</span> <span class="hl num">1</span>
                    <span class="hl kwa">return</span> <span class="hl num">0</span>
                  <span class="hl opt">}</span>
          <span class="hl opt">,</span> <span class="hl kwd">check</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>event<span class="hl opt">) {</span>
              <span class="hl kwa">var</span> related <span class="hl opt">=</span> event<span class="hl opt">.</span>relatedTarget
              <span class="hl kwa">return</span> <span class="hl opt">!</span>related
                <span class="hl opt">?</span> related <span class="hl opt">==</span> <span class="hl kwa">null</span>
                <span class="hl opt">: (</span>related <span class="hl opt">!==</span> <span class="hl kwa">this</span> <span class="hl opt">&amp;&amp;</span> related<span class="hl opt">.</span>prefix <span class="hl opt">!==</span> <span class="hl str">'xul'</span> <span class="hl opt">&amp;&amp; !</span><span class="hl kwc">/document/</span><span class="hl opt">.</span><span class="hl kwd">test</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">toString</span><span class="hl opt">())</span>
                    <span class="hl opt">&amp;&amp; !</span><span class="hl kwd">isAncestor</span><span class="hl opt">(</span>related<span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">))</span>
            <span class="hl opt">}</span>

        <span class="hl kwa">return</span> <span class="hl opt">{</span>
            mouseenter<span class="hl opt">: {</span> base<span class="hl opt">:</span> <span class="hl str">'mouseover'</span><span class="hl opt">,</span> condition<span class="hl opt">:</span> check <span class="hl opt">}</span>
          <span class="hl opt">,</span> mouseleave<span class="hl opt">: {</span> base<span class="hl opt">:</span> <span class="hl str">'mouseout'</span><span class="hl opt">,</span> condition<span class="hl opt">:</span> check <span class="hl opt">}</span>
          <span class="hl opt">,</span> mousewheel<span class="hl opt">: {</span> base<span class="hl opt">:</span> <span class="hl kwc">/Firefox/</span><span class="hl opt">.</span><span class="hl kwd">test</span><span class="hl opt">(</span>navigator<span class="hl opt">.</span>userAgent<span class="hl opt">) ?</span> <span class="hl str">'DOMMouseScroll'</span> <span class="hl opt">:</span> <span class="hl str">'mousewheel'</span> <span class="hl opt">}</span>
        <span class="hl opt">}</span>
      <span class="hl opt">}())</span>

      <span class="hl slc">// we provide a consistent Event object across browsers by taking the actual DOM</span>
      <span class="hl slc">// event object and generating a new one from its properties.</span>
    <span class="hl opt">,</span> Event <span class="hl opt">= (</span><span class="hl kwa">function</span> <span class="hl opt">() {</span>
            <span class="hl slc">// a whitelist of properties (for different event types) tells us what to check for and copy</span>
        <span class="hl kwa">var</span> commonProps  <span class="hl opt">=</span> <span class="hl kwd">str2arr</span><span class="hl opt">(</span><span class="hl str">'altKey attrChange attrName bubbles cancelable ctrlKey currentTarget '</span> <span class="hl opt">+</span>
              <span class="hl str">'detail eventPhase getModifierState isTrusted metaKey relatedNode relatedTarget shiftKey '</span>  <span class="hl opt">+</span>
              <span class="hl str">'srcElement target timeStamp type view which propertyName'</span><span class="hl opt">)</span>
          <span class="hl opt">,</span> mouseProps   <span class="hl opt">=</span> commonProps<span class="hl opt">.</span><span class="hl kwd">concat</span><span class="hl opt">(</span><span class="hl kwd">str2arr</span><span class="hl opt">(</span><span class="hl str">'button buttons clientX clientY dataTransfer '</span>      <span class="hl opt">+</span>
              <span class="hl str">'fromElement offsetX offsetY pageX pageY screenX screenY toElement'</span><span class="hl opt">))</span>
          <span class="hl opt">,</span> mouseWheelProps <span class="hl opt">=</span> mouseProps<span class="hl opt">.</span><span class="hl kwd">concat</span><span class="hl opt">(</span><span class="hl kwd">str2arr</span><span class="hl opt">(</span><span class="hl str">'wheelDelta wheelDeltaX wheelDeltaY wheelDeltaZ '</span> <span class="hl opt">+</span>
              <span class="hl str">'axis'</span><span class="hl opt">))</span> <span class="hl slc">// 'axis' is FF specific</span>
          <span class="hl opt">,</span> keyProps     <span class="hl opt">=</span> commonProps<span class="hl opt">.</span><span class="hl kwd">concat</span><span class="hl opt">(</span><span class="hl kwd">str2arr</span><span class="hl opt">(</span><span class="hl str">'char charCode key keyCode keyIdentifier '</span>          <span class="hl opt">+</span>
              <span class="hl str">'keyLocation location'</span><span class="hl opt">))</span>
          <span class="hl opt">,</span> textProps    <span class="hl opt">=</span> commonProps<span class="hl opt">.</span><span class="hl kwd">concat</span><span class="hl opt">(</span><span class="hl kwd">str2arr</span><span class="hl opt">(</span><span class="hl str">'data'</span><span class="hl opt">))</span>
          <span class="hl opt">,</span> touchProps   <span class="hl opt">=</span> commonProps<span class="hl opt">.</span><span class="hl kwd">concat</span><span class="hl opt">(</span><span class="hl kwd">str2arr</span><span class="hl opt">(</span><span class="hl str">'touches targetTouches changedTouches scale rotation'</span><span class="hl opt">))</span>
          <span class="hl opt">,</span> messageProps <span class="hl opt">=</span> commonProps<span class="hl opt">.</span><span class="hl kwd">concat</span><span class="hl opt">(</span><span class="hl kwd">str2arr</span><span class="hl opt">(</span><span class="hl str">'data origin source'</span><span class="hl opt">))</span>
          <span class="hl opt">,</span> stateProps   <span class="hl opt">=</span> commonProps<span class="hl opt">.</span><span class="hl kwd">concat</span><span class="hl opt">(</span><span class="hl kwd">str2arr</span><span class="hl opt">(</span><span class="hl str">'state'</span><span class="hl opt">))</span>
          <span class="hl opt">,</span> overOutRegex <span class="hl opt">=</span> <span class="hl kwc">/over|out/</span>
            <span class="hl slc">// some event types need special handling and some need special properties, do that all here</span>
          <span class="hl opt">,</span> typeFixers   <span class="hl opt">= [</span>
                <span class="hl opt">{</span> <span class="hl slc">// key events</span>
                    reg<span class="hl opt">:</span> <span class="hl kwc">/key/i</span>
                  <span class="hl opt">,</span> <span class="hl kwd">fix</span><span class="hl opt">:</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>event<span class="hl opt">,</span> newEvent<span class="hl opt">) {</span>
                      newEvent<span class="hl opt">.</span>keyCode <span class="hl opt">=</span> event<span class="hl opt">.</span>keyCode <span class="hl opt">||</span> event<span class="hl opt">.</span>which
                      <span class="hl kwa">return</span> keyProps
                    <span class="hl opt">}</span>
                <span class="hl opt">}</span>
              <span class="hl opt">, {</span> <span class="hl slc">// mouse events</span>
                    reg<span class="hl opt">:</span> <span class="hl kwc">/click|mouse(?!(.*wheel|scroll))|menu|drag|drop/i</span>
                  <span class="hl opt">,</span> <span class="hl kwd">fix</span><span class="hl opt">:</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>event<span class="hl opt">,</span> newEvent<span class="hl opt">,</span> type<span class="hl opt">) {</span>
                      newEvent<span class="hl opt">.</span>rightClick <span class="hl opt">=</span> event<span class="hl opt">.</span>which <span class="hl opt">===</span> <span class="hl num">3</span> <span class="hl opt">||</span> event<span class="hl opt">.</span>button <span class="hl opt">===</span> <span class="hl num">2</span>
                      newEvent<span class="hl opt">.</span>pos <span class="hl opt">= {</span> x<span class="hl opt">:</span> <span class="hl num">0</span><span class="hl opt">,</span> y<span class="hl opt">:</span> <span class="hl num">0</span> <span class="hl opt">}</span>
                      <span class="hl kwa">if</span> <span class="hl opt">(</span>event<span class="hl opt">.</span>pageX <span class="hl opt">||</span> event<span class="hl opt">.</span>pageY<span class="hl opt">) {</span>
                        newEvent<span class="hl opt">.</span>clientX <span class="hl opt">=</span> event<span class="hl opt">.</span>pageX
                        newEvent<span class="hl opt">.</span>clientY <span class="hl opt">=</span> event<span class="hl opt">.</span>pageY
                      <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>event<span class="hl opt">.</span>clientX <span class="hl opt">||</span> event<span class="hl opt">.</span>clientY<span class="hl opt">) {</span>
                        newEvent<span class="hl opt">.</span>clientX <span class="hl opt">=</span> event<span class="hl opt">.</span>clientX <span class="hl opt">+</span> doc<span class="hl opt">.</span>body<span class="hl opt">.</span>scrollLeft <span class="hl opt">+</span> root<span class="hl opt">.</span>scrollLeft
                        newEvent<span class="hl opt">.</span>clientY <span class="hl opt">=</span> event<span class="hl opt">.</span>clientY <span class="hl opt">+</span> doc<span class="hl opt">.</span>body<span class="hl opt">.</span>scrollTop <span class="hl opt">+</span> root<span class="hl opt">.</span>scrollTop
                      <span class="hl opt">}</span>
                      <span class="hl kwa">if</span> <span class="hl opt">(</span>overOutRegex<span class="hl opt">.</span><span class="hl kwd">test</span><span class="hl opt">(</span>type<span class="hl opt">)) {</span>
                        newEvent<span class="hl opt">.</span>relatedTarget <span class="hl opt">=</span> event<span class="hl opt">.</span>relatedTarget
                          <span class="hl opt">||</span> event<span class="hl opt">[(</span>type <span class="hl opt">==</span> <span class="hl str">'mouseover'</span> <span class="hl opt">?</span> <span class="hl str">'from'</span> <span class="hl opt">:</span> <span class="hl str">'to'</span><span class="hl opt">) +</span> <span class="hl str">'Element'</span><span class="hl opt">]</span>
                      <span class="hl opt">}</span>
                      <span class="hl kwa">return</span> mouseProps
                    <span class="hl opt">}</span>
                <span class="hl opt">}</span>
              <span class="hl opt">, {</span> <span class="hl slc">// mouse wheel events</span>
                    reg<span class="hl opt">:</span> <span class="hl kwc">/mouse.*(wheel|scroll)/i</span>
                  <span class="hl opt">,</span> <span class="hl kwd">fix</span><span class="hl opt">:</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span> <span class="hl kwa">return</span> mouseWheelProps <span class="hl opt">}</span>
                <span class="hl opt">}</span>
              <span class="hl opt">, {</span> <span class="hl slc">// TextEvent</span>
                    reg<span class="hl opt">:</span> <span class="hl kwc">/^text/i</span>
                  <span class="hl opt">,</span> <span class="hl kwd">fix</span><span class="hl opt">:</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span> <span class="hl kwa">return</span> textProps <span class="hl opt">}</span>
                <span class="hl opt">}</span>
              <span class="hl opt">, {</span> <span class="hl slc">// touch and gesture events</span>
                    reg<span class="hl opt">:</span> <span class="hl kwc">/^touch|^gesture/i</span>
                  <span class="hl opt">,</span> <span class="hl kwd">fix</span><span class="hl opt">:</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span> <span class="hl kwa">return</span> touchProps <span class="hl opt">}</span>
                <span class="hl opt">}</span>
              <span class="hl opt">, {</span> <span class="hl slc">// message events</span>
                    reg<span class="hl opt">:</span> <span class="hl kwc">/^message$/i</span>
                  <span class="hl opt">,</span> <span class="hl kwd">fix</span><span class="hl opt">:</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span> <span class="hl kwa">return</span> messageProps <span class="hl opt">}</span>
                <span class="hl opt">}</span>
              <span class="hl opt">, {</span> <span class="hl slc">// popstate events</span>
                    reg<span class="hl opt">:</span> <span class="hl kwc">/^popstate$/i</span>
                  <span class="hl opt">,</span> <span class="hl kwd">fix</span><span class="hl opt">:</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span> <span class="hl kwa">return</span> stateProps <span class="hl opt">}</span>
                <span class="hl opt">}</span>
              <span class="hl opt">, {</span> <span class="hl slc">// everything else</span>
                    reg<span class="hl opt">:</span> <span class="hl kwc">/.*/</span>
                  <span class="hl opt">,</span> <span class="hl kwd">fix</span><span class="hl opt">:</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span> <span class="hl kwa">return</span> commonProps <span class="hl opt">}</span>
                <span class="hl opt">}</span>
            <span class="hl opt">]</span>
          <span class="hl opt">,</span> typeFixerMap <span class="hl opt">= {}</span> <span class="hl slc">// used to map event types to fixer functions (above), a basic cache mechanism</span>

          <span class="hl opt">,</span> <span class="hl kwd">Event</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>event<span class="hl opt">,</span> element<span class="hl opt">,</span> isNative<span class="hl opt">) {</span>
              <span class="hl kwa">if</span> <span class="hl opt">(!</span>arguments<span class="hl opt">.</span>length<span class="hl opt">)</span> <span class="hl kwa">return</span>
              event <span class="hl opt">=</span> event <span class="hl opt">|| ((</span>element<span class="hl opt">.</span>ownerDocument <span class="hl opt">||</span> element<span class="hl opt">.</span>document <span class="hl opt">||</span> element<span class="hl opt">).</span>parentWindow <span class="hl opt">||</span> win<span class="hl opt">).</span>event
              <span class="hl kwa">this</span><span class="hl opt">.</span>originalEvent <span class="hl opt">=</span> event
              <span class="hl kwa">this</span><span class="hl opt">.</span>isNative       <span class="hl opt">=</span> isNative
              <span class="hl kwa">this</span><span class="hl opt">.</span>isBean         <span class="hl opt">=</span> <span class="hl kwa">true</span>

              <span class="hl kwa">if</span> <span class="hl opt">(!</span>event<span class="hl opt">)</span> <span class="hl kwa">return</span>

              <span class="hl kwa">var</span> type   <span class="hl opt">=</span> event<span class="hl opt">.</span>type
                <span class="hl opt">,</span> target <span class="hl opt">=</span> event<span class="hl opt">.</span>target <span class="hl opt">||</span> event<span class="hl opt">.</span>srcElement
                <span class="hl opt">,</span> i<span class="hl opt">,</span> l<span class="hl opt">,</span> p<span class="hl opt">,</span> props<span class="hl opt">,</span> fixer

              <span class="hl kwa">this</span><span class="hl opt">.</span>target <span class="hl opt">=</span> target <span class="hl opt">&amp;&amp;</span> target<span class="hl opt">.</span>nodeType <span class="hl opt">===</span> <span class="hl num">3</span> <span class="hl opt">?</span> target<span class="hl opt">.</span>parentNode <span class="hl opt">:</span> target

              <span class="hl kwa">if</span> <span class="hl opt">(</span>isNative<span class="hl opt">) {</span> <span class="hl slc">// we only need basic augmentation on custom events, the rest expensive &amp; pointless</span>
                fixer <span class="hl opt">=</span> typeFixerMap<span class="hl opt">[</span>type<span class="hl opt">]</span>
                <span class="hl kwa">if</span> <span class="hl opt">(!</span>fixer<span class="hl opt">) {</span> <span class="hl slc">// haven't encountered this event type before, map a fixer function for it</span>
                  <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> l <span class="hl opt">=</span> typeFixers<span class="hl opt">.</span>length<span class="hl opt">;</span> i <span class="hl opt">&lt;</span> l<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
                    <span class="hl kwa">if</span> <span class="hl opt">(</span>typeFixers<span class="hl opt">[</span>i<span class="hl opt">].</span>reg<span class="hl opt">.</span><span class="hl kwd">test</span><span class="hl opt">(</span>type<span class="hl opt">)) {</span> <span class="hl slc">// guaranteed to match at least one, last is .*</span>
                      typeFixerMap<span class="hl opt">[</span>type<span class="hl opt">] =</span> fixer <span class="hl opt">=</span> typeFixers<span class="hl opt">[</span>i<span class="hl opt">].</span>fix
                      <span class="hl kwa">break</span>
                    <span class="hl opt">}</span>
                  <span class="hl opt">}</span>
                <span class="hl opt">}</span>

                props <span class="hl opt">=</span> <span class="hl kwd">fixer</span><span class="hl opt">(</span>event<span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">,</span> type<span class="hl opt">)</span>
                <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> props<span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">--;) {</span>
                  <span class="hl kwa">if</span> <span class="hl opt">(!((</span>p <span class="hl opt">=</span> props<span class="hl opt">[</span>i<span class="hl opt">])</span> <span class="hl kwa">in this</span><span class="hl opt">) &amp;&amp;</span> p <span class="hl kwa">in</span> event<span class="hl opt">)</span> <span class="hl kwa">this</span><span class="hl opt">[</span>p<span class="hl opt">] =</span> event<span class="hl opt">[</span>p<span class="hl opt">]</span>
                <span class="hl opt">}</span>
              <span class="hl opt">}</span>
            <span class="hl opt">}</span>

        <span class="hl slc">// preventDefault() and stopPropagation() are a consistent interface to those functions</span>
        <span class="hl slc">// on the DOM, stop() is an alias for both of them together</span>
        Event<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">preventDefault</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
          <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>originalEvent<span class="hl opt">.</span>preventDefault<span class="hl opt">)</span> <span class="hl kwa">this</span><span class="hl opt">.</span>originalEvent<span class="hl opt">.</span><span class="hl kwd">preventDefault</span><span class="hl opt">()</span>
          <span class="hl kwa">else this</span><span class="hl opt">.</span>originalEvent<span class="hl opt">.</span>returnValue <span class="hl opt">=</span> <span class="hl kwa">false</span>
        <span class="hl opt">}</span>
        Event<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">stopPropagation</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
          <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>originalEvent<span class="hl opt">.</span>stopPropagation<span class="hl opt">)</span> <span class="hl kwa">this</span><span class="hl opt">.</span>originalEvent<span class="hl opt">.</span><span class="hl kwd">stopPropagation</span><span class="hl opt">()</span>
          <span class="hl kwa">else this</span><span class="hl opt">.</span>originalEvent<span class="hl opt">.</span>cancelBubble <span class="hl opt">=</span> <span class="hl kwa">true</span>
        <span class="hl opt">}</span>
        Event<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">stop</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
          <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">preventDefault</span><span class="hl opt">()</span>
          <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">stopPropagation</span><span class="hl opt">()</span>
          <span class="hl kwa">this</span><span class="hl opt">.</span>stopped <span class="hl opt">=</span> <span class="hl kwa">true</span>
        <span class="hl opt">}</span>
        <span class="hl slc">// stopImmediatePropagation() has to be handled internally because we manage the event list for</span>
        <span class="hl slc">// each element</span>
        <span class="hl slc">// note that originalElement may be a Bean#Event object in some situations</span>
        Event<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">stopImmediatePropagation</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
          <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>originalEvent<span class="hl opt">.</span>stopImmediatePropagation<span class="hl opt">)</span> <span class="hl kwa">this</span><span class="hl opt">.</span>originalEvent<span class="hl opt">.</span><span class="hl kwd">stopImmediatePropagation</span><span class="hl opt">()</span>
          <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">isImmediatePropagationStopped</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span> <span class="hl kwa">return true</span> <span class="hl opt">}</span>
        <span class="hl opt">}</span>
        Event<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">isImmediatePropagationStopped</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
          <span class="hl kwa">return this</span><span class="hl opt">.</span>originalEvent<span class="hl opt">.</span>isImmediatePropagationStopped <span class="hl opt">&amp;&amp;</span> <span class="hl kwa">this</span><span class="hl opt">.</span>originalEvent<span class="hl opt">.</span><span class="hl kwd">isImmediatePropagationStopped</span><span class="hl opt">()</span>
        <span class="hl opt">}</span>
        Event<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">clone</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>currentTarget<span class="hl opt">) {</span>
          <span class="hl slc">//TODO: this is ripe for optimisation, new events are *expensive*</span>
          <span class="hl slc">// improving this will speed up delegated events</span>
          <span class="hl kwa">var</span> ne <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Event</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">.</span>element<span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">.</span>isNative<span class="hl opt">)</span>
          ne<span class="hl opt">.</span>currentTarget <span class="hl opt">=</span> currentTarget
          <span class="hl kwa">return</span> ne
        <span class="hl opt">}</span>

        <span class="hl kwa">return</span> Event
      <span class="hl opt">}())</span>

      <span class="hl slc">// if we're in old IE we can't do onpropertychange on doc or win so we use doc.documentElement for both</span>
    <span class="hl opt">,</span> <span class="hl kwd">targetElement</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>element<span class="hl opt">,</span> isNative<span class="hl opt">) {</span>
        <span class="hl kwa">return</span> <span class="hl opt">!</span>W3C_MODEL <span class="hl opt">&amp;&amp; !</span>isNative <span class="hl opt">&amp;&amp; (</span>element <span class="hl opt">===</span> doc <span class="hl opt">||</span> element <span class="hl opt">===</span> win<span class="hl opt">) ?</span> root <span class="hl opt">:</span> element
      <span class="hl opt">}</span>

      <span class="hl com">/**</span>
<span class="hl com">        * Bean maintains an internal registry for event listeners. We don't touch elements, objects</span>
<span class="hl com">        * or functions to identify them, instead we store everything in the registry.</span>
<span class="hl com">        * Each event listener has a RegEntry object, we have one 'registry' for the whole instance.</span>
<span class="hl com">        */</span>
    <span class="hl opt">,</span> RegEntry <span class="hl opt">= (</span><span class="hl kwa">function</span> <span class="hl opt">() {</span>
        <span class="hl slc">// each handler is wrapped so we can handle delegation and custom events</span>
        <span class="hl kwa">var</span> <span class="hl kwd">wrappedHandler</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>element<span class="hl opt">,</span> fn<span class="hl opt">,</span> condition<span class="hl opt">,</span> args<span class="hl opt">) {</span>
            <span class="hl kwa">var</span> <span class="hl kwd">call</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>event<span class="hl opt">,</span> eargs<span class="hl opt">) {</span>
                  <span class="hl kwa">return</span> fn<span class="hl opt">.</span><span class="hl kwd">apply</span><span class="hl opt">(</span>element<span class="hl opt">,</span> args <span class="hl opt">?</span> slice<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span>eargs<span class="hl opt">,</span> event <span class="hl opt">?</span> <span class="hl num">0</span> <span class="hl opt">:</span> <span class="hl num">1</span><span class="hl opt">).</span><span class="hl kwd">concat</span><span class="hl opt">(</span>args<span class="hl opt">) :</span> eargs<span class="hl opt">)</span>
                <span class="hl opt">}</span>
              <span class="hl opt">,</span> <span class="hl kwd">findTarget</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>event<span class="hl opt">,</span> eventElement<span class="hl opt">) {</span>
                  <span class="hl kwa">return</span> fn<span class="hl opt">.</span>__beanDel <span class="hl opt">?</span> fn<span class="hl opt">.</span>__beanDel<span class="hl opt">.</span><span class="hl kwd">ft</span><span class="hl opt">(</span>event<span class="hl opt">.</span>target<span class="hl opt">,</span> element<span class="hl opt">) :</span> eventElement
                <span class="hl opt">}</span>
              <span class="hl opt">,</span> handler <span class="hl opt">=</span> condition
                  <span class="hl opt">?</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>event<span class="hl opt">) {</span>
                      <span class="hl kwa">var</span> target <span class="hl opt">=</span> <span class="hl kwd">findTarget</span><span class="hl opt">(</span>event<span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">)</span> <span class="hl slc">// deleated event</span>
                      <span class="hl kwa">if</span> <span class="hl opt">(</span>condition<span class="hl opt">.</span><span class="hl kwd">apply</span><span class="hl opt">(</span>target<span class="hl opt">,</span> arguments<span class="hl opt">)) {</span>
                        <span class="hl kwa">if</span> <span class="hl opt">(</span>event<span class="hl opt">)</span> event<span class="hl opt">.</span>currentTarget <span class="hl opt">=</span> target
                        <span class="hl kwa">return</span> <span class="hl kwd">call</span><span class="hl opt">(</span>event<span class="hl opt">,</span> arguments<span class="hl opt">)</span>
                      <span class="hl opt">}</span>
                    <span class="hl opt">}</span>
                  <span class="hl opt">:</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>event<span class="hl opt">) {</span>
                      <span class="hl kwa">if</span> <span class="hl opt">(</span>fn<span class="hl opt">.</span>__beanDel<span class="hl opt">)</span> event <span class="hl opt">=</span> event<span class="hl opt">.</span><span class="hl kwd">clone</span><span class="hl opt">(</span><span class="hl kwd">findTarget</span><span class="hl opt">(</span>event<span class="hl opt">))</span> <span class="hl slc">// delegated event, fix the fix</span>
                      <span class="hl kwa">return</span> <span class="hl kwd">call</span><span class="hl opt">(</span>event<span class="hl opt">,</span> arguments<span class="hl opt">)</span>
                    <span class="hl opt">}</span>
            handler<span class="hl opt">.</span>__beanDel <span class="hl opt">=</span> fn<span class="hl opt">.</span>__beanDel
            <span class="hl kwa">return</span> handler
          <span class="hl opt">}</span>

        <span class="hl opt">,</span> <span class="hl kwd">RegEntry</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>element<span class="hl opt">,</span> type<span class="hl opt">,</span> handler<span class="hl opt">,</span> original<span class="hl opt">,</span> namespaces<span class="hl opt">,</span> args<span class="hl opt">,</span> root<span class="hl opt">) {</span>
            <span class="hl kwa">var</span> customType     <span class="hl opt">=</span> customEvents<span class="hl opt">[</span>type<span class="hl opt">]</span>
              <span class="hl opt">,</span> isNative

            <span class="hl kwa">if</span> <span class="hl opt">(</span>type <span class="hl opt">==</span> <span class="hl str">'unload'</span><span class="hl opt">) {</span>
              <span class="hl slc">// self clean-up</span>
              handler <span class="hl opt">=</span> <span class="hl kwd">once</span><span class="hl opt">(</span>removeListener<span class="hl opt">,</span> element<span class="hl opt">,</span> type<span class="hl opt">,</span> handler<span class="hl opt">,</span> original<span class="hl opt">)</span>
            <span class="hl opt">}</span>

            <span class="hl kwa">if</span> <span class="hl opt">(</span>customType<span class="hl opt">) {</span>
              <span class="hl kwa">if</span> <span class="hl opt">(</span>customType<span class="hl opt">.</span>condition<span class="hl opt">) {</span>
                handler <span class="hl opt">=</span> <span class="hl kwd">wrappedHandler</span><span class="hl opt">(</span>element<span class="hl opt">,</span> handler<span class="hl opt">,</span> customType<span class="hl opt">.</span>condition<span class="hl opt">,</span> args<span class="hl opt">)</span>
              <span class="hl opt">}</span>
              type <span class="hl opt">=</span> customType<span class="hl opt">.</span>base <span class="hl opt">||</span> type
            <span class="hl opt">}</span>

            <span class="hl kwa">this</span><span class="hl opt">.</span>isNative      <span class="hl opt">=</span> isNative <span class="hl opt">=</span> nativeEvents<span class="hl opt">[</span>type<span class="hl opt">] &amp;&amp; !!</span>element<span class="hl opt">[</span>eventSupport<span class="hl opt">]</span>
            <span class="hl kwa">this</span><span class="hl opt">.</span>customType    <span class="hl opt">= !</span>W3C_MODEL <span class="hl opt">&amp;&amp; !</span>isNative <span class="hl opt">&amp;&amp;</span> type
            <span class="hl kwa">this</span><span class="hl opt">.</span>element       <span class="hl opt">=</span> element
            <span class="hl kwa">this</span><span class="hl opt">.</span>type          <span class="hl opt">=</span> type
            <span class="hl kwa">this</span><span class="hl opt">.</span>original      <span class="hl opt">=</span> original
            <span class="hl kwa">this</span><span class="hl opt">.</span>namespaces    <span class="hl opt">=</span> namespaces
            <span class="hl kwa">this</span><span class="hl opt">.</span>eventType     <span class="hl opt">=</span> W3C_MODEL <span class="hl opt">||</span> isNative <span class="hl opt">?</span> type <span class="hl opt">:</span> <span class="hl str">'propertychange'</span>
            <span class="hl kwa">this</span><span class="hl opt">.</span>target        <span class="hl opt">=</span> <span class="hl kwd">targetElement</span><span class="hl opt">(</span>element<span class="hl opt">,</span> isNative<span class="hl opt">)</span>
            <span class="hl kwa">this</span><span class="hl opt">[</span>eventSupport<span class="hl opt">] = !!</span><span class="hl kwa">this</span><span class="hl opt">.</span>target<span class="hl opt">[</span>eventSupport<span class="hl opt">]</span>
            <span class="hl kwa">this</span><span class="hl opt">.</span>root          <span class="hl opt">=</span> root
            <span class="hl kwa">this</span><span class="hl opt">.</span>handler       <span class="hl opt">=</span> <span class="hl kwd">wrappedHandler</span><span class="hl opt">(</span>element<span class="hl opt">,</span> handler<span class="hl opt">,</span> <span class="hl kwa">null</span><span class="hl opt">,</span> args<span class="hl opt">)</span>
          <span class="hl opt">}</span>

        <span class="hl slc">// given a list of namespaces, is our entry in any of them?</span>
        RegEntry<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">inNamespaces</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>checkNamespaces<span class="hl opt">) {</span>
          <span class="hl kwa">var</span> i<span class="hl opt">,</span> j<span class="hl opt">,</span> c <span class="hl opt">=</span> <span class="hl num">0</span>
          <span class="hl kwa">if</span> <span class="hl opt">(!</span>checkNamespaces<span class="hl opt">)</span> <span class="hl kwa">return true</span>
          <span class="hl kwa">if</span> <span class="hl opt">(!</span><span class="hl kwa">this</span><span class="hl opt">.</span>namespaces<span class="hl opt">)</span> <span class="hl kwa">return false</span>
          <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> checkNamespaces<span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">--;) {</span>
            <span class="hl kwa">for</span> <span class="hl opt">(</span>j <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>namespaces<span class="hl opt">.</span>length<span class="hl opt">;</span> j<span class="hl opt">--;) {</span>
              <span class="hl kwa">if</span> <span class="hl opt">(</span>checkNamespaces<span class="hl opt">[</span>i<span class="hl opt">] ==</span> <span class="hl kwa">this</span><span class="hl opt">.</span>namespaces<span class="hl opt">[</span>j<span class="hl opt">])</span> c<span class="hl opt">++</span>
            <span class="hl opt">}</span>
          <span class="hl opt">}</span>
          <span class="hl kwa">return</span> checkNamespaces<span class="hl opt">.</span>length <span class="hl opt">===</span> c
        <span class="hl opt">}</span>

        <span class="hl slc">// match by element, original fn (opt), handler fn (opt)</span>
        RegEntry<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">matches</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>checkElement<span class="hl opt">,</span> checkOriginal<span class="hl opt">,</span> checkHandler<span class="hl opt">) {</span>
          <span class="hl kwa">return this</span><span class="hl opt">.</span>element <span class="hl opt">===</span> checkElement <span class="hl opt">&amp;&amp;</span>
            <span class="hl opt">(!</span>checkOriginal <span class="hl opt">||</span> <span class="hl kwa">this</span><span class="hl opt">.</span>original <span class="hl opt">===</span> checkOriginal<span class="hl opt">) &amp;&amp;</span>
            <span class="hl opt">(!</span>checkHandler <span class="hl opt">||</span> <span class="hl kwa">this</span><span class="hl opt">.</span>handler <span class="hl opt">===</span> checkHandler<span class="hl opt">)</span>
        <span class="hl opt">}</span>

        <span class="hl kwa">return</span> RegEntry
      <span class="hl opt">}())</span>

    <span class="hl opt">,</span> registry <span class="hl opt">= (</span><span class="hl kwa">function</span> <span class="hl opt">() {</span>
        <span class="hl slc">// our map stores arrays by event type, just because it's better than storing</span>
        <span class="hl slc">// everything in a single array.</span>
        <span class="hl slc">// uses '$' as a prefix for the keys for safety and 'r' as a special prefix for</span>
        <span class="hl slc">// rootListeners so we can look them up fast</span>
        <span class="hl kwa">var</span> map <span class="hl opt">= {}</span>

          <span class="hl slc">// generic functional search of our registry for matching listeners,</span>
          <span class="hl slc">// `fn` returns false to break out of the loop</span>
          <span class="hl opt">,</span> <span class="hl kwd">forAll</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>element<span class="hl opt">,</span> type<span class="hl opt">,</span> original<span class="hl opt">,</span> handler<span class="hl opt">,</span> root<span class="hl opt">,</span> fn<span class="hl opt">) {</span>
              <span class="hl kwa">var</span> pfx <span class="hl opt">=</span> root <span class="hl opt">?</span> <span class="hl str">'r'</span> <span class="hl opt">:</span> <span class="hl str">'$'</span>
              <span class="hl kwa">if</span> <span class="hl opt">(!</span>type <span class="hl opt">||</span> type <span class="hl opt">==</span> <span class="hl str">'*'</span><span class="hl opt">) {</span>
                <span class="hl slc">// search the whole registry</span>
                <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> t <span class="hl kwa">in</span> map<span class="hl opt">) {</span>
                  <span class="hl kwa">if</span> <span class="hl opt">(</span>t<span class="hl opt">.</span><span class="hl kwd">charAt</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">) ==</span> pfx<span class="hl opt">) {</span>
                    <span class="hl kwd">forAll</span><span class="hl opt">(</span>element<span class="hl opt">,</span> t<span class="hl opt">.</span><span class="hl kwd">substr</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">),</span> original<span class="hl opt">,</span> handler<span class="hl opt">,</span> root<span class="hl opt">,</span> fn<span class="hl opt">)</span>
                  <span class="hl opt">}</span>
                <span class="hl opt">}</span>
              <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
                <span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> l<span class="hl opt">,</span> list <span class="hl opt">=</span> map<span class="hl opt">[</span>pfx <span class="hl opt">+</span> type<span class="hl opt">],</span> all <span class="hl opt">=</span> element <span class="hl opt">==</span> <span class="hl str">'*'</span>
                <span class="hl kwa">if</span> <span class="hl opt">(!</span>list<span class="hl opt">)</span> <span class="hl kwa">return</span>
                <span class="hl kwa">for</span> <span class="hl opt">(</span>l <span class="hl opt">=</span> list<span class="hl opt">.</span>length<span class="hl opt">;</span> i <span class="hl opt">&lt;</span> l<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
                  <span class="hl kwa">if</span> <span class="hl opt">((</span>all <span class="hl opt">||</span> list<span class="hl opt">[</span>i<span class="hl opt">].</span><span class="hl kwd">matches</span><span class="hl opt">(</span>element<span class="hl opt">,</span> original<span class="hl opt">,</span> handler<span class="hl opt">)) &amp;&amp; !</span><span class="hl kwd">fn</span><span class="hl opt">(</span>list<span class="hl opt">[</span>i<span class="hl opt">],</span> list<span class="hl opt">,</span> i<span class="hl opt">,</span> type<span class="hl opt">))</span> <span class="hl kwa">return</span>
                <span class="hl opt">}</span>
              <span class="hl opt">}</span>
            <span class="hl opt">}</span>

          <span class="hl opt">,</span> <span class="hl kwd">has</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>element<span class="hl opt">,</span> type<span class="hl opt">,</span> original<span class="hl opt">,</span> root<span class="hl opt">) {</span>
              <span class="hl slc">// we're not using forAll here simply because it's a bit slower and this</span>
              <span class="hl slc">// needs to be fast</span>
              <span class="hl kwa">var</span> i<span class="hl opt">,</span> list <span class="hl opt">=</span> map<span class="hl opt">[(</span>root <span class="hl opt">?</span> <span class="hl str">'r'</span> <span class="hl opt">:</span> <span class="hl str">'$'</span><span class="hl opt">) +</span> type<span class="hl opt">]</span>
              <span class="hl kwa">if</span> <span class="hl opt">(</span>list<span class="hl opt">) {</span>
                <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> list<span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">--;) {</span>
                  <span class="hl kwa">if</span> <span class="hl opt">(!</span>list<span class="hl opt">[</span>i<span class="hl opt">].</span>root <span class="hl opt">&amp;&amp;</span> list<span class="hl opt">[</span>i<span class="hl opt">].</span><span class="hl kwd">matches</span><span class="hl opt">(</span>element<span class="hl opt">,</span> original<span class="hl opt">,</span> <span class="hl kwa">null</span><span class="hl opt">))</span> <span class="hl kwa">return true</span>
                <span class="hl opt">}</span>
              <span class="hl opt">}</span>
              <span class="hl kwa">return false</span>
            <span class="hl opt">}</span>

          <span class="hl opt">,</span> <span class="hl kwa">get</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>element<span class="hl opt">,</span> type<span class="hl opt">,</span> original<span class="hl opt">,</span> root<span class="hl opt">) {</span>
              <span class="hl kwa">var</span> entries <span class="hl opt">= []</span>
              <span class="hl kwd">forAll</span><span class="hl opt">(</span>element<span class="hl opt">,</span> type<span class="hl opt">,</span> original<span class="hl opt">,</span> <span class="hl kwa">null</span><span class="hl opt">,</span> root<span class="hl opt">,</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>entry<span class="hl opt">) {</span>
                <span class="hl kwa">return</span> entries<span class="hl opt">.</span><span class="hl kwd">push</span><span class="hl opt">(</span>entry<span class="hl opt">)</span>
              <span class="hl opt">})</span>
              <span class="hl kwa">return</span> entries
            <span class="hl opt">}</span>

          <span class="hl opt">,</span> <span class="hl kwd">put</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>entry<span class="hl opt">) {</span>
              <span class="hl kwa">var</span> has <span class="hl opt">= !</span>entry<span class="hl opt">.</span>root <span class="hl opt">&amp;&amp; !</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">has</span><span class="hl opt">(</span>entry<span class="hl opt">.</span>element<span class="hl opt">,</span> entry<span class="hl opt">.</span>type<span class="hl opt">,</span> <span class="hl kwa">null</span><span class="hl opt">,</span> <span class="hl kwa">false</span><span class="hl opt">)</span>
                <span class="hl opt">,</span> key <span class="hl opt">= (</span>entry<span class="hl opt">.</span>root <span class="hl opt">?</span> <span class="hl str">'r'</span> <span class="hl opt">:</span> <span class="hl str">'$'</span><span class="hl opt">) +</span> entry<span class="hl opt">.</span>type
              <span class="hl opt">;(</span>map<span class="hl opt">[</span>key<span class="hl opt">] || (</span>map<span class="hl opt">[</span>key<span class="hl opt">] = [])).</span><span class="hl kwd">push</span><span class="hl opt">(</span>entry<span class="hl opt">)</span>
              <span class="hl kwa">return</span> has
            <span class="hl opt">}</span>

          <span class="hl opt">,</span> <span class="hl kwd">del</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>entry<span class="hl opt">) {</span>
              <span class="hl kwd">forAll</span><span class="hl opt">(</span>entry<span class="hl opt">.</span>element<span class="hl opt">,</span> entry<span class="hl opt">.</span>type<span class="hl opt">,</span> <span class="hl kwa">null</span><span class="hl opt">,</span> entry<span class="hl opt">.</span>handler<span class="hl opt">,</span> entry<span class="hl opt">.</span>root<span class="hl opt">,</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>entry<span class="hl opt">,</span> list<span class="hl opt">,</span> i<span class="hl opt">) {</span>
                list<span class="hl opt">.</span><span class="hl kwd">splice</span><span class="hl opt">(</span>i<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">)</span>
                entry<span class="hl opt">.</span>removed <span class="hl opt">=</span> <span class="hl kwa">true</span>
                <span class="hl kwa">if</span> <span class="hl opt">(</span>list<span class="hl opt">.</span>length <span class="hl opt">===</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">delete</span> map<span class="hl opt">[(</span>entry<span class="hl opt">.</span>root <span class="hl opt">?</span> <span class="hl str">'r'</span> <span class="hl opt">:</span> <span class="hl str">'$'</span><span class="hl opt">) +</span> entry<span class="hl opt">.</span>type<span class="hl opt">]</span>
                <span class="hl kwa">return false</span>
              <span class="hl opt">})</span>
            <span class="hl opt">}</span>

            <span class="hl slc">// dump all entries, used for onunload</span>
          <span class="hl opt">,</span> <span class="hl kwd">entries</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
              <span class="hl kwa">var</span> t<span class="hl opt">,</span> entries <span class="hl opt">= []</span>
              <span class="hl kwa">for</span> <span class="hl opt">(</span>t <span class="hl kwa">in</span> map<span class="hl opt">) {</span>
                <span class="hl kwa">if</span> <span class="hl opt">(</span>t<span class="hl opt">.</span><span class="hl kwd">charAt</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">) ==</span> <span class="hl str">'$'</span><span class="hl opt">)</span> entries <span class="hl opt">=</span> entries<span class="hl opt">.</span><span class="hl kwd">concat</span><span class="hl opt">(</span>map<span class="hl opt">[</span>t<span class="hl opt">])</span>
              <span class="hl opt">}</span>
              <span class="hl kwa">return</span> entries
            <span class="hl opt">}</span>

        <span class="hl kwa">return</span> <span class="hl opt">{</span> has<span class="hl opt">:</span> has<span class="hl opt">,</span> <span class="hl kwa">get</span><span class="hl opt">:</span> <span class="hl kwa">get</span><span class="hl opt">,</span> put<span class="hl opt">:</span> put<span class="hl opt">,</span> del<span class="hl opt">:</span> del<span class="hl opt">,</span> entries<span class="hl opt">:</span> entries <span class="hl opt">}</span>
      <span class="hl opt">}())</span>

      <span class="hl slc">// we need a selector engine for delegated events, use querySelectorAll if it exists</span>
      <span class="hl slc">// but for older browsers we need Qwery, Sizzle or similar</span>
    <span class="hl opt">,</span> selectorEngine
    <span class="hl opt">,</span> <span class="hl kwd">setSelectorEngine</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>e<span class="hl opt">) {</span>
        <span class="hl kwa">if</span> <span class="hl opt">(!</span>arguments<span class="hl opt">.</span>length<span class="hl opt">) {</span>
          selectorEngine <span class="hl opt">=</span> doc<span class="hl opt">.</span>querySelectorAll
            <span class="hl opt">?</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>s<span class="hl opt">,</span> r<span class="hl opt">) {</span>
                <span class="hl kwa">return</span> r<span class="hl opt">.</span><span class="hl kwd">querySelectorAll</span><span class="hl opt">(</span>s<span class="hl opt">)</span>
              <span class="hl opt">}</span>
            <span class="hl opt">:</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
                <span class="hl kwa">throw new</span> <span class="hl kwd">Error</span><span class="hl opt">(</span><span class="hl str">'Bean: No selector engine installed'</span><span class="hl opt">)</span> <span class="hl slc">// eeek</span>
              <span class="hl opt">}</span>
        <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
          selectorEngine <span class="hl opt">=</span> e
        <span class="hl opt">}</span>
      <span class="hl opt">}</span>

      <span class="hl slc">// we attach this listener to each DOM event that we need to listen to, only once</span>
      <span class="hl slc">// per event type per DOM element</span>
    <span class="hl opt">,</span> <span class="hl kwd">rootListener</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>event<span class="hl opt">,</span> type<span class="hl opt">) {</span>
        <span class="hl kwa">if</span> <span class="hl opt">(!</span>W3C_MODEL <span class="hl opt">&amp;&amp;</span> type <span class="hl opt">&amp;&amp;</span> event <span class="hl opt">&amp;&amp;</span> event<span class="hl opt">.</span>propertyName <span class="hl opt">!=</span> <span class="hl str">'_on'</span> <span class="hl opt">+</span> type<span class="hl opt">)</span> <span class="hl kwa">return</span>

        <span class="hl kwa">var</span> listeners <span class="hl opt">=</span> registry<span class="hl opt">.</span><span class="hl kwa">get</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> type <span class="hl opt">||</span> event<span class="hl opt">.</span>type<span class="hl opt">,</span> <span class="hl kwa">null</span><span class="hl opt">,</span> <span class="hl kwa">false</span><span class="hl opt">)</span>
          <span class="hl opt">,</span> l <span class="hl opt">=</span> listeners<span class="hl opt">.</span>length
          <span class="hl opt">,</span> i <span class="hl opt">=</span> <span class="hl num">0</span>

        event <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Event</span><span class="hl opt">(</span>event<span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">,</span> <span class="hl kwa">true</span><span class="hl opt">)</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>type<span class="hl opt">)</span> event<span class="hl opt">.</span>type <span class="hl opt">=</span> type

        <span class="hl slc">// iterate through all handlers registered for this type, calling them unless they have</span>
        <span class="hl slc">// been removed by a previous handler or stopImmediatePropagation() has been called</span>
        <span class="hl kwa">for</span> <span class="hl opt">(;</span> i <span class="hl opt">&lt;</span> l <span class="hl opt">&amp;&amp; !</span>event<span class="hl opt">.</span><span class="hl kwd">isImmediatePropagationStopped</span><span class="hl opt">();</span> i<span class="hl opt">++) {</span>
          <span class="hl kwa">if</span> <span class="hl opt">(!</span>listeners<span class="hl opt">[</span>i<span class="hl opt">].</span>removed<span class="hl opt">)</span> listeners<span class="hl opt">[</span>i<span class="hl opt">].</span>handler<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> event<span class="hl opt">)</span>
        <span class="hl opt">}</span>
      <span class="hl opt">}</span>

      <span class="hl slc">// add and remove listeners to DOM elements</span>
    <span class="hl opt">,</span> listener <span class="hl opt">=</span> W3C_MODEL
        <span class="hl opt">?</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>element<span class="hl opt">,</span> type<span class="hl opt">,</span> add<span class="hl opt">) {</span>
            <span class="hl slc">// new browsers</span>
            element<span class="hl opt">[</span>add <span class="hl opt">?</span> addEvent <span class="hl opt">:</span> removeEvent<span class="hl opt">](</span>type<span class="hl opt">,</span> rootListener<span class="hl opt">,</span> <span class="hl kwa">false</span><span class="hl opt">)</span>
          <span class="hl opt">}</span>
        <span class="hl opt">:</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>element<span class="hl opt">,</span> type<span class="hl opt">,</span> add<span class="hl opt">,</span> custom<span class="hl opt">) {</span>
            <span class="hl slc">// IE8 and below, use attachEvent/detachEvent and we have to piggy-back propertychange events</span>
            <span class="hl slc">// to simulate event bubbling etc.</span>
            <span class="hl kwa">var</span> entry
            <span class="hl kwa">if</span> <span class="hl opt">(</span>add<span class="hl opt">) {</span>
              registry<span class="hl opt">.</span><span class="hl kwd">put</span><span class="hl opt">(</span>entry <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">RegEntry</span><span class="hl opt">(</span>
                  element
                <span class="hl opt">,</span> custom <span class="hl opt">||</span> type
                <span class="hl opt">,</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>event<span class="hl opt">) {</span> <span class="hl slc">// handler</span>
                    rootListener<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span>element<span class="hl opt">,</span> event<span class="hl opt">,</span> custom<span class="hl opt">)</span>
                  <span class="hl opt">}</span>
                <span class="hl opt">,</span> rootListener
                <span class="hl opt">,</span> <span class="hl kwa">null</span>
                <span class="hl opt">,</span> <span class="hl kwa">null</span>
                <span class="hl opt">,</span> <span class="hl kwa">true</span> <span class="hl slc">// is root</span>
              <span class="hl opt">))</span>
              <span class="hl kwa">if</span> <span class="hl opt">(</span>custom <span class="hl opt">&amp;&amp;</span> element<span class="hl opt">[</span><span class="hl str">'_on'</span> <span class="hl opt">+</span> custom<span class="hl opt">] ==</span> <span class="hl kwa">null</span><span class="hl opt">)</span> element<span class="hl opt">[</span><span class="hl str">'_on'</span> <span class="hl opt">+</span> custom<span class="hl opt">] =</span> <span class="hl num">0</span>
              entry<span class="hl opt">.</span>target<span class="hl opt">.</span><span class="hl kwd">attachEvent</span><span class="hl opt">(</span><span class="hl str">'on'</span> <span class="hl opt">+</span> entry<span class="hl opt">.</span>eventType<span class="hl opt">,</span> entry<span class="hl opt">.</span>handler<span class="hl opt">)</span>
            <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
              entry <span class="hl opt">=</span> registry<span class="hl opt">.</span><span class="hl kwa">get</span><span class="hl opt">(</span>element<span class="hl opt">,</span> custom <span class="hl opt">||</span> type<span class="hl opt">,</span> rootListener<span class="hl opt">,</span> <span class="hl kwa">true</span><span class="hl opt">)[</span><span class="hl num">0</span><span class="hl opt">]</span>
              <span class="hl kwa">if</span> <span class="hl opt">(</span>entry<span class="hl opt">) {</span>
                entry<span class="hl opt">.</span>target<span class="hl opt">.</span><span class="hl kwd">detachEvent</span><span class="hl opt">(</span><span class="hl str">'on'</span> <span class="hl opt">+</span> entry<span class="hl opt">.</span>eventType<span class="hl opt">,</span> entry<span class="hl opt">.</span>handler<span class="hl opt">)</span>
                registry<span class="hl opt">.</span><span class="hl kwd">del</span><span class="hl opt">(</span>entry<span class="hl opt">)</span>
              <span class="hl opt">}</span>
            <span class="hl opt">}</span>
          <span class="hl opt">}</span>

    <span class="hl opt">,</span> <span class="hl kwd">once</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>rm<span class="hl opt">,</span> element<span class="hl opt">,</span> type<span class="hl opt">,</span> fn<span class="hl opt">,</span> originalFn<span class="hl opt">) {</span>
        <span class="hl slc">// wrap the handler in a handler that does a remove as well</span>
        <span class="hl kwa">return function</span> <span class="hl opt">() {</span>
          fn<span class="hl opt">.</span><span class="hl kwd">apply</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> arguments<span class="hl opt">)</span>
          <span class="hl kwd">rm</span><span class="hl opt">(</span>element<span class="hl opt">,</span> type<span class="hl opt">,</span> originalFn<span class="hl opt">)</span>
        <span class="hl opt">}</span>
      <span class="hl opt">}</span>

    <span class="hl opt">,</span> <span class="hl kwd">removeListener</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>element<span class="hl opt">,</span> orgType<span class="hl opt">,</span> handler<span class="hl opt">,</span> namespaces<span class="hl opt">) {</span>
        <span class="hl kwa">var</span> type     <span class="hl opt">=</span> orgType <span class="hl opt">&amp;&amp;</span> orgType<span class="hl opt">.</span><span class="hl kwd">replace</span><span class="hl opt">(</span>nameRegex<span class="hl opt">,</span> <span class="hl str">''</span><span class="hl opt">)</span>
          <span class="hl opt">,</span> handlers <span class="hl opt">=</span> registry<span class="hl opt">.</span><span class="hl kwa">get</span><span class="hl opt">(</span>element<span class="hl opt">,</span> type<span class="hl opt">,</span> <span class="hl kwa">null</span><span class="hl opt">,</span> <span class="hl kwa">false</span><span class="hl opt">)</span>
          <span class="hl opt">,</span> removed  <span class="hl opt">= {}</span>
          <span class="hl opt">,</span> i<span class="hl opt">,</span> l

        <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> l <span class="hl opt">=</span> handlers<span class="hl opt">.</span>length<span class="hl opt">;</span> i <span class="hl opt">&lt;</span> l<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
          <span class="hl kwa">if</span> <span class="hl opt">((!</span>handler <span class="hl opt">||</span> handlers<span class="hl opt">[</span>i<span class="hl opt">].</span>original <span class="hl opt">===</span> handler<span class="hl opt">) &amp;&amp;</span> handlers<span class="hl opt">[</span>i<span class="hl opt">].</span><span class="hl kwd">inNamespaces</span><span class="hl opt">(</span>namespaces<span class="hl opt">)) {</span>
            <span class="hl slc">// TODO: this is problematic, we have a registry.get() and registry.del() that</span>
            <span class="hl slc">// both do registry searches so we waste cycles doing this. Needs to be rolled into</span>
            <span class="hl slc">// a single registry.forAll(fn) that removes while finding, but the catch is that</span>
            <span class="hl slc">// we'll be splicing the arrays that we're iterating over. Needs extra tests to</span>
            <span class="hl slc">// make sure we don't screw it up. &#64;rvagg</span>
            registry<span class="hl opt">.</span><span class="hl kwd">del</span><span class="hl opt">(</span>handlers<span class="hl opt">[</span>i<span class="hl opt">])</span>
            <span class="hl kwa">if</span> <span class="hl opt">(!</span>removed<span class="hl opt">[</span>handlers<span class="hl opt">[</span>i<span class="hl opt">].</span>eventType<span class="hl opt">] &amp;&amp;</span> handlers<span class="hl opt">[</span>i<span class="hl opt">][</span>eventSupport<span class="hl opt">])</span>
              removed<span class="hl opt">[</span>handlers<span class="hl opt">[</span>i<span class="hl opt">].</span>eventType<span class="hl opt">] = {</span> t<span class="hl opt">:</span> handlers<span class="hl opt">[</span>i<span class="hl opt">].</span>eventType<span class="hl opt">,</span> c<span class="hl opt">:</span> handlers<span class="hl opt">[</span>i<span class="hl opt">].</span>type <span class="hl opt">}</span>
          <span class="hl opt">}</span>
        <span class="hl opt">}</span>
        <span class="hl slc">// check each type/element for removed listeners and remove the rootListener where it's no longer needed</span>
        <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl kwa">in</span> removed<span class="hl opt">) {</span>
          <span class="hl kwa">if</span> <span class="hl opt">(!</span>registry<span class="hl opt">.</span><span class="hl kwd">has</span><span class="hl opt">(</span>element<span class="hl opt">,</span> removed<span class="hl opt">[</span>i<span class="hl opt">].</span>t<span class="hl opt">,</span> <span class="hl kwa">null</span><span class="hl opt">,</span> <span class="hl kwa">false</span><span class="hl opt">)) {</span>
            <span class="hl slc">// last listener of this type, remove the rootListener</span>
            <span class="hl kwd">listener</span><span class="hl opt">(</span>element<span class="hl opt">,</span> removed<span class="hl opt">[</span>i<span class="hl opt">].</span>t<span class="hl opt">,</span> <span class="hl kwa">false</span><span class="hl opt">,</span> removed<span class="hl opt">[</span>i<span class="hl opt">].</span>c<span class="hl opt">)</span>
          <span class="hl opt">}</span>
        <span class="hl opt">}</span>
      <span class="hl opt">}</span>

      <span class="hl slc">// set up a delegate helper using the given selector, wrap the handler function</span>
    <span class="hl opt">,</span> <span class="hl kwd">delegate</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>selector<span class="hl opt">,</span> fn<span class="hl opt">) {</span>
        <span class="hl slc">//TODO: findTarget (therefore $) is called twice, once for match and once for</span>
        <span class="hl slc">// setting e.currentTarget, fix this so it's only needed once</span>
        <span class="hl kwa">var</span> <span class="hl kwd">findTarget</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>target<span class="hl opt">,</span> root<span class="hl opt">) {</span>
              <span class="hl kwa">var</span> i<span class="hl opt">,</span> array <span class="hl opt">=</span> <span class="hl kwd">isString</span><span class="hl opt">(</span>selector<span class="hl opt">) ?</span> <span class="hl kwd">selectorEngine</span><span class="hl opt">(</span>selector<span class="hl opt">,</span> root<span class="hl opt">) :</span> selector
              <span class="hl kwa">for</span> <span class="hl opt">(;</span> target <span class="hl opt">&amp;&amp;</span> target <span class="hl opt">!==</span> root<span class="hl opt">;</span> target <span class="hl opt">=</span> target<span class="hl opt">.</span>parentNode<span class="hl opt">) {</span>
                <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> array<span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">--;) {</span>
                  <span class="hl kwa">if</span> <span class="hl opt">(</span>array<span class="hl opt">[</span>i<span class="hl opt">] ===</span> target<span class="hl opt">)</span> <span class="hl kwa">return</span> target
                <span class="hl opt">}</span>
              <span class="hl opt">}</span>
            <span class="hl opt">}</span>
          <span class="hl opt">,</span> <span class="hl kwd">handler</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>e<span class="hl opt">) {</span>
              <span class="hl kwa">var</span> match <span class="hl opt">=</span> <span class="hl kwd">findTarget</span><span class="hl opt">(</span>e<span class="hl opt">.</span>target<span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">)</span>
              <span class="hl kwa">if</span> <span class="hl opt">(</span>match<span class="hl opt">)</span> fn<span class="hl opt">.</span><span class="hl kwd">apply</span><span class="hl opt">(</span>match<span class="hl opt">,</span> arguments<span class="hl opt">)</span>
            <span class="hl opt">}</span>

        <span class="hl slc">// __beanDel isn't pleasant but it's a private function, not exposed outside of Bean</span>
        handler<span class="hl opt">.</span>__beanDel <span class="hl opt">= {</span>
            ft       <span class="hl opt">:</span> findTarget <span class="hl slc">// attach it here for customEvents to use too</span>
          <span class="hl opt">,</span> selector <span class="hl opt">:</span> selector
        <span class="hl opt">}</span>
        <span class="hl kwa">return</span> handler
      <span class="hl opt">}</span>

    <span class="hl opt">,</span> fireListener <span class="hl opt">=</span> W3C_MODEL <span class="hl opt">?</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>isNative<span class="hl opt">,</span> type<span class="hl opt">,</span> element<span class="hl opt">) {</span>
        <span class="hl slc">// modern browsers, do a proper dispatchEvent()</span>
        <span class="hl kwa">var</span> evt <span class="hl opt">=</span> doc<span class="hl opt">.</span><span class="hl kwd">createEvent</span><span class="hl opt">(</span>isNative <span class="hl opt">?</span> <span class="hl str">'HTMLEvents'</span> <span class="hl opt">:</span> <span class="hl str">'UIEvents'</span><span class="hl opt">)</span>
        evt<span class="hl opt">[</span>isNative <span class="hl opt">?</span> <span class="hl str">'initEvent'</span> <span class="hl opt">:</span> <span class="hl str">'initUIEvent'</span><span class="hl opt">](</span>type<span class="hl opt">,</span> <span class="hl kwa">true</span><span class="hl opt">,</span> <span class="hl kwa">true</span><span class="hl opt">,</span> win<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">)</span>
        element<span class="hl opt">.</span><span class="hl kwd">dispatchEvent</span><span class="hl opt">(</span>evt<span class="hl opt">)</span>
      <span class="hl opt">} :</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>isNative<span class="hl opt">,</span> type<span class="hl opt">,</span> element<span class="hl opt">) {</span>
        <span class="hl slc">// old browser use onpropertychange, just increment a custom property to trigger the event</span>
        element <span class="hl opt">=</span> <span class="hl kwd">targetElement</span><span class="hl opt">(</span>element<span class="hl opt">,</span> isNative<span class="hl opt">)</span>
        isNative <span class="hl opt">?</span> element<span class="hl opt">.</span><span class="hl kwd">fireEvent</span><span class="hl opt">(</span><span class="hl str">'on'</span> <span class="hl opt">+</span> type<span class="hl opt">,</span> doc<span class="hl opt">.</span><span class="hl kwd">createEventObject</span><span class="hl opt">()) :</span> element<span class="hl opt">[</span><span class="hl str">'_on'</span> <span class="hl opt">+</span> type<span class="hl opt">]++</span>
      <span class="hl opt">}</span>

      <span class="hl com">/**</span>
<span class="hl com">        * Public API: off(), on(), add(), (remove()), one(), fire(), clone()</span>
<span class="hl com">        */</span>

      <span class="hl com">/**</span>
<span class="hl com">        * off(element[, eventType(s)[, handler ]])</span>
<span class="hl com">        */</span>
    <span class="hl opt">,</span> <span class="hl kwd">off</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>element<span class="hl opt">,</span> typeSpec<span class="hl opt">,</span> fn<span class="hl opt">) {</span>
        <span class="hl kwa">var</span> isTypeStr <span class="hl opt">=</span> <span class="hl kwd">isString</span><span class="hl opt">(</span>typeSpec<span class="hl opt">)</span>
          <span class="hl opt">,</span> k<span class="hl opt">,</span> type<span class="hl opt">,</span> namespaces<span class="hl opt">,</span> i

        <span class="hl kwa">if</span> <span class="hl opt">(</span>isTypeStr <span class="hl opt">&amp;&amp;</span> typeSpec<span class="hl opt">.</span><span class="hl kwd">indexOf</span><span class="hl opt">(</span><span class="hl str">' '</span><span class="hl opt">) &gt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
          <span class="hl slc">// off(el, 't1 t2 t3', fn) or off(el, 't1 t2 t3')</span>
          typeSpec <span class="hl opt">=</span> <span class="hl kwd">str2arr</span><span class="hl opt">(</span>typeSpec<span class="hl opt">)</span>
          <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> typeSpec<span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">--;)</span>
            <span class="hl kwd">off</span><span class="hl opt">(</span>element<span class="hl opt">,</span> typeSpec<span class="hl opt">[</span>i<span class="hl opt">],</span> fn<span class="hl opt">)</span>
          <span class="hl kwa">return</span> element
        <span class="hl opt">}</span>

        type <span class="hl opt">=</span> isTypeStr <span class="hl opt">&amp;&amp;</span> typeSpec<span class="hl opt">.</span><span class="hl kwd">replace</span><span class="hl opt">(</span>nameRegex<span class="hl opt">,</span> <span class="hl str">''</span><span class="hl opt">)</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>type <span class="hl opt">&amp;&amp;</span> customEvents<span class="hl opt">[</span>type<span class="hl opt">])</span> type <span class="hl opt">=</span> customEvents<span class="hl opt">[</span>type<span class="hl opt">].</span>base

        <span class="hl kwa">if</span> <span class="hl opt">(!</span>typeSpec <span class="hl opt">||</span> isTypeStr<span class="hl opt">) {</span>
          <span class="hl slc">// off(el) or off(el, t1.ns) or off(el, .ns) or off(el, .ns1.ns2.ns3)</span>
          <span class="hl kwa">if</span> <span class="hl opt">(</span>namespaces <span class="hl opt">=</span> isTypeStr <span class="hl opt">&amp;&amp;</span> typeSpec<span class="hl opt">.</span><span class="hl kwd">replace</span><span class="hl opt">(</span>namespaceRegex<span class="hl opt">,</span> <span class="hl str">''</span><span class="hl opt">))</span> namespaces <span class="hl opt">=</span> <span class="hl kwd">str2arr</span><span class="hl opt">(</span>namespaces<span class="hl opt">,</span> <span class="hl str">'.'</span><span class="hl opt">)</span>
          <span class="hl kwd">removeListener</span><span class="hl opt">(</span>element<span class="hl opt">,</span> type<span class="hl opt">,</span> fn<span class="hl opt">,</span> namespaces<span class="hl opt">)</span>
        <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span><span class="hl kwd">isFunction</span><span class="hl opt">(</span>typeSpec<span class="hl opt">)) {</span>
          <span class="hl slc">// off(el, fn)</span>
          <span class="hl kwd">removeListener</span><span class="hl opt">(</span>element<span class="hl opt">,</span> <span class="hl kwa">null</span><span class="hl opt">,</span> typeSpec<span class="hl opt">)</span>
        <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
          <span class="hl slc">// off(el, { t1: fn1, t2, fn2 })</span>
          <span class="hl kwa">for</span> <span class="hl opt">(</span>k <span class="hl kwa">in</span> typeSpec<span class="hl opt">) {</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>typeSpec<span class="hl opt">.</span><span class="hl kwd">hasOwnProperty</span><span class="hl opt">(</span>k<span class="hl opt">))</span> <span class="hl kwd">off</span><span class="hl opt">(</span>element<span class="hl opt">,</span> k<span class="hl opt">,</span> typeSpec<span class="hl opt">[</span>k<span class="hl opt">])</span>
          <span class="hl opt">}</span>
        <span class="hl opt">}</span>

        <span class="hl kwa">return</span> element
      <span class="hl opt">}</span>

      <span class="hl com">/**</span>
<span class="hl com">        * on(element, eventType(s)[, selector], handler[, args ])</span>
<span class="hl com">        */</span>
    <span class="hl opt">,</span> <span class="hl kwd">on</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>element<span class="hl opt">,</span> events<span class="hl opt">,</span> selector<span class="hl opt">,</span> fn<span class="hl opt">) {</span>
        <span class="hl kwa">var</span> originalFn<span class="hl opt">,</span> type<span class="hl opt">,</span> types<span class="hl opt">,</span> i<span class="hl opt">,</span> args<span class="hl opt">,</span> entry<span class="hl opt">,</span> first

        <span class="hl slc">//TODO: the undefined check means you can't pass an 'args' argument, fix this perhaps?</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>selector <span class="hl opt">===</span> undefined <span class="hl opt">&amp;&amp;</span> <span class="hl kwa">typeof</span> events <span class="hl opt">==</span> <span class="hl str">'object'</span><span class="hl opt">) {</span>
          <span class="hl slc">//TODO: this can't handle delegated events</span>
          <span class="hl kwa">for</span> <span class="hl opt">(</span>type <span class="hl kwa">in</span> events<span class="hl opt">) {</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>events<span class="hl opt">.</span><span class="hl kwd">hasOwnProperty</span><span class="hl opt">(</span>type<span class="hl opt">)) {</span>
              on<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> element<span class="hl opt">,</span> type<span class="hl opt">,</span> events<span class="hl opt">[</span>type<span class="hl opt">])</span>
            <span class="hl opt">}</span>
          <span class="hl opt">}</span>
          <span class="hl kwa">return</span>
        <span class="hl opt">}</span>

        <span class="hl kwa">if</span> <span class="hl opt">(!</span><span class="hl kwd">isFunction</span><span class="hl opt">(</span>selector<span class="hl opt">)) {</span>
          <span class="hl slc">// delegated event</span>
          originalFn <span class="hl opt">=</span> fn
          args       <span class="hl opt">=</span> slice<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span>arguments<span class="hl opt">,</span> <span class="hl num">4</span><span class="hl opt">)</span>
          fn         <span class="hl opt">=</span> <span class="hl kwd">delegate</span><span class="hl opt">(</span>selector<span class="hl opt">,</span> originalFn<span class="hl opt">,</span> selectorEngine<span class="hl opt">)</span>
        <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
          args       <span class="hl opt">=</span> slice<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span>arguments<span class="hl opt">,</span> <span class="hl num">3</span><span class="hl opt">)</span>
          fn         <span class="hl opt">=</span> originalFn <span class="hl opt">=</span> selector
        <span class="hl opt">}</span>

        types <span class="hl opt">=</span> <span class="hl kwd">str2arr</span><span class="hl opt">(</span>events<span class="hl opt">)</span>

        <span class="hl slc">// special case for one(), wrap in a self-removing handler</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span> <span class="hl opt">===</span> ONE<span class="hl opt">) {</span>
          fn <span class="hl opt">=</span> <span class="hl kwd">once</span><span class="hl opt">(</span>off<span class="hl opt">,</span> element<span class="hl opt">,</span> events<span class="hl opt">,</span> fn<span class="hl opt">,</span> originalFn<span class="hl opt">)</span>
        <span class="hl opt">}</span>

        <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> types<span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">--;) {</span>
          <span class="hl slc">// add new handler to the registry and check if it's the first for this element/type</span>
          first <span class="hl opt">=</span> registry<span class="hl opt">.</span><span class="hl kwd">put</span><span class="hl opt">(</span>entry <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">RegEntry</span><span class="hl opt">(</span>
              element
            <span class="hl opt">,</span> types<span class="hl opt">[</span>i<span class="hl opt">].</span><span class="hl kwd">replace</span><span class="hl opt">(</span>nameRegex<span class="hl opt">,</span> <span class="hl str">''</span><span class="hl opt">)</span> <span class="hl slc">// event type</span>
            <span class="hl opt">,</span> fn
            <span class="hl opt">,</span> originalFn
            <span class="hl opt">,</span> <span class="hl kwd">str2arr</span><span class="hl opt">(</span>types<span class="hl opt">[</span>i<span class="hl opt">].</span><span class="hl kwd">replace</span><span class="hl opt">(</span>namespaceRegex<span class="hl opt">,</span> <span class="hl str">''</span><span class="hl opt">),</span> <span class="hl str">'.'</span><span class="hl opt">)</span> <span class="hl slc">// namespaces</span>
            <span class="hl opt">,</span> args
            <span class="hl opt">,</span> <span class="hl kwa">false</span> <span class="hl slc">// not root</span>
          <span class="hl opt">))</span>
          <span class="hl kwa">if</span> <span class="hl opt">(</span>entry<span class="hl opt">[</span>eventSupport<span class="hl opt">] &amp;&amp;</span> first<span class="hl opt">) {</span>
            <span class="hl slc">// first event of this type on this element, add root listener</span>
            <span class="hl kwd">listener</span><span class="hl opt">(</span>element<span class="hl opt">,</span> entry<span class="hl opt">.</span>eventType<span class="hl opt">,</span> <span class="hl kwa">true</span><span class="hl opt">,</span> entry<span class="hl opt">.</span>customType<span class="hl opt">)</span>
          <span class="hl opt">}</span>
        <span class="hl opt">}</span>

        <span class="hl kwa">return</span> element
      <span class="hl opt">}</span>

      <span class="hl com">/**</span>
<span class="hl com">        * add(element[, selector], eventType(s), handler[, args ])</span>
<span class="hl com">        *</span>
<span class="hl com">        * Deprecated: kept (for now) for backward-compatibility</span>
<span class="hl com">        */</span>
    <span class="hl opt">,</span> <span class="hl kwd">add</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>element<span class="hl opt">,</span> events<span class="hl opt">,</span> fn<span class="hl opt">,</span> delfn<span class="hl opt">) {</span>
        <span class="hl kwa">return</span> on<span class="hl opt">.</span><span class="hl kwd">apply</span><span class="hl opt">(</span>
            <span class="hl kwa">null</span>
          <span class="hl opt">, !</span><span class="hl kwd">isString</span><span class="hl opt">(</span>fn<span class="hl opt">)</span>
              <span class="hl opt">?</span> slice<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span>arguments<span class="hl opt">)</span>
              <span class="hl opt">: [</span> element<span class="hl opt">,</span> fn<span class="hl opt">,</span> events<span class="hl opt">,</span> delfn <span class="hl opt">].</span><span class="hl kwd">concat</span><span class="hl opt">(</span>arguments<span class="hl opt">.</span>length <span class="hl opt">&gt;</span> <span class="hl num">3</span> <span class="hl opt">?</span> slice<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span>arguments<span class="hl opt">,</span> <span class="hl num">5</span><span class="hl opt">) : [])</span>
        <span class="hl opt">)</span>
      <span class="hl opt">}</span>

      <span class="hl com">/**</span>
<span class="hl com">        * one(element, eventType(s)[, selector], handler[, args ])</span>
<span class="hl com">        */</span>
    <span class="hl opt">,</span> <span class="hl kwd">one</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
        <span class="hl kwa">return</span> on<span class="hl opt">.</span><span class="hl kwd">apply</span><span class="hl opt">(</span>ONE<span class="hl opt">,</span> arguments<span class="hl opt">)</span>
      <span class="hl opt">}</span>

      <span class="hl com">/**</span>
<span class="hl com">        * fire(element, eventType(s)[, args ])</span>
<span class="hl com">        *</span>
<span class="hl com">        * The optional 'args' argument must be an array, if no 'args' argument is provided</span>
<span class="hl com">        * then we can use the browser's DOM event system, otherwise we trigger handlers manually</span>
<span class="hl com">        */</span>
    <span class="hl opt">,</span> <span class="hl kwd">fire</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>element<span class="hl opt">,</span> type<span class="hl opt">,</span> args<span class="hl opt">) {</span>
        <span class="hl kwa">var</span> types <span class="hl opt">=</span> <span class="hl kwd">str2arr</span><span class="hl opt">(</span>type<span class="hl opt">)</span>
          <span class="hl opt">,</span> i<span class="hl opt">,</span> j<span class="hl opt">,</span> l<span class="hl opt">,</span> names<span class="hl opt">,</span> handlers

        <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> types<span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">--;) {</span>
          type <span class="hl opt">=</span> types<span class="hl opt">[</span>i<span class="hl opt">].</span><span class="hl kwd">replace</span><span class="hl opt">(</span>nameRegex<span class="hl opt">,</span> <span class="hl str">''</span><span class="hl opt">)</span>
          <span class="hl kwa">if</span> <span class="hl opt">(</span>names <span class="hl opt">=</span> types<span class="hl opt">[</span>i<span class="hl opt">].</span><span class="hl kwd">replace</span><span class="hl opt">(</span>namespaceRegex<span class="hl opt">,</span> <span class="hl str">''</span><span class="hl opt">))</span> names <span class="hl opt">=</span> <span class="hl kwd">str2arr</span><span class="hl opt">(</span>names<span class="hl opt">,</span> <span class="hl str">'.'</span><span class="hl opt">)</span>
          <span class="hl kwa">if</span> <span class="hl opt">(!</span>names <span class="hl opt">&amp;&amp; !</span>args <span class="hl opt">&amp;&amp;</span> element<span class="hl opt">[</span>eventSupport<span class="hl opt">]) {</span>
            <span class="hl kwd">fireListener</span><span class="hl opt">(</span>nativeEvents<span class="hl opt">[</span>type<span class="hl opt">],</span> type<span class="hl opt">,</span> element<span class="hl opt">)</span>
          <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
            <span class="hl slc">// non-native event, either because of a namespace, arguments or a non DOM element</span>
            <span class="hl slc">// iterate over all listeners and manually 'fire'</span>
            handlers <span class="hl opt">=</span> registry<span class="hl opt">.</span><span class="hl kwa">get</span><span class="hl opt">(</span>element<span class="hl opt">,</span> type<span class="hl opt">,</span> <span class="hl kwa">null</span><span class="hl opt">,</span> <span class="hl kwa">false</span><span class="hl opt">)</span>
            args <span class="hl opt">= [</span><span class="hl kwa">false</span><span class="hl opt">].</span><span class="hl kwd">concat</span><span class="hl opt">(</span>args<span class="hl opt">)</span>
            <span class="hl kwa">for</span> <span class="hl opt">(</span>j <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> l <span class="hl opt">=</span> handlers<span class="hl opt">.</span>length<span class="hl opt">;</span> j <span class="hl opt">&lt;</span> l<span class="hl opt">;</span> j<span class="hl opt">++) {</span>
              <span class="hl kwa">if</span> <span class="hl opt">(</span>handlers<span class="hl opt">[</span>j<span class="hl opt">].</span><span class="hl kwd">inNamespaces</span><span class="hl opt">(</span>names<span class="hl opt">)) {</span>
                handlers<span class="hl opt">[</span>j<span class="hl opt">].</span>handler<span class="hl opt">.</span><span class="hl kwd">apply</span><span class="hl opt">(</span>element<span class="hl opt">,</span> args<span class="hl opt">)</span>
              <span class="hl opt">}</span>
            <span class="hl opt">}</span>
          <span class="hl opt">}</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">return</span> element
      <span class="hl opt">}</span>

      <span class="hl com">/**</span>
<span class="hl com">        * clone(dstElement, srcElement[, eventType ])</span>
<span class="hl com">        *</span>
<span class="hl com">        * TODO: perhaps for consistency we should allow the same flexibility in type specifiers?</span>
<span class="hl com">        */</span>
    <span class="hl opt">,</span> <span class="hl kwd">clone</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>element<span class="hl opt">,</span> from<span class="hl opt">,</span> type<span class="hl opt">) {</span>
        <span class="hl kwa">var</span> handlers <span class="hl opt">=</span> registry<span class="hl opt">.</span><span class="hl kwa">get</span><span class="hl opt">(</span>from<span class="hl opt">,</span> type<span class="hl opt">,</span> <span class="hl kwa">null</span><span class="hl opt">,</span> <span class="hl kwa">false</span><span class="hl opt">)</span>
          <span class="hl opt">,</span> l <span class="hl opt">=</span> handlers<span class="hl opt">.</span>length
          <span class="hl opt">,</span> i <span class="hl opt">=</span> <span class="hl num">0</span>
          <span class="hl opt">,</span> args<span class="hl opt">,</span> beanDel

        <span class="hl kwa">for</span> <span class="hl opt">(;</span> i <span class="hl opt">&lt;</span> l<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
          <span class="hl kwa">if</span> <span class="hl opt">(</span>handlers<span class="hl opt">[</span>i<span class="hl opt">].</span>original<span class="hl opt">) {</span>
            args <span class="hl opt">= [</span> element<span class="hl opt">,</span> handlers<span class="hl opt">[</span>i<span class="hl opt">].</span>type <span class="hl opt">]</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>beanDel <span class="hl opt">=</span> handlers<span class="hl opt">[</span>i<span class="hl opt">].</span>handler<span class="hl opt">.</span>__beanDel<span class="hl opt">)</span> args<span class="hl opt">.</span><span class="hl kwd">push</span><span class="hl opt">(</span>beanDel<span class="hl opt">.</span>selector<span class="hl opt">)</span>
            args<span class="hl opt">.</span><span class="hl kwd">push</span><span class="hl opt">(</span>handlers<span class="hl opt">[</span>i<span class="hl opt">].</span>original<span class="hl opt">)</span>
            on<span class="hl opt">.</span><span class="hl kwd">apply</span><span class="hl opt">(</span><span class="hl kwa">null</span><span class="hl opt">,</span> args<span class="hl opt">)</span>
          <span class="hl opt">}</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">return</span> element
      <span class="hl opt">}</span>

    <span class="hl opt">,</span> bean <span class="hl opt">= {</span>
          <span class="hl str">'on'</span>                <span class="hl opt">:</span> on
        <span class="hl opt">,</span> <span class="hl str">'add'</span>               <span class="hl opt">:</span> add
        <span class="hl opt">,</span> <span class="hl str">'one'</span>               <span class="hl opt">:</span> one
        <span class="hl opt">,</span> <span class="hl str">'off'</span>               <span class="hl opt">:</span> off
        <span class="hl opt">,</span> <span class="hl str">'remove'</span>            <span class="hl opt">:</span> off
        <span class="hl opt">,</span> <span class="hl str">'clone'</span>             <span class="hl opt">:</span> clone
        <span class="hl opt">,</span> <span class="hl str">'fire'</span>              <span class="hl opt">:</span> fire
        <span class="hl opt">,</span> <span class="hl str">'Event'</span>             <span class="hl opt">:</span> Event
        <span class="hl opt">,</span> <span class="hl str">'setSelectorEngine'</span> <span class="hl opt">:</span> setSelectorEngine
        <span class="hl opt">,</span> <span class="hl str">'noConflict'</span>        <span class="hl opt">:</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
            context<span class="hl opt">[</span>name<span class="hl opt">] =</span> old
            <span class="hl kwa">return this</span>
          <span class="hl opt">}</span>
      <span class="hl opt">}</span>

  <span class="hl slc">// for IE, clean up on unload to avoid leaks</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>win<span class="hl opt">.</span>attachEvent<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> <span class="hl kwd">cleanup</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
      <span class="hl kwa">var</span> i<span class="hl opt">,</span> entries <span class="hl opt">=</span> registry<span class="hl opt">.</span><span class="hl kwd">entries</span><span class="hl opt">()</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl kwa">in</span> entries<span class="hl opt">) {</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>entries<span class="hl opt">[</span>i<span class="hl opt">].</span>type <span class="hl opt">&amp;&amp;</span> entries<span class="hl opt">[</span>i<span class="hl opt">].</span>type <span class="hl opt">!==</span> <span class="hl str">'unload'</span><span class="hl opt">)</span> <span class="hl kwd">off</span><span class="hl opt">(</span>entries<span class="hl opt">[</span>i<span class="hl opt">].</span>element<span class="hl opt">,</span> entries<span class="hl opt">[</span>i<span class="hl opt">].</span>type<span class="hl opt">)</span>
      <span class="hl opt">}</span>
      win<span class="hl opt">.</span><span class="hl kwd">detachEvent</span><span class="hl opt">(</span><span class="hl str">'onunload'</span><span class="hl opt">,</span> cleanup<span class="hl opt">)</span>
      win<span class="hl opt">.</span>CollectGarbage <span class="hl opt">&amp;&amp;</span> win<span class="hl opt">.</span><span class="hl kwd">CollectGarbage</span><span class="hl opt">()</span>
    <span class="hl opt">}</span>
    win<span class="hl opt">.</span><span class="hl kwd">attachEvent</span><span class="hl opt">(</span><span class="hl str">'onunload'</span><span class="hl opt">,</span> cleanup<span class="hl opt">)</span>
  <span class="hl opt">}</span>

  <span class="hl slc">// initialize selector engine to internal default (qSA or throw Error)</span>
  <span class="hl kwd">setSelectorEngine</span><span class="hl opt">()</span>

  <span class="hl kwa">return</span> bean
<span class="hl opt">});</span>

<span class="hl opt">},{}],</span><span class="hl num">28</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>require<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl opt">(</span><span class="hl kwa">function</span> <span class="hl opt">(</span>process<span class="hl opt">,</span>global<span class="hl opt">){</span>
<span class="hl com">/* &#64;preserve</span>
<span class="hl com"> * The MIT License (MIT)</span>
<span class="hl com"> * </span>
<span class="hl com"> * Copyright (c) 2014 Petka Antonov</span>
<span class="hl com"> * </span>
<span class="hl com"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span>
<span class="hl com"> * of this software and associated documentation files (the &quot;Software&quot;), to deal</span>
<span class="hl com"> * in the Software without restriction, including without limitation the rights</span>
<span class="hl com"> * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span>
<span class="hl com"> * copies of the Software, and to permit persons to whom the Software is</span>
<span class="hl com"> * furnished to do so, subject to the following conditions:</span>
<span class="hl com"> * </span>
<span class="hl com"> * The above copyright notice and this permission notice shall be included in</span>
<span class="hl com"> * all copies or substantial portions of the Software.</span>
<span class="hl com"> * </span>
<span class="hl com"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span>
<span class="hl com"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span>
<span class="hl com"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE</span>
<span class="hl com"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span>
<span class="hl com"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span>
<span class="hl com"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN</span>
<span class="hl com"> * THE SOFTWARE.</span>
<span class="hl com"> * </span>
<span class="hl com"> */</span>
<span class="hl com">/**</span>
<span class="hl com"> * bluebird build version 2.9.34</span>
<span class="hl com"> * Features enabled: core, race, call_get, generators, map, nodeify, promisify, props, reduce, settle, some, cancel, using, filter, any, each, timers</span>
<span class="hl com">*/</span>
<span class="hl opt">!</span><span class="hl kwa">function</span><span class="hl opt">(</span>e<span class="hl opt">){</span><span class="hl kwa">if</span><span class="hl opt">(</span><span class="hl str">&quot;object&quot;</span><span class="hl opt">==</span><span class="hl kwa">typeof</span> exports<span class="hl opt">&amp;&amp;</span><span class="hl str">&quot;undefined&quot;</span><span class="hl opt">!=</span><span class="hl kwa">typeof</span> module<span class="hl opt">)</span>module<span class="hl opt">.</span>exports<span class="hl opt">=</span><span class="hl kwd">e</span><span class="hl opt">();</span><span class="hl kwa">else if</span><span class="hl opt">(</span><span class="hl str">&quot;function&quot;</span><span class="hl opt">==</span><span class="hl kwa">typeof</span> define<span class="hl opt">&amp;&amp;</span>define<span class="hl opt">.</span>amd<span class="hl opt">)</span><span class="hl kwd">define</span><span class="hl opt">([],</span>e<span class="hl opt">);</span><span class="hl kwa">else</span><span class="hl opt">{</span><span class="hl kwa">var</span> f<span class="hl opt">;</span><span class="hl str">&quot;undefined&quot;</span><span class="hl opt">!=</span><span class="hl kwa">typeof</span> window<span class="hl opt">?</span>f<span class="hl opt">=</span>window<span class="hl opt">:</span><span class="hl str">&quot;undefined&quot;</span><span class="hl opt">!=</span><span class="hl kwa">typeof</span> global<span class="hl opt">?</span>f<span class="hl opt">=</span>global<span class="hl opt">:</span><span class="hl str">&quot;undefined&quot;</span><span class="hl opt">!=</span><span class="hl kwa">typeof</span> self<span class="hl opt">&amp;&amp;(</span>f<span class="hl opt">=</span>self<span class="hl opt">),</span>f<span class="hl opt">.</span>Promise<span class="hl opt">=</span><span class="hl kwd">e</span><span class="hl opt">()}}(</span><span class="hl kwa">function</span><span class="hl opt">(){</span><span class="hl kwa">var</span> define<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">;</span><span class="hl kwa">return</span> <span class="hl opt">(</span><span class="hl kwa">function</span> <span class="hl kwd">e</span><span class="hl opt">(</span>t<span class="hl opt">,</span>n<span class="hl opt">,</span>r<span class="hl opt">){</span><span class="hl kwa">function</span> <span class="hl kwd">s</span><span class="hl opt">(</span>o<span class="hl opt">,</span>u<span class="hl opt">){</span><span class="hl kwa">if</span><span class="hl opt">(!</span>n<span class="hl opt">[</span>o<span class="hl opt">]){</span><span class="hl kwa">if</span><span class="hl opt">(!</span>t<span class="hl opt">[</span>o<span class="hl opt">]){</span><span class="hl kwa">var</span> a<span class="hl opt">=</span><span class="hl kwa">typeof</span> _dereq_<span class="hl opt">==</span><span class="hl str">&quot;function&quot;</span><span class="hl opt">&amp;&amp;</span>_dereq_<span class="hl opt">;</span><span class="hl kwa">if</span><span class="hl opt">(!</span>u<span class="hl opt">&amp;&amp;</span>a<span class="hl opt">)</span><span class="hl kwa">return</span> <span class="hl kwd">a</span><span class="hl opt">(</span>o<span class="hl opt">,!</span><span class="hl num">0</span><span class="hl opt">);</span><span class="hl kwa">if</span><span class="hl opt">(</span>i<span class="hl opt">)</span><span class="hl kwa">return</span> <span class="hl kwd">i</span><span class="hl opt">(</span>o<span class="hl opt">,!</span><span class="hl num">0</span><span class="hl opt">);</span><span class="hl kwa">var</span> f<span class="hl opt">=</span><span class="hl kwa">new</span> <span class="hl kwd">Error</span><span class="hl opt">(</span><span class="hl str">&quot;Cannot find module '&quot;</span><span class="hl opt">+</span>o<span class="hl opt">+</span><span class="hl str">&quot;'&quot;</span><span class="hl opt">);</span><span class="hl kwa">throw</span> f<span class="hl opt">.</span>code<span class="hl opt">=</span><span class="hl str">&quot;MODULE_NOT_FOUND&quot;</span><span class="hl opt">,</span>f<span class="hl opt">}</span><span class="hl kwa">var</span> l<span class="hl opt">=</span>n<span class="hl opt">[</span>o<span class="hl opt">]={</span>exports<span class="hl opt">:{}};</span>t<span class="hl opt">[</span>o<span class="hl opt">][</span><span class="hl num">0</span><span class="hl opt">].</span><span class="hl kwd">call</span><span class="hl opt">(</span>l<span class="hl opt">.</span>exports<span class="hl opt">,</span><span class="hl kwa">function</span><span class="hl opt">(</span>e<span class="hl opt">){</span><span class="hl kwa">var</span> n<span class="hl opt">=</span>t<span class="hl opt">[</span>o<span class="hl opt">][</span><span class="hl num">1</span><span class="hl opt">][</span>e<span class="hl opt">];</span><span class="hl kwa">return</span> <span class="hl kwd">s</span><span class="hl opt">(</span>n<span class="hl opt">?</span>n<span class="hl opt">:</span>e<span class="hl opt">)},</span>l<span class="hl opt">,</span>l<span class="hl opt">.</span>exports<span class="hl opt">,</span>e<span class="hl opt">,</span>t<span class="hl opt">,</span>n<span class="hl opt">,</span>r<span class="hl opt">)}</span><span class="hl kwa">return</span> n<span class="hl opt">[</span>o<span class="hl opt">].</span>exports<span class="hl opt">}</span><span class="hl kwa">var</span> i<span class="hl opt">=</span><span class="hl kwa">typeof</span> _dereq_<span class="hl opt">==</span><span class="hl str">&quot;function&quot;</span><span class="hl opt">&amp;&amp;</span>_dereq_<span class="hl opt">;</span><span class="hl kwa">for</span><span class="hl opt">(</span><span class="hl kwa">var</span> o<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>o<span class="hl opt">&lt;</span>r<span class="hl opt">.</span>length<span class="hl opt">;</span>o<span class="hl opt">++)</span><span class="hl kwd">s</span><span class="hl opt">(</span>r<span class="hl opt">[</span>o<span class="hl opt">]);</span><span class="hl kwa">return</span> s<span class="hl opt">})({</span><span class="hl num">1</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>_dereq_<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl str">&quot;use strict&quot;</span><span class="hl opt">;</span>
module<span class="hl opt">.</span><span class="hl kwd">exports</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>Promise<span class="hl opt">) {</span>
<span class="hl kwa">var</span> SomePromiseArray <span class="hl opt">=</span> Promise<span class="hl opt">.</span>_SomePromiseArray<span class="hl opt">;</span>
<span class="hl kwa">function</span> <span class="hl kwd">any</span><span class="hl opt">(</span>promises<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> ret <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">SomePromiseArray</span><span class="hl opt">(</span>promises<span class="hl opt">);</span>
    <span class="hl kwa">var</span> promise <span class="hl opt">=</span> ret<span class="hl opt">.</span><span class="hl kwd">promise</span><span class="hl opt">();</span>
    ret<span class="hl opt">.</span><span class="hl kwd">setHowMany</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">);</span>
    ret<span class="hl opt">.</span><span class="hl kwd">setUnwrap</span><span class="hl opt">();</span>
    ret<span class="hl opt">.</span><span class="hl kwd">init</span><span class="hl opt">();</span>
    <span class="hl kwa">return</span> promise<span class="hl opt">;</span>
<span class="hl opt">}</span>

Promise<span class="hl opt">.</span><span class="hl kwd">any</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>promises<span class="hl opt">) {</span>
    <span class="hl kwa">return</span> <span class="hl kwd">any</span><span class="hl opt">(</span>promises<span class="hl opt">);</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">any</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return</span> <span class="hl kwd">any</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">);</span>
<span class="hl opt">};</span>

<span class="hl opt">};</span>

<span class="hl opt">},{}],</span><span class="hl num">2</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>_dereq_<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl str">&quot;use strict&quot;</span><span class="hl opt">;</span>
<span class="hl kwa">var</span> firstLineError<span class="hl opt">;</span>
<span class="hl kwa">try</span> <span class="hl opt">{</span><span class="hl kwa">throw new</span> <span class="hl kwd">Error</span><span class="hl opt">(); }</span> <span class="hl kwa">catch</span> <span class="hl opt">(</span>e<span class="hl opt">) {</span>firstLineError <span class="hl opt">=</span> e<span class="hl opt">;}</span>
<span class="hl kwa">var</span> schedule <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./schedule.js&quot;</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> Queue <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./queue.js&quot;</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> util <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">);</span>

<span class="hl kwa">function</span> <span class="hl kwd">Async</span><span class="hl opt">() {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_isTickUsed <span class="hl opt">=</span> <span class="hl kwa">false</span><span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_lateQueue <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Queue</span><span class="hl opt">(</span><span class="hl num">16</span><span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_normalQueue <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Queue</span><span class="hl opt">(</span><span class="hl num">16</span><span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_trampolineEnabled <span class="hl opt">=</span> <span class="hl kwa">true</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> self <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">drainQueues</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
        self<span class="hl opt">.</span><span class="hl kwd">_drainQueues</span><span class="hl opt">();</span>
    <span class="hl opt">};</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_schedule <span class="hl opt">=</span>
        schedule<span class="hl opt">.</span>isStatic <span class="hl opt">?</span> <span class="hl kwd">schedule</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>drainQueues<span class="hl opt">) :</span> schedule<span class="hl opt">;</span>
<span class="hl opt">}</span>

Async<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">disableTrampolineIfNecessary</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>util<span class="hl opt">.</span>hasDevTools<span class="hl opt">) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>_trampolineEnabled <span class="hl opt">=</span> <span class="hl kwa">false</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
<span class="hl opt">};</span>

Async<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">enableTrampoline</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!</span><span class="hl kwa">this</span><span class="hl opt">.</span>_trampolineEnabled<span class="hl opt">) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>_trampolineEnabled <span class="hl opt">=</span> <span class="hl kwa">true</span><span class="hl opt">;</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_schedule</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>fn<span class="hl opt">) {</span>
            <span class="hl kwd">setTimeout</span><span class="hl opt">(</span>fn<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">);</span>
        <span class="hl opt">};</span>
    <span class="hl opt">}</span>
<span class="hl opt">};</span>

Async<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">haveItemsQueued</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span>_normalQueue<span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">() &gt;</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

Async<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">throwLater</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>fn<span class="hl opt">,</span> arg<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>arguments<span class="hl opt">.</span>length <span class="hl opt">===</span> <span class="hl num">1</span><span class="hl opt">) {</span>
        arg <span class="hl opt">=</span> fn<span class="hl opt">;</span>
        <span class="hl kwd">fn</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span> <span class="hl kwa">throw</span> arg<span class="hl opt">; };</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> setTimeout <span class="hl opt">!==</span> <span class="hl str">&quot;undefined&quot;</span><span class="hl opt">) {</span>
        <span class="hl kwd">setTimeout</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">() {</span>
            <span class="hl kwd">fn</span><span class="hl opt">(</span>arg<span class="hl opt">);</span>
        <span class="hl opt">},</span> <span class="hl num">0</span><span class="hl opt">);</span>
    <span class="hl opt">}</span> <span class="hl kwa">else try</span> <span class="hl opt">{</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_schedule</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">() {</span>
            <span class="hl kwd">fn</span><span class="hl opt">(</span>arg<span class="hl opt">);</span>
        <span class="hl opt">});</span>
    <span class="hl opt">}</span> <span class="hl kwa">catch</span> <span class="hl opt">(</span>e<span class="hl opt">) {</span>
        <span class="hl kwa">throw new</span> <span class="hl kwd">Error</span><span class="hl opt">(</span><span class="hl str">&quot;No async scheduler available</span><span class="hl esc">\u000a\u000a</span>    <span class="hl str">See http://goo.gl/m3OTXk</span><span class="hl esc">\u000a</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
<span class="hl opt">};</span>

<span class="hl kwa">function</span> <span class="hl kwd">AsyncInvokeLater</span><span class="hl opt">(</span>fn<span class="hl opt">,</span> receiver<span class="hl opt">,</span> arg<span class="hl opt">) {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_lateQueue<span class="hl opt">.</span><span class="hl kwd">push</span><span class="hl opt">(</span>fn<span class="hl opt">,</span> receiver<span class="hl opt">,</span> arg<span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_queueTick</span><span class="hl opt">();</span>
<span class="hl opt">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">AsyncInvoke</span><span class="hl opt">(</span>fn<span class="hl opt">,</span> receiver<span class="hl opt">,</span> arg<span class="hl opt">) {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_normalQueue<span class="hl opt">.</span><span class="hl kwd">push</span><span class="hl opt">(</span>fn<span class="hl opt">,</span> receiver<span class="hl opt">,</span> arg<span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_queueTick</span><span class="hl opt">();</span>
<span class="hl opt">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">AsyncSettlePromises</span><span class="hl opt">(</span>promise<span class="hl opt">) {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_normalQueue<span class="hl opt">.</span><span class="hl kwd">_pushOne</span><span class="hl opt">(</span>promise<span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_queueTick</span><span class="hl opt">();</span>
<span class="hl opt">}</span>

<span class="hl kwa">if</span> <span class="hl opt">(!</span>util<span class="hl opt">.</span>hasDevTools<span class="hl opt">) {</span>
    Async<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>invokeLater <span class="hl opt">=</span> AsyncInvokeLater<span class="hl opt">;</span>
    Async<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>invoke <span class="hl opt">=</span> AsyncInvoke<span class="hl opt">;</span>
    Async<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>settlePromises <span class="hl opt">=</span> AsyncSettlePromises<span class="hl opt">;</span>
<span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>schedule<span class="hl opt">.</span>isStatic<span class="hl opt">) {</span>
        <span class="hl kwd">schedule</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>fn<span class="hl opt">) {</span> <span class="hl kwd">setTimeout</span><span class="hl opt">(</span>fn<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">); };</span>
    <span class="hl opt">}</span>
    Async<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">invokeLater</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>fn<span class="hl opt">,</span> receiver<span class="hl opt">,</span> arg<span class="hl opt">) {</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>_trampolineEnabled<span class="hl opt">) {</span>
            AsyncInvokeLater<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> fn<span class="hl opt">,</span> receiver<span class="hl opt">,</span> arg<span class="hl opt">);</span>
        <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
            <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_schedule</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">() {</span>
                <span class="hl kwd">setTimeout</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">() {</span>
                    fn<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span>receiver<span class="hl opt">,</span> arg<span class="hl opt">);</span>
                <span class="hl opt">},</span> <span class="hl num">100</span><span class="hl opt">);</span>
            <span class="hl opt">});</span>
        <span class="hl opt">}</span>
    <span class="hl opt">};</span>

    Async<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">invoke</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>fn<span class="hl opt">,</span> receiver<span class="hl opt">,</span> arg<span class="hl opt">) {</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>_trampolineEnabled<span class="hl opt">) {</span>
            AsyncInvoke<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> fn<span class="hl opt">,</span> receiver<span class="hl opt">,</span> arg<span class="hl opt">);</span>
        <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
            <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_schedule</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">() {</span>
                fn<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span>receiver<span class="hl opt">,</span> arg<span class="hl opt">);</span>
            <span class="hl opt">});</span>
        <span class="hl opt">}</span>
    <span class="hl opt">};</span>

    Async<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">settlePromises</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>promise<span class="hl opt">) {</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>_trampolineEnabled<span class="hl opt">) {</span>
            AsyncSettlePromises<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> promise<span class="hl opt">);</span>
        <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
            <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_schedule</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">() {</span>
                promise<span class="hl opt">.</span><span class="hl kwd">_settlePromises</span><span class="hl opt">();</span>
            <span class="hl opt">});</span>
        <span class="hl opt">}</span>
    <span class="hl opt">};</span>
<span class="hl opt">}</span>

Async<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">invokeFirst</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>fn<span class="hl opt">,</span> receiver<span class="hl opt">,</span> arg<span class="hl opt">) {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_normalQueue<span class="hl opt">.</span><span class="hl kwd">unshift</span><span class="hl opt">(</span>fn<span class="hl opt">,</span> receiver<span class="hl opt">,</span> arg<span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_queueTick</span><span class="hl opt">();</span>
<span class="hl opt">};</span>

Async<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_drainQueue</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>queue<span class="hl opt">) {</span>
    <span class="hl kwa">while</span> <span class="hl opt">(</span>queue<span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">() &gt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
        <span class="hl kwa">var</span> fn <span class="hl opt">=</span> queue<span class="hl opt">.</span><span class="hl kwd">shift</span><span class="hl opt">();</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> fn <span class="hl opt">!==</span> <span class="hl str">&quot;function&quot;</span><span class="hl opt">) {</span>
            fn<span class="hl opt">.</span><span class="hl kwd">_settlePromises</span><span class="hl opt">();</span>
            <span class="hl kwa">continue</span><span class="hl opt">;</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">var</span> receiver <span class="hl opt">=</span> queue<span class="hl opt">.</span><span class="hl kwd">shift</span><span class="hl opt">();</span>
        <span class="hl kwa">var</span> arg <span class="hl opt">=</span> queue<span class="hl opt">.</span><span class="hl kwd">shift</span><span class="hl opt">();</span>
        fn<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span>receiver<span class="hl opt">,</span> arg<span class="hl opt">);</span>
    <span class="hl opt">}</span>
<span class="hl opt">};</span>

Async<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_drainQueues</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_drainQueue</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>_normalQueue<span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_reset</span><span class="hl opt">();</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_drainQueue</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>_lateQueue<span class="hl opt">);</span>
<span class="hl opt">};</span>

Async<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_queueTick</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!</span><span class="hl kwa">this</span><span class="hl opt">.</span>_isTickUsed<span class="hl opt">) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>_isTickUsed <span class="hl opt">=</span> <span class="hl kwa">true</span><span class="hl opt">;</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_schedule</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>drainQueues<span class="hl opt">);</span>
    <span class="hl opt">}</span>
<span class="hl opt">};</span>

Async<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_reset</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_isTickUsed <span class="hl opt">=</span> <span class="hl kwa">false</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

module<span class="hl opt">.</span>exports <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Async</span><span class="hl opt">();</span>
module<span class="hl opt">.</span>exports<span class="hl opt">.</span>firstLineError <span class="hl opt">=</span> firstLineError<span class="hl opt">;</span>

<span class="hl opt">},{</span><span class="hl str">&quot;./queue.js&quot;</span><span class="hl opt">:</span><span class="hl num">28</span><span class="hl opt">,</span><span class="hl str">&quot;./schedule.js&quot;</span><span class="hl opt">:</span><span class="hl num">31</span><span class="hl opt">,</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">:</span><span class="hl num">38</span><span class="hl opt">}],</span><span class="hl num">3</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>_dereq_<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl str">&quot;use strict&quot;</span><span class="hl opt">;</span>
module<span class="hl opt">.</span><span class="hl kwd">exports</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>Promise<span class="hl opt">,</span> INTERNAL<span class="hl opt">,</span> tryConvertToPromise<span class="hl opt">) {</span>
<span class="hl kwa">var</span> <span class="hl kwd">rejectThis</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>_<span class="hl opt">,</span> e<span class="hl opt">) {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_reject</span><span class="hl opt">(</span>e<span class="hl opt">);</span>
<span class="hl opt">};</span>

<span class="hl kwa">var</span> <span class="hl kwd">targetRejected</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>e<span class="hl opt">,</span> context<span class="hl opt">) {</span>
    context<span class="hl opt">.</span>promiseRejectionQueued <span class="hl opt">=</span> <span class="hl kwa">true</span><span class="hl opt">;</span>
    context<span class="hl opt">.</span>bindingPromise<span class="hl opt">.</span><span class="hl kwd">_then</span><span class="hl opt">(</span>rejectThis<span class="hl opt">,</span> rejectThis<span class="hl opt">,</span> <span class="hl kwa">null</span><span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">,</span> e<span class="hl opt">);</span>
<span class="hl opt">};</span>

<span class="hl kwa">var</span> <span class="hl kwd">bindingResolved</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>thisArg<span class="hl opt">,</span> context<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_isPending</span><span class="hl opt">()) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_resolveCallback</span><span class="hl opt">(</span>context<span class="hl opt">.</span>target<span class="hl opt">);</span>
    <span class="hl opt">}</span>
<span class="hl opt">};</span>

<span class="hl kwa">var</span> <span class="hl kwd">bindingRejected</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>e<span class="hl opt">,</span> context<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!</span>context<span class="hl opt">.</span>promiseRejectionQueued<span class="hl opt">)</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_reject</span><span class="hl opt">(</span>e<span class="hl opt">);</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">bind</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>thisArg<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> maybePromise <span class="hl opt">=</span> <span class="hl kwd">tryConvertToPromise</span><span class="hl opt">(</span>thisArg<span class="hl opt">);</span>
    <span class="hl kwa">var</span> ret <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Promise</span><span class="hl opt">(</span>INTERNAL<span class="hl opt">);</span>
    ret<span class="hl opt">.</span><span class="hl kwd">_propagateFrom</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">);</span>
    <span class="hl kwa">var</span> target <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_target</span><span class="hl opt">();</span>

    ret<span class="hl opt">.</span><span class="hl kwd">_setBoundTo</span><span class="hl opt">(</span>maybePromise<span class="hl opt">);</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>maybePromise <span class="hl kwa">instanceof</span> Promise<span class="hl opt">) {</span>
        <span class="hl kwa">var</span> context <span class="hl opt">= {</span>
            promiseRejectionQueued<span class="hl opt">:</span> <span class="hl kwa">false</span><span class="hl opt">,</span>
            promise<span class="hl opt">:</span> ret<span class="hl opt">,</span>
            target<span class="hl opt">:</span> target<span class="hl opt">,</span>
            bindingPromise<span class="hl opt">:</span> maybePromise
        <span class="hl opt">};</span>
        target<span class="hl opt">.</span><span class="hl kwd">_then</span><span class="hl opt">(</span>INTERNAL<span class="hl opt">,</span> targetRejected<span class="hl opt">,</span> ret<span class="hl opt">.</span>_progress<span class="hl opt">,</span> ret<span class="hl opt">,</span> context<span class="hl opt">);</span>
        maybePromise<span class="hl opt">.</span><span class="hl kwd">_then</span><span class="hl opt">(</span>
            bindingResolved<span class="hl opt">,</span> bindingRejected<span class="hl opt">,</span> ret<span class="hl opt">.</span>_progress<span class="hl opt">,</span> ret<span class="hl opt">,</span> context<span class="hl opt">);</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
        ret<span class="hl opt">.</span><span class="hl kwd">_resolveCallback</span><span class="hl opt">(</span>target<span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return</span> ret<span class="hl opt">;</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_setBoundTo</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>obj<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>obj <span class="hl opt">!==</span> undefined<span class="hl opt">) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">|</span> <span class="hl num">131072</span><span class="hl opt">;</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>_boundTo <span class="hl opt">=</span> obj<span class="hl opt">;</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">&amp; (~</span><span class="hl num">131072</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_isBound</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">&amp;</span> <span class="hl num">131072</span><span class="hl opt">) ===</span> <span class="hl num">131072</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwd">bind</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>thisArg<span class="hl opt">,</span> value<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> maybePromise <span class="hl opt">=</span> <span class="hl kwd">tryConvertToPromise</span><span class="hl opt">(</span>thisArg<span class="hl opt">);</span>
    <span class="hl kwa">var</span> ret <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Promise</span><span class="hl opt">(</span>INTERNAL<span class="hl opt">);</span>

    ret<span class="hl opt">.</span><span class="hl kwd">_setBoundTo</span><span class="hl opt">(</span>maybePromise<span class="hl opt">);</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>maybePromise <span class="hl kwa">instanceof</span> Promise<span class="hl opt">) {</span>
        maybePromise<span class="hl opt">.</span><span class="hl kwd">_then</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">() {</span>
            ret<span class="hl opt">.</span><span class="hl kwd">_resolveCallback</span><span class="hl opt">(</span>value<span class="hl opt">);</span>
        <span class="hl opt">},</span> ret<span class="hl opt">.</span>_reject<span class="hl opt">,</span> ret<span class="hl opt">.</span>_progress<span class="hl opt">,</span> ret<span class="hl opt">,</span> <span class="hl kwa">null</span><span class="hl opt">);</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
        ret<span class="hl opt">.</span><span class="hl kwd">_resolveCallback</span><span class="hl opt">(</span>value<span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return</span> ret<span class="hl opt">;</span>
<span class="hl opt">};</span>
<span class="hl opt">};</span>

<span class="hl opt">},{}],</span><span class="hl num">4</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>_dereq_<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl str">&quot;use strict&quot;</span><span class="hl opt">;</span>
<span class="hl kwa">var</span> old<span class="hl opt">;</span>
<span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> Promise <span class="hl opt">!==</span> <span class="hl str">&quot;undefined&quot;</span><span class="hl opt">)</span> old <span class="hl opt">=</span> Promise<span class="hl opt">;</span>
<span class="hl kwa">function</span> <span class="hl kwd">noConflict</span><span class="hl opt">() {</span>
    <span class="hl kwa">try</span> <span class="hl opt">{</span> <span class="hl kwa">if</span> <span class="hl opt">(</span>Promise <span class="hl opt">===</span> bluebird<span class="hl opt">)</span> Promise <span class="hl opt">=</span> old<span class="hl opt">; }</span>
    <span class="hl kwa">catch</span> <span class="hl opt">(</span>e<span class="hl opt">) {}</span>
    <span class="hl kwa">return</span> bluebird<span class="hl opt">;</span>
<span class="hl opt">}</span>
<span class="hl kwa">var</span> bluebird <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./promise.js&quot;</span><span class="hl opt">)();</span>
bluebird<span class="hl opt">.</span>noConflict <span class="hl opt">=</span> noConflict<span class="hl opt">;</span>
module<span class="hl opt">.</span>exports <span class="hl opt">=</span> bluebird<span class="hl opt">;</span>

<span class="hl opt">},{</span><span class="hl str">&quot;./promise.js&quot;</span><span class="hl opt">:</span><span class="hl num">23</span><span class="hl opt">}],</span><span class="hl num">5</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>_dereq_<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl str">&quot;use strict&quot;</span><span class="hl opt">;</span>
<span class="hl kwa">var</span> cr <span class="hl opt">=</span> Object<span class="hl opt">.</span>create<span class="hl opt">;</span>
<span class="hl kwa">if</span> <span class="hl opt">(</span>cr<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> callerCache <span class="hl opt">=</span> <span class="hl kwd">cr</span><span class="hl opt">(</span><span class="hl kwa">null</span><span class="hl opt">);</span>
    <span class="hl kwa">var</span> getterCache <span class="hl opt">=</span> <span class="hl kwd">cr</span><span class="hl opt">(</span><span class="hl kwa">null</span><span class="hl opt">);</span>
    callerCache<span class="hl opt">[</span><span class="hl str">&quot; size&quot;</span><span class="hl opt">] =</span> getterCache<span class="hl opt">[</span><span class="hl str">&quot; size&quot;</span><span class="hl opt">] =</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

module<span class="hl opt">.</span><span class="hl kwd">exports</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>Promise<span class="hl opt">) {</span>
<span class="hl kwa">var</span> util <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> canEvaluate <span class="hl opt">=</span> util<span class="hl opt">.</span>canEvaluate<span class="hl opt">;</span>
<span class="hl kwa">var</span> isIdentifier <span class="hl opt">=</span> util<span class="hl opt">.</span>isIdentifier<span class="hl opt">;</span>

<span class="hl kwa">var</span> getMethodCaller<span class="hl opt">;</span>
<span class="hl kwa">var</span> getGetter<span class="hl opt">;</span>
<span class="hl kwa">if</span> <span class="hl opt">(!</span><span class="hl kwa">true</span><span class="hl opt">) {</span>
<span class="hl kwa">var</span> <span class="hl kwd">makeMethodCaller</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>methodName<span class="hl opt">) {</span>
    <span class="hl kwa">return new</span> <span class="hl kwd">Function</span><span class="hl opt">(</span><span class="hl str">&quot;ensureMethod&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;</span>                                    <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">        return function(obj) {</span>                                               <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">            'use strict'</span>                                                     <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">            var len = this.length;</span>                                           <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">            ensureMethod(obj, 'methodName');</span>                                 <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">            switch(len) {</span>                                                    <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">                case 1: return obj.methodName(this[0]);</span>                      <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">                case 2: return obj.methodName(this[0], this[1]);</span>             <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">                case 3: return obj.methodName(this[0], this[1], this[2]);</span>    <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">                case 0: return obj.methodName();</span>                             <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">                default:</span>                                                     <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">                    return obj.methodName.apply(obj, this);</span>                  <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">            }</span>                                                                <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">        };</span>                                                                   <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">        &quot;</span><span class="hl opt">.</span><span class="hl kwd">replace</span><span class="hl opt">(</span><span class="hl kwc">/methodName/g</span><span class="hl opt">,</span> methodName<span class="hl opt">))(</span>ensureMethod<span class="hl opt">);</span>
<span class="hl opt">};</span>

<span class="hl kwa">var</span> <span class="hl kwd">makeGetter</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>propertyName<span class="hl opt">) {</span>
    <span class="hl kwa">return new</span> <span class="hl kwd">Function</span><span class="hl opt">(</span><span class="hl str">&quot;obj&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;</span>                                             <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">        'use strict';</span>                                                        <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">        return obj.propertyName;</span>                                             <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">        &quot;</span><span class="hl opt">.</span><span class="hl kwd">replace</span><span class="hl opt">(</span><span class="hl str">&quot;propertyName&quot;</span><span class="hl opt">,</span> propertyName<span class="hl opt">));</span>
<span class="hl opt">};</span>

<span class="hl kwa">var</span> <span class="hl kwd">getCompiled</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>name<span class="hl opt">,</span> compiler<span class="hl opt">,</span> cache<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> ret <span class="hl opt">=</span> cache<span class="hl opt">[</span>name<span class="hl opt">];</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> ret <span class="hl opt">!==</span> <span class="hl str">&quot;function&quot;</span><span class="hl opt">) {</span>
        <span class="hl kwa">if</span> <span class="hl opt">(!</span><span class="hl kwd">isIdentifier</span><span class="hl opt">(</span>name<span class="hl opt">)) {</span>
            <span class="hl kwa">return null</span><span class="hl opt">;</span>
        <span class="hl opt">}</span>
        ret <span class="hl opt">=</span> <span class="hl kwd">compiler</span><span class="hl opt">(</span>name<span class="hl opt">);</span>
        cache<span class="hl opt">[</span>name<span class="hl opt">] =</span> ret<span class="hl opt">;</span>
        cache<span class="hl opt">[</span><span class="hl str">&quot; size&quot;</span><span class="hl opt">]++;</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>cache<span class="hl opt">[</span><span class="hl str">&quot; size&quot;</span><span class="hl opt">] &gt;</span> <span class="hl num">512</span><span class="hl opt">) {</span>
            <span class="hl kwa">var</span> keys <span class="hl opt">=</span> Object<span class="hl opt">.</span><span class="hl kwd">keys</span><span class="hl opt">(</span>cache<span class="hl opt">);</span>
            <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> <span class="hl num">256</span><span class="hl opt">; ++</span>i<span class="hl opt">)</span> <span class="hl kwa">delete</span> cache<span class="hl opt">[</span>keys<span class="hl opt">[</span>i<span class="hl opt">]];</span>
            cache<span class="hl opt">[</span><span class="hl str">&quot; size&quot;</span><span class="hl opt">] =</span> keys<span class="hl opt">.</span>length <span class="hl opt">-</span> <span class="hl num">256</span><span class="hl opt">;</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return</span> ret<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl kwd">getMethodCaller</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>name<span class="hl opt">) {</span>
    <span class="hl kwa">return</span> <span class="hl kwd">getCompiled</span><span class="hl opt">(</span>name<span class="hl opt">,</span> makeMethodCaller<span class="hl opt">,</span> callerCache<span class="hl opt">);</span>
<span class="hl opt">};</span>

<span class="hl kwd">getGetter</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>name<span class="hl opt">) {</span>
    <span class="hl kwa">return</span> <span class="hl kwd">getCompiled</span><span class="hl opt">(</span>name<span class="hl opt">,</span> makeGetter<span class="hl opt">,</span> getterCache<span class="hl opt">);</span>
<span class="hl opt">};</span>
<span class="hl opt">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">ensureMethod</span><span class="hl opt">(</span>obj<span class="hl opt">,</span> methodName<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> fn<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>obj <span class="hl opt">!=</span> <span class="hl kwa">null</span><span class="hl opt">)</span> fn <span class="hl opt">=</span> obj<span class="hl opt">[</span>methodName<span class="hl opt">];</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> fn <span class="hl opt">!==</span> <span class="hl str">&quot;function&quot;</span><span class="hl opt">) {</span>
        <span class="hl kwa">var</span> message <span class="hl opt">=</span> <span class="hl str">&quot;Object &quot;</span> <span class="hl opt">+</span> util<span class="hl opt">.</span><span class="hl kwd">classString</span><span class="hl opt">(</span>obj<span class="hl opt">) +</span> <span class="hl str">&quot; has no method '&quot;</span> <span class="hl opt">+</span>
            util<span class="hl opt">.</span><span class="hl kwd">toString</span><span class="hl opt">(</span>methodName<span class="hl opt">) +</span> <span class="hl str">&quot;'&quot;</span><span class="hl opt">;</span>
        <span class="hl kwa">throw new</span> Promise<span class="hl opt">.</span><span class="hl kwd">TypeError</span><span class="hl opt">(</span>message<span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return</span> fn<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">caller</span><span class="hl opt">(</span>obj<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> methodName <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">pop</span><span class="hl opt">();</span>
    <span class="hl kwa">var</span> fn <span class="hl opt">=</span> <span class="hl kwd">ensureMethod</span><span class="hl opt">(</span>obj<span class="hl opt">,</span> methodName<span class="hl opt">);</span>
    <span class="hl kwa">return</span> fn<span class="hl opt">.</span><span class="hl kwd">apply</span><span class="hl opt">(</span>obj<span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">);</span>
<span class="hl opt">}</span>
Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">call</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>methodName<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> <span class="hl opt">$</span>_len <span class="hl opt">=</span> arguments<span class="hl opt">.</span>length<span class="hl opt">;</span><span class="hl kwa">var</span> args <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Array</span><span class="hl opt">($</span>_len <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">);</span> <span class="hl kwa">for</span><span class="hl opt">(</span><span class="hl kwa">var</span> <span class="hl opt">$</span>_i <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">; $</span>_i <span class="hl opt">&lt; $</span>_len<span class="hl opt">; ++$</span>_i<span class="hl opt">) {</span>args<span class="hl opt">[$</span>_i <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">] =</span> arguments<span class="hl opt">[$</span>_i<span class="hl opt">];}</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!</span><span class="hl kwa">true</span><span class="hl opt">) {</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>canEvaluate<span class="hl opt">) {</span>
            <span class="hl kwa">var</span> maybeCaller <span class="hl opt">=</span> <span class="hl kwd">getMethodCaller</span><span class="hl opt">(</span>methodName<span class="hl opt">);</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>maybeCaller <span class="hl opt">!==</span> <span class="hl kwa">null</span><span class="hl opt">) {</span>
                <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_then</span><span class="hl opt">(</span>
                    maybeCaller<span class="hl opt">,</span> undefined<span class="hl opt">,</span> undefined<span class="hl opt">,</span> args<span class="hl opt">,</span> undefined<span class="hl opt">);</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>
    args<span class="hl opt">.</span><span class="hl kwd">push</span><span class="hl opt">(</span>methodName<span class="hl opt">);</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_then</span><span class="hl opt">(</span>caller<span class="hl opt">,</span> undefined<span class="hl opt">,</span> undefined<span class="hl opt">,</span> args<span class="hl opt">,</span> undefined<span class="hl opt">);</span>
<span class="hl opt">};</span>

<span class="hl kwa">function</span> <span class="hl kwd">namedGetter</span><span class="hl opt">(</span>obj<span class="hl opt">) {</span>
    <span class="hl kwa">return</span> obj<span class="hl opt">[</span><span class="hl kwa">this</span><span class="hl opt">];</span>
<span class="hl opt">}</span>
<span class="hl kwa">function</span> <span class="hl kwd">indexedGetter</span><span class="hl opt">(</span>obj<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> index <span class="hl opt">= +</span><span class="hl kwa">this</span><span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>index <span class="hl opt">&lt;</span> <span class="hl num">0</span><span class="hl opt">)</span> index <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">max</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> index <span class="hl opt">+</span> obj<span class="hl opt">.</span>length<span class="hl opt">);</span>
    <span class="hl kwa">return</span> obj<span class="hl opt">[</span>index<span class="hl opt">];</span>
<span class="hl opt">}</span>
Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwa">get</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>propertyName<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> isIndex <span class="hl opt">= (</span><span class="hl kwa">typeof</span> propertyName <span class="hl opt">===</span> <span class="hl str">&quot;number&quot;</span><span class="hl opt">);</span>
    <span class="hl kwa">var</span> getter<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!</span>isIndex<span class="hl opt">) {</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>canEvaluate<span class="hl opt">) {</span>
            <span class="hl kwa">var</span> maybeGetter <span class="hl opt">=</span> <span class="hl kwd">getGetter</span><span class="hl opt">(</span>propertyName<span class="hl opt">);</span>
            getter <span class="hl opt">=</span> maybeGetter <span class="hl opt">!==</span> <span class="hl kwa">null</span> <span class="hl opt">?</span> maybeGetter <span class="hl opt">:</span> namedGetter<span class="hl opt">;</span>
        <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
            getter <span class="hl opt">=</span> namedGetter<span class="hl opt">;</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
        getter <span class="hl opt">=</span> indexedGetter<span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_then</span><span class="hl opt">(</span>getter<span class="hl opt">,</span> undefined<span class="hl opt">,</span> undefined<span class="hl opt">,</span> propertyName<span class="hl opt">,</span> undefined<span class="hl opt">);</span>
<span class="hl opt">};</span>
<span class="hl opt">};</span>

<span class="hl opt">},{</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">:</span><span class="hl num">38</span><span class="hl opt">}],</span><span class="hl num">6</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>_dereq_<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl str">&quot;use strict&quot;</span><span class="hl opt">;</span>
module<span class="hl opt">.</span><span class="hl kwd">exports</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>Promise<span class="hl opt">) {</span>
<span class="hl kwa">var</span> errors <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./errors.js&quot;</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> async <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./async.js&quot;</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> CancellationError <span class="hl opt">=</span> errors<span class="hl opt">.</span>CancellationError<span class="hl opt">;</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_cancel</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>reason<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">isCancellable</span><span class="hl opt">())</span> <span class="hl kwa">return this</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> parent<span class="hl opt">;</span>
    <span class="hl kwa">var</span> promiseToReject <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">;</span>
    <span class="hl kwa">while</span> <span class="hl opt">((</span>parent <span class="hl opt">=</span> promiseToReject<span class="hl opt">.</span>_cancellationParent<span class="hl opt">) !==</span> undefined <span class="hl opt">&amp;&amp;</span>
        parent<span class="hl opt">.</span><span class="hl kwd">isCancellable</span><span class="hl opt">()) {</span>
        promiseToReject <span class="hl opt">=</span> parent<span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_unsetCancellable</span><span class="hl opt">();</span>
    promiseToReject<span class="hl opt">.</span><span class="hl kwd">_target</span><span class="hl opt">().</span><span class="hl kwd">_rejectCallback</span><span class="hl opt">(</span>reason<span class="hl opt">,</span> <span class="hl kwa">false</span><span class="hl opt">,</span> <span class="hl kwa">true</span><span class="hl opt">);</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">cancel</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>reason<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">isCancellable</span><span class="hl opt">())</span> <span class="hl kwa">return this</span><span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>reason <span class="hl opt">===</span> undefined<span class="hl opt">)</span> reason <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">CancellationError</span><span class="hl opt">();</span>
    async<span class="hl opt">.</span><span class="hl kwd">invokeLater</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>_cancel<span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">,</span> reason<span class="hl opt">);</span>
    <span class="hl kwa">return this</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">cancellable</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_cancellable</span><span class="hl opt">())</span> <span class="hl kwa">return this</span><span class="hl opt">;</span>
    async<span class="hl opt">.</span><span class="hl kwd">enableTrampoline</span><span class="hl opt">();</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_setCancellable</span><span class="hl opt">();</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_cancellationParent <span class="hl opt">=</span> undefined<span class="hl opt">;</span>
    <span class="hl kwa">return this</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">uncancellable</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">var</span> ret <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">then</span><span class="hl opt">();</span>
    ret<span class="hl opt">.</span><span class="hl kwd">_unsetCancellable</span><span class="hl opt">();</span>
    <span class="hl kwa">return</span> ret<span class="hl opt">;</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">fork</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>didFulfill<span class="hl opt">,</span> didReject<span class="hl opt">,</span> didProgress<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> ret <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_then</span><span class="hl opt">(</span>didFulfill<span class="hl opt">,</span> didReject<span class="hl opt">,</span> didProgress<span class="hl opt">,</span>
                         undefined<span class="hl opt">,</span> undefined<span class="hl opt">);</span>

    ret<span class="hl opt">.</span><span class="hl kwd">_setCancellable</span><span class="hl opt">();</span>
    ret<span class="hl opt">.</span>_cancellationParent <span class="hl opt">=</span> undefined<span class="hl opt">;</span>
    <span class="hl kwa">return</span> ret<span class="hl opt">;</span>
<span class="hl opt">};</span>
<span class="hl opt">};</span>

<span class="hl opt">},{</span><span class="hl str">&quot;./async.js&quot;</span><span class="hl opt">:</span><span class="hl num">2</span><span class="hl opt">,</span><span class="hl str">&quot;./errors.js&quot;</span><span class="hl opt">:</span><span class="hl num">13</span><span class="hl opt">}],</span><span class="hl num">7</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>_dereq_<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl str">&quot;use strict&quot;</span><span class="hl opt">;</span>
module<span class="hl opt">.</span><span class="hl kwd">exports</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
<span class="hl kwa">var</span> async <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./async.js&quot;</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> util <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> bluebirdFramePattern <span class="hl opt">=</span>
    <span class="hl kwc">/[\\\/]bluebird[\\\/]js[\\\/](main|debug|zalgo|instrumented)/</span><span class="hl opt">;</span>
<span class="hl kwa">var</span> stackFramePattern <span class="hl opt">=</span> <span class="hl kwa">null</span><span class="hl opt">;</span>
<span class="hl kwa">var</span> formatStack <span class="hl opt">=</span> <span class="hl kwa">null</span><span class="hl opt">;</span>
<span class="hl kwa">var</span> indentStackFrames <span class="hl opt">=</span> <span class="hl kwa">false</span><span class="hl opt">;</span>
<span class="hl kwa">var</span> warn<span class="hl opt">;</span>

<span class="hl kwa">function</span> <span class="hl kwd">CapturedTrace</span><span class="hl opt">(</span>parent<span class="hl opt">) {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_parent <span class="hl opt">=</span> parent<span class="hl opt">;</span>
    <span class="hl kwa">var</span> length <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_length <span class="hl opt">=</span> <span class="hl num">1</span> <span class="hl opt">+ (</span>parent <span class="hl opt">===</span> undefined <span class="hl opt">?</span> <span class="hl num">0</span> <span class="hl opt">:</span> parent<span class="hl opt">.</span>_length<span class="hl opt">);</span>
    <span class="hl kwd">captureStackTrace</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> CapturedTrace<span class="hl opt">);</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>length <span class="hl opt">&gt;</span> <span class="hl num">32</span><span class="hl opt">)</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">uncycle</span><span class="hl opt">();</span>
<span class="hl opt">}</span>
util<span class="hl opt">.</span><span class="hl kwd">inherits</span><span class="hl opt">(</span>CapturedTrace<span class="hl opt">,</span> Error<span class="hl opt">);</span>

CapturedTrace<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">uncycle</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
    <span class="hl kwa">var</span> length <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_length<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>length <span class="hl opt">&lt;</span> <span class="hl num">2</span><span class="hl opt">)</span> <span class="hl kwa">return</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> nodes <span class="hl opt">= [];</span>
    <span class="hl kwa">var</span> stackToIndex <span class="hl opt">= {};</span>

    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> node <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">;</span> node <span class="hl opt">!==</span> undefined<span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
        nodes<span class="hl opt">.</span><span class="hl kwd">push</span><span class="hl opt">(</span>node<span class="hl opt">);</span>
        node <span class="hl opt">=</span> node<span class="hl opt">.</span>_parent<span class="hl opt">;</span>
    <span class="hl opt">}</span>
    length <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_length <span class="hl opt">=</span> i<span class="hl opt">;</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> length <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span> i <span class="hl opt">&gt;=</span> <span class="hl num">0</span><span class="hl opt">; --</span>i<span class="hl opt">) {</span>
        <span class="hl kwa">var</span> stack <span class="hl opt">=</span> nodes<span class="hl opt">[</span>i<span class="hl opt">].</span>stack<span class="hl opt">;</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>stackToIndex<span class="hl opt">[</span>stack<span class="hl opt">] ===</span> undefined<span class="hl opt">) {</span>
            stackToIndex<span class="hl opt">[</span>stack<span class="hl opt">] =</span> i<span class="hl opt">;</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> length<span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
        <span class="hl kwa">var</span> currentStack <span class="hl opt">=</span> nodes<span class="hl opt">[</span>i<span class="hl opt">].</span>stack<span class="hl opt">;</span>
        <span class="hl kwa">var</span> index <span class="hl opt">=</span> stackToIndex<span class="hl opt">[</span>currentStack<span class="hl opt">];</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>index <span class="hl opt">!==</span> undefined <span class="hl opt">&amp;&amp;</span> index <span class="hl opt">!==</span> i<span class="hl opt">) {</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>index <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
                nodes<span class="hl opt">[</span>index <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">].</span>_parent <span class="hl opt">=</span> undefined<span class="hl opt">;</span>
                nodes<span class="hl opt">[</span>index <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">].</span>_length <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>
            <span class="hl opt">}</span>
            nodes<span class="hl opt">[</span>i<span class="hl opt">].</span>_parent <span class="hl opt">=</span> undefined<span class="hl opt">;</span>
            nodes<span class="hl opt">[</span>i<span class="hl opt">].</span>_length <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>
            <span class="hl kwa">var</span> cycleEdgeNode <span class="hl opt">=</span> i <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl opt">?</span> nodes<span class="hl opt">[</span>i <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">] :</span> <span class="hl kwa">this</span><span class="hl opt">;</span>

            <span class="hl kwa">if</span> <span class="hl opt">(</span>index <span class="hl opt">&lt;</span> length <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">) {</span>
                cycleEdgeNode<span class="hl opt">.</span>_parent <span class="hl opt">=</span> nodes<span class="hl opt">[</span>index <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">];</span>
                cycleEdgeNode<span class="hl opt">.</span>_parent<span class="hl opt">.</span><span class="hl kwd">uncycle</span><span class="hl opt">();</span>
                cycleEdgeNode<span class="hl opt">.</span>_length <span class="hl opt">=</span>
                    cycleEdgeNode<span class="hl opt">.</span>_parent<span class="hl opt">.</span>_length <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
            <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
                cycleEdgeNode<span class="hl opt">.</span>_parent <span class="hl opt">=</span> undefined<span class="hl opt">;</span>
                cycleEdgeNode<span class="hl opt">.</span>_length <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>
            <span class="hl opt">}</span>
            <span class="hl kwa">var</span> currentChildLength <span class="hl opt">=</span> cycleEdgeNode<span class="hl opt">.</span>_length <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
            <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> j <span class="hl opt">=</span> i <span class="hl opt">-</span> <span class="hl num">2</span><span class="hl opt">;</span> j <span class="hl opt">&gt;=</span> <span class="hl num">0</span><span class="hl opt">; --</span>j<span class="hl opt">) {</span>
                nodes<span class="hl opt">[</span>j<span class="hl opt">].</span>_length <span class="hl opt">=</span> currentChildLength<span class="hl opt">;</span>
                currentChildLength<span class="hl opt">++;</span>
            <span class="hl opt">}</span>
            <span class="hl kwa">return</span><span class="hl opt">;</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>
<span class="hl opt">};</span>

CapturedTrace<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">parent</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span>_parent<span class="hl opt">;</span>
<span class="hl opt">};</span>

CapturedTrace<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">hasParent</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span>_parent <span class="hl opt">!==</span> undefined<span class="hl opt">;</span>
<span class="hl opt">};</span>

CapturedTrace<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">attachExtraTrace</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>error<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>error<span class="hl opt">.</span>__stackCleaned__<span class="hl opt">)</span> <span class="hl kwa">return</span><span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">uncycle</span><span class="hl opt">();</span>
    <span class="hl kwa">var</span> parsed <span class="hl opt">=</span> CapturedTrace<span class="hl opt">.</span><span class="hl kwd">parseStackAndMessage</span><span class="hl opt">(</span>error<span class="hl opt">);</span>
    <span class="hl kwa">var</span> message <span class="hl opt">=</span> parsed<span class="hl opt">.</span>message<span class="hl opt">;</span>
    <span class="hl kwa">var</span> stacks <span class="hl opt">= [</span>parsed<span class="hl opt">.</span>stack<span class="hl opt">];</span>

    <span class="hl kwa">var</span> trace <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">;</span>
    <span class="hl kwa">while</span> <span class="hl opt">(</span>trace <span class="hl opt">!==</span> undefined<span class="hl opt">) {</span>
        stacks<span class="hl opt">.</span><span class="hl kwd">push</span><span class="hl opt">(</span><span class="hl kwd">cleanStack</span><span class="hl opt">(</span>trace<span class="hl opt">.</span>stack<span class="hl opt">.</span><span class="hl kwd">split</span><span class="hl opt">(</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">)));</span>
        trace <span class="hl opt">=</span> trace<span class="hl opt">.</span>_parent<span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwd">removeCommonRoots</span><span class="hl opt">(</span>stacks<span class="hl opt">);</span>
    <span class="hl kwd">removeDuplicateOrEmptyJumps</span><span class="hl opt">(</span>stacks<span class="hl opt">);</span>
    util<span class="hl opt">.</span><span class="hl kwd">notEnumerableProp</span><span class="hl opt">(</span>error<span class="hl opt">,</span> <span class="hl str">&quot;stack&quot;</span><span class="hl opt">,</span> <span class="hl kwd">reconstructStack</span><span class="hl opt">(</span>message<span class="hl opt">,</span> stacks<span class="hl opt">));</span>
    util<span class="hl opt">.</span><span class="hl kwd">notEnumerableProp</span><span class="hl opt">(</span>error<span class="hl opt">,</span> <span class="hl str">&quot;__stackCleaned__&quot;</span><span class="hl opt">,</span> <span class="hl kwa">true</span><span class="hl opt">);</span>
<span class="hl opt">};</span>

<span class="hl kwa">function</span> <span class="hl kwd">reconstructStack</span><span class="hl opt">(</span>message<span class="hl opt">,</span> stacks<span class="hl opt">) {</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> stacks<span class="hl opt">.</span>length <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
        stacks<span class="hl opt">[</span>i<span class="hl opt">].</span><span class="hl kwd">push</span><span class="hl opt">(</span><span class="hl str">&quot;From previous event:&quot;</span><span class="hl opt">);</span>
        stacks<span class="hl opt">[</span>i<span class="hl opt">] =</span> stacks<span class="hl opt">[</span>i<span class="hl opt">].</span><span class="hl kwd">join</span><span class="hl opt">(</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>i <span class="hl opt">&lt;</span> stacks<span class="hl opt">.</span>length<span class="hl opt">) {</span>
        stacks<span class="hl opt">[</span>i<span class="hl opt">] =</span> stacks<span class="hl opt">[</span>i<span class="hl opt">].</span><span class="hl kwd">join</span><span class="hl opt">(</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return</span> message <span class="hl opt">+</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl opt">+</span> stacks<span class="hl opt">.</span><span class="hl kwd">join</span><span class="hl opt">(</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">removeDuplicateOrEmptyJumps</span><span class="hl opt">(</span>stacks<span class="hl opt">) {</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> stacks<span class="hl opt">.</span>length<span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>stacks<span class="hl opt">[</span>i<span class="hl opt">].</span>length <span class="hl opt">===</span> <span class="hl num">0</span> <span class="hl opt">||</span>
            <span class="hl opt">((</span>i <span class="hl opt">+</span> <span class="hl num">1</span> <span class="hl opt">&lt;</span> stacks<span class="hl opt">.</span>length<span class="hl opt">) &amp;&amp;</span> stacks<span class="hl opt">[</span>i<span class="hl opt">][</span><span class="hl num">0</span><span class="hl opt">] ===</span> stacks<span class="hl opt">[</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">][</span><span class="hl num">0</span><span class="hl opt">])) {</span>
            stacks<span class="hl opt">.</span><span class="hl kwd">splice</span><span class="hl opt">(</span>i<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">);</span>
            i<span class="hl opt">--;</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">removeCommonRoots</span><span class="hl opt">(</span>stacks<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> current <span class="hl opt">=</span> stacks<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">];</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> stacks<span class="hl opt">.</span>length<span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
        <span class="hl kwa">var</span> prev <span class="hl opt">=</span> stacks<span class="hl opt">[</span>i<span class="hl opt">];</span>
        <span class="hl kwa">var</span> currentLastIndex <span class="hl opt">=</span> current<span class="hl opt">.</span>length <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span>
        <span class="hl kwa">var</span> currentLastLine <span class="hl opt">=</span> current<span class="hl opt">[</span>currentLastIndex<span class="hl opt">];</span>
        <span class="hl kwa">var</span> commonRootMeetPoint <span class="hl opt">= -</span><span class="hl num">1</span><span class="hl opt">;</span>

        <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> j <span class="hl opt">=</span> prev<span class="hl opt">.</span>length <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span> j <span class="hl opt">&gt;=</span> <span class="hl num">0</span><span class="hl opt">; --</span>j<span class="hl opt">) {</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>prev<span class="hl opt">[</span>j<span class="hl opt">] ===</span> currentLastLine<span class="hl opt">) {</span>
                commonRootMeetPoint <span class="hl opt">=</span> j<span class="hl opt">;</span>
                <span class="hl kwa">break</span><span class="hl opt">;</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span>

        <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> j <span class="hl opt">=</span> commonRootMeetPoint<span class="hl opt">;</span> j <span class="hl opt">&gt;=</span> <span class="hl num">0</span><span class="hl opt">; --</span>j<span class="hl opt">) {</span>
            <span class="hl kwa">var</span> line <span class="hl opt">=</span> prev<span class="hl opt">[</span>j<span class="hl opt">];</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>current<span class="hl opt">[</span>currentLastIndex<span class="hl opt">] ===</span> line<span class="hl opt">) {</span>
                current<span class="hl opt">.</span><span class="hl kwd">pop</span><span class="hl opt">();</span>
                currentLastIndex<span class="hl opt">--;</span>
            <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
                <span class="hl kwa">break</span><span class="hl opt">;</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span>
        current <span class="hl opt">=</span> prev<span class="hl opt">;</span>
    <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">cleanStack</span><span class="hl opt">(</span>stack<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> ret <span class="hl opt">= [];</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> stack<span class="hl opt">.</span>length<span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
        <span class="hl kwa">var</span> line <span class="hl opt">=</span> stack<span class="hl opt">[</span>i<span class="hl opt">];</span>
        <span class="hl kwa">var</span> isTraceLine <span class="hl opt">=</span> stackFramePattern<span class="hl opt">.</span><span class="hl kwd">test</span><span class="hl opt">(</span>line<span class="hl opt">) ||</span>
            <span class="hl str">&quot;    (No stack trace)&quot;</span> <span class="hl opt">===</span> line<span class="hl opt">;</span>
        <span class="hl kwa">var</span> isInternalFrame <span class="hl opt">=</span> isTraceLine <span class="hl opt">&amp;&amp;</span> <span class="hl kwd">shouldIgnore</span><span class="hl opt">(</span>line<span class="hl opt">);</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>isTraceLine <span class="hl opt">&amp;&amp; !</span>isInternalFrame<span class="hl opt">) {</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>indentStackFrames <span class="hl opt">&amp;&amp;</span> line<span class="hl opt">.</span><span class="hl kwd">charAt</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">) !==</span> <span class="hl str">&quot; &quot;</span><span class="hl opt">) {</span>
                line <span class="hl opt">=</span> <span class="hl str">&quot;    &quot;</span> <span class="hl opt">+</span> line<span class="hl opt">;</span>
            <span class="hl opt">}</span>
            ret<span class="hl opt">.</span><span class="hl kwd">push</span><span class="hl opt">(</span>line<span class="hl opt">);</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return</span> ret<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">stackFramesAsArray</span><span class="hl opt">(</span>error<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> stack <span class="hl opt">=</span> error<span class="hl opt">.</span>stack<span class="hl opt">.</span><span class="hl kwd">replace</span><span class="hl opt">(</span><span class="hl kwc">/\s+$/g</span><span class="hl opt">,</span> <span class="hl str">&quot;&quot;</span><span class="hl opt">).</span><span class="hl kwd">split</span><span class="hl opt">(</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> stack<span class="hl opt">.</span>length<span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
        <span class="hl kwa">var</span> line <span class="hl opt">=</span> stack<span class="hl opt">[</span>i<span class="hl opt">];</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl str">&quot;    (No stack trace)&quot;</span> <span class="hl opt">===</span> line <span class="hl opt">||</span> stackFramePattern<span class="hl opt">.</span><span class="hl kwd">test</span><span class="hl opt">(</span>line<span class="hl opt">)) {</span>
            <span class="hl kwa">break</span><span class="hl opt">;</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>i <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
        stack <span class="hl opt">=</span> stack<span class="hl opt">.</span><span class="hl kwd">slice</span><span class="hl opt">(</span>i<span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return</span> stack<span class="hl opt">;</span>
<span class="hl opt">}</span>

CapturedTrace<span class="hl opt">.</span><span class="hl kwd">parseStackAndMessage</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>error<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> stack <span class="hl opt">=</span> error<span class="hl opt">.</span>stack<span class="hl opt">;</span>
    <span class="hl kwa">var</span> message <span class="hl opt">=</span> error<span class="hl opt">.</span><span class="hl kwd">toString</span><span class="hl opt">();</span>
    stack <span class="hl opt">=</span> <span class="hl kwa">typeof</span> stack <span class="hl opt">===</span> <span class="hl str">&quot;string&quot;</span> <span class="hl opt">&amp;&amp;</span> stack<span class="hl opt">.</span>length <span class="hl opt">&gt;</span> <span class="hl num">0</span>
                <span class="hl opt">?</span> <span class="hl kwd">stackFramesAsArray</span><span class="hl opt">(</span>error<span class="hl opt">) : [</span><span class="hl str">&quot;    (No stack trace)&quot;</span><span class="hl opt">];</span>
    <span class="hl kwa">return</span> <span class="hl opt">{</span>
        message<span class="hl opt">:</span> message<span class="hl opt">,</span>
        stack<span class="hl opt">:</span> <span class="hl kwd">cleanStack</span><span class="hl opt">(</span>stack<span class="hl opt">)</span>
    <span class="hl opt">};</span>
<span class="hl opt">};</span>

CapturedTrace<span class="hl opt">.</span><span class="hl kwd">formatAndLogError</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>error<span class="hl opt">,</span> title<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> console <span class="hl opt">!==</span> <span class="hl str">&quot;undefined&quot;</span><span class="hl opt">) {</span>
        <span class="hl kwa">var</span> message<span class="hl opt">;</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> error <span class="hl opt">===</span> <span class="hl str">&quot;object&quot;</span> <span class="hl opt">||</span> <span class="hl kwa">typeof</span> error <span class="hl opt">===</span> <span class="hl str">&quot;function&quot;</span><span class="hl opt">) {</span>
            <span class="hl kwa">var</span> stack <span class="hl opt">=</span> error<span class="hl opt">.</span>stack<span class="hl opt">;</span>
            message <span class="hl opt">=</span> title <span class="hl opt">+</span> <span class="hl kwd">formatStack</span><span class="hl opt">(</span>stack<span class="hl opt">,</span> error<span class="hl opt">);</span>
        <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
            message <span class="hl opt">=</span> title <span class="hl opt">+</span> <span class="hl kwd">String</span><span class="hl opt">(</span>error<span class="hl opt">);</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> warn <span class="hl opt">===</span> <span class="hl str">&quot;function&quot;</span><span class="hl opt">) {</span>
            <span class="hl kwd">warn</span><span class="hl opt">(</span>message<span class="hl opt">);</span>
        <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> console<span class="hl opt">.</span>log <span class="hl opt">===</span> <span class="hl str">&quot;function&quot;</span> <span class="hl opt">||</span>
            <span class="hl kwa">typeof</span> console<span class="hl opt">.</span>log <span class="hl opt">===</span> <span class="hl str">&quot;object&quot;</span><span class="hl opt">) {</span>
            console<span class="hl opt">.</span><span class="hl kwd">log</span><span class="hl opt">(</span>message<span class="hl opt">);</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>
<span class="hl opt">};</span>

CapturedTrace<span class="hl opt">.</span><span class="hl kwd">unhandledRejection</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>reason<span class="hl opt">) {</span>
    CapturedTrace<span class="hl opt">.</span><span class="hl kwd">formatAndLogError</span><span class="hl opt">(</span>reason<span class="hl opt">,</span> <span class="hl str">&quot;^--- With additional stack trace: &quot;</span><span class="hl opt">);</span>
<span class="hl opt">};</span>

CapturedTrace<span class="hl opt">.</span><span class="hl kwd">isSupported</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return typeof</span> captureStackTrace <span class="hl opt">===</span> <span class="hl str">&quot;function&quot;</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

CapturedTrace<span class="hl opt">.</span>fireRejectionEvent <span class="hl opt">=</span>
<span class="hl kwa">function</span><span class="hl opt">(</span>name<span class="hl opt">,</span> localHandler<span class="hl opt">,</span> reason<span class="hl opt">,</span> promise<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> localEventFired <span class="hl opt">=</span> <span class="hl kwa">false</span><span class="hl opt">;</span>
    <span class="hl kwa">try</span> <span class="hl opt">{</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> localHandler <span class="hl opt">===</span> <span class="hl str">&quot;function&quot;</span><span class="hl opt">) {</span>
            localEventFired <span class="hl opt">=</span> <span class="hl kwa">true</span><span class="hl opt">;</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>name <span class="hl opt">===</span> <span class="hl str">&quot;rejectionHandled&quot;</span><span class="hl opt">) {</span>
                <span class="hl kwd">localHandler</span><span class="hl opt">(</span>promise<span class="hl opt">);</span>
            <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
                <span class="hl kwd">localHandler</span><span class="hl opt">(</span>reason<span class="hl opt">,</span> promise<span class="hl opt">);</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span> <span class="hl kwa">catch</span> <span class="hl opt">(</span>e<span class="hl opt">) {</span>
        async<span class="hl opt">.</span><span class="hl kwd">throwLater</span><span class="hl opt">(</span>e<span class="hl opt">);</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">var</span> globalEventFired <span class="hl opt">=</span> <span class="hl kwa">false</span><span class="hl opt">;</span>
    <span class="hl kwa">try</span> <span class="hl opt">{</span>
        globalEventFired <span class="hl opt">=</span> <span class="hl kwd">fireGlobalEvent</span><span class="hl opt">(</span>name<span class="hl opt">,</span> reason<span class="hl opt">,</span> promise<span class="hl opt">);</span>
    <span class="hl opt">}</span> <span class="hl kwa">catch</span> <span class="hl opt">(</span>e<span class="hl opt">) {</span>
        globalEventFired <span class="hl opt">=</span> <span class="hl kwa">true</span><span class="hl opt">;</span>
        async<span class="hl opt">.</span><span class="hl kwd">throwLater</span><span class="hl opt">(</span>e<span class="hl opt">);</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">var</span> domEventFired <span class="hl opt">=</span> <span class="hl kwa">false</span><span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>fireDomEvent<span class="hl opt">) {</span>
        <span class="hl kwa">try</span> <span class="hl opt">{</span>
            domEventFired <span class="hl opt">=</span> <span class="hl kwd">fireDomEvent</span><span class="hl opt">(</span>name<span class="hl opt">.</span><span class="hl kwd">toLowerCase</span><span class="hl opt">(), {</span>
                reason<span class="hl opt">:</span> reason<span class="hl opt">,</span>
                promise<span class="hl opt">:</span> promise
            <span class="hl opt">});</span>
        <span class="hl opt">}</span> <span class="hl kwa">catch</span> <span class="hl opt">(</span>e<span class="hl opt">) {</span>
            domEventFired <span class="hl opt">=</span> <span class="hl kwa">true</span><span class="hl opt">;</span>
            async<span class="hl opt">.</span><span class="hl kwd">throwLater</span><span class="hl opt">(</span>e<span class="hl opt">);</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">if</span> <span class="hl opt">(!</span>globalEventFired <span class="hl opt">&amp;&amp; !</span>localEventFired <span class="hl opt">&amp;&amp; !</span>domEventFired <span class="hl opt">&amp;&amp;</span>
        name <span class="hl opt">===</span> <span class="hl str">&quot;unhandledRejection&quot;</span><span class="hl opt">) {</span>
        CapturedTrace<span class="hl opt">.</span><span class="hl kwd">formatAndLogError</span><span class="hl opt">(</span>reason<span class="hl opt">,</span> <span class="hl str">&quot;Unhandled rejection &quot;</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
<span class="hl opt">};</span>

<span class="hl kwa">function</span> <span class="hl kwd">formatNonError</span><span class="hl opt">(</span>obj<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> str<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> obj <span class="hl opt">===</span> <span class="hl str">&quot;function&quot;</span><span class="hl opt">) {</span>
        str <span class="hl opt">=</span> <span class="hl str">&quot;[function &quot;</span> <span class="hl opt">+</span>
            <span class="hl opt">(</span>obj<span class="hl opt">.</span>name <span class="hl opt">||</span> <span class="hl str">&quot;anonymous&quot;</span><span class="hl opt">) +</span>
            <span class="hl str">&quot;]&quot;</span><span class="hl opt">;</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
        str <span class="hl opt">=</span> obj<span class="hl opt">.</span><span class="hl kwd">toString</span><span class="hl opt">();</span>
        <span class="hl kwa">var</span> ruselessToString <span class="hl opt">=</span> <span class="hl kwc">/\[object [a-zA-Z0-9$_]+\]/</span><span class="hl opt">;</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>ruselessToString<span class="hl opt">.</span><span class="hl kwd">test</span><span class="hl opt">(</span>str<span class="hl opt">)) {</span>
            <span class="hl kwa">try</span> <span class="hl opt">{</span>
                <span class="hl kwa">var</span> newStr <span class="hl opt">=</span> JSON<span class="hl opt">.</span><span class="hl kwd">stringify</span><span class="hl opt">(</span>obj<span class="hl opt">);</span>
                str <span class="hl opt">=</span> newStr<span class="hl opt">;</span>
            <span class="hl opt">}</span>
            <span class="hl kwa">catch</span><span class="hl opt">(</span>e<span class="hl opt">) {</span>

            <span class="hl opt">}</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>str<span class="hl opt">.</span>length <span class="hl opt">===</span> <span class="hl num">0</span><span class="hl opt">) {</span>
            str <span class="hl opt">=</span> <span class="hl str">&quot;(empty array)&quot;</span><span class="hl opt">;</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return</span> <span class="hl opt">(</span><span class="hl str">&quot;(&lt;&quot;</span> <span class="hl opt">+</span> <span class="hl kwd">snip</span><span class="hl opt">(</span>str<span class="hl opt">) +</span> <span class="hl str">&quot;&gt;, no stack trace)&quot;</span><span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">snip</span><span class="hl opt">(</span>str<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> maxChars <span class="hl opt">=</span> <span class="hl num">41</span><span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>str<span class="hl opt">.</span>length <span class="hl opt">&lt;</span> maxChars<span class="hl opt">) {</span>
        <span class="hl kwa">return</span> str<span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return</span> str<span class="hl opt">.</span><span class="hl kwd">substr</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> maxChars <span class="hl opt">-</span> <span class="hl num">3</span><span class="hl opt">) +</span> <span class="hl str">&quot;...&quot;</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwa">var</span> <span class="hl kwd">shouldIgnore</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span> <span class="hl kwa">return false</span><span class="hl opt">; };</span>
<span class="hl kwa">var</span> parseLineInfoRegex <span class="hl opt">=</span> <span class="hl kwc">/[\/&lt;\(]([^:\/]+):(\d+):(?:\d+)\)?\s*$/</span><span class="hl opt">;</span>
<span class="hl kwa">function</span> <span class="hl kwd">parseLineInfo</span><span class="hl opt">(</span>line<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> matches <span class="hl opt">=</span> line<span class="hl opt">.</span><span class="hl kwd">match</span><span class="hl opt">(</span>parseLineInfoRegex<span class="hl opt">);</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>matches<span class="hl opt">) {</span>
        <span class="hl kwa">return</span> <span class="hl opt">{</span>
            fileName<span class="hl opt">:</span> matches<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">],</span>
            line<span class="hl opt">:</span> <span class="hl kwd">parseInt</span><span class="hl opt">(</span>matches<span class="hl opt">[</span><span class="hl num">2</span><span class="hl opt">],</span> <span class="hl num">10</span><span class="hl opt">)</span>
        <span class="hl opt">};</span>
    <span class="hl opt">}</span>
<span class="hl opt">}</span>
CapturedTrace<span class="hl opt">.</span><span class="hl kwd">setBounds</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>firstLineError<span class="hl opt">,</span> lastLineError<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!</span>CapturedTrace<span class="hl opt">.</span><span class="hl kwd">isSupported</span><span class="hl opt">())</span> <span class="hl kwa">return</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> firstStackLines <span class="hl opt">=</span> firstLineError<span class="hl opt">.</span>stack<span class="hl opt">.</span><span class="hl kwd">split</span><span class="hl opt">(</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
    <span class="hl kwa">var</span> lastStackLines <span class="hl opt">=</span> lastLineError<span class="hl opt">.</span>stack<span class="hl opt">.</span><span class="hl kwd">split</span><span class="hl opt">(</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
    <span class="hl kwa">var</span> firstIndex <span class="hl opt">= -</span><span class="hl num">1</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> lastIndex <span class="hl opt">= -</span><span class="hl num">1</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> firstFileName<span class="hl opt">;</span>
    <span class="hl kwa">var</span> lastFileName<span class="hl opt">;</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> firstStackLines<span class="hl opt">.</span>length<span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
        <span class="hl kwa">var</span> result <span class="hl opt">=</span> <span class="hl kwd">parseLineInfo</span><span class="hl opt">(</span>firstStackLines<span class="hl opt">[</span>i<span class="hl opt">]);</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>result<span class="hl opt">) {</span>
            firstFileName <span class="hl opt">=</span> result<span class="hl opt">.</span>fileName<span class="hl opt">;</span>
            firstIndex <span class="hl opt">=</span> result<span class="hl opt">.</span>line<span class="hl opt">;</span>
            <span class="hl kwa">break</span><span class="hl opt">;</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> lastStackLines<span class="hl opt">.</span>length<span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
        <span class="hl kwa">var</span> result <span class="hl opt">=</span> <span class="hl kwd">parseLineInfo</span><span class="hl opt">(</span>lastStackLines<span class="hl opt">[</span>i<span class="hl opt">]);</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>result<span class="hl opt">) {</span>
            lastFileName <span class="hl opt">=</span> result<span class="hl opt">.</span>fileName<span class="hl opt">;</span>
            lastIndex <span class="hl opt">=</span> result<span class="hl opt">.</span>line<span class="hl opt">;</span>
            <span class="hl kwa">break</span><span class="hl opt">;</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>firstIndex <span class="hl opt">&lt;</span> <span class="hl num">0</span> <span class="hl opt">||</span> lastIndex <span class="hl opt">&lt;</span> <span class="hl num">0</span> <span class="hl opt">|| !</span>firstFileName <span class="hl opt">|| !</span>lastFileName <span class="hl opt">||</span>
        firstFileName <span class="hl opt">!==</span> lastFileName <span class="hl opt">||</span> firstIndex <span class="hl opt">&gt;=</span> lastIndex<span class="hl opt">) {</span>
        <span class="hl kwa">return</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwd">shouldIgnore</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>line<span class="hl opt">) {</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>bluebirdFramePattern<span class="hl opt">.</span><span class="hl kwd">test</span><span class="hl opt">(</span>line<span class="hl opt">))</span> <span class="hl kwa">return true</span><span class="hl opt">;</span>
        <span class="hl kwa">var</span> info <span class="hl opt">=</span> <span class="hl kwd">parseLineInfo</span><span class="hl opt">(</span>line<span class="hl opt">);</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>info<span class="hl opt">) {</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>info<span class="hl opt">.</span>fileName <span class="hl opt">===</span> firstFileName <span class="hl opt">&amp;&amp;</span>
                <span class="hl opt">(</span>firstIndex <span class="hl opt">&lt;=</span> info<span class="hl opt">.</span>line <span class="hl opt">&amp;&amp;</span> info<span class="hl opt">.</span>line <span class="hl opt">&lt;=</span> lastIndex<span class="hl opt">)) {</span>
                <span class="hl kwa">return true</span><span class="hl opt">;</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">return false</span><span class="hl opt">;</span>
    <span class="hl opt">};</span>
<span class="hl opt">};</span>

<span class="hl kwa">var</span> captureStackTrace <span class="hl opt">= (</span><span class="hl kwa">function</span> <span class="hl kwd">stackDetection</span><span class="hl opt">() {</span>
    <span class="hl kwa">var</span> v8stackFramePattern <span class="hl opt">=</span> <span class="hl kwc">/^\s*at\s*/</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> <span class="hl kwd">v8stackFormatter</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>stack<span class="hl opt">,</span> error<span class="hl opt">) {</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> stack <span class="hl opt">===</span> <span class="hl str">&quot;string&quot;</span><span class="hl opt">)</span> <span class="hl kwa">return</span> stack<span class="hl opt">;</span>

        <span class="hl kwa">if</span> <span class="hl opt">(</span>error<span class="hl opt">.</span>name <span class="hl opt">!==</span> undefined <span class="hl opt">&amp;&amp;</span>
            error<span class="hl opt">.</span>message <span class="hl opt">!==</span> undefined<span class="hl opt">) {</span>
            <span class="hl kwa">return</span> error<span class="hl opt">.</span><span class="hl kwd">toString</span><span class="hl opt">();</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">return</span> <span class="hl kwd">formatNonError</span><span class="hl opt">(</span>error<span class="hl opt">);</span>
    <span class="hl opt">};</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> Error<span class="hl opt">.</span>stackTraceLimit <span class="hl opt">===</span> <span class="hl str">&quot;number&quot;</span> <span class="hl opt">&amp;&amp;</span>
        <span class="hl kwa">typeof</span> Error<span class="hl opt">.</span>captureStackTrace <span class="hl opt">===</span> <span class="hl str">&quot;function&quot;</span><span class="hl opt">) {</span>
        Error<span class="hl opt">.</span>stackTraceLimit <span class="hl opt">=</span> Error<span class="hl opt">.</span>stackTraceLimit <span class="hl opt">+</span> <span class="hl num">6</span><span class="hl opt">;</span>
        stackFramePattern <span class="hl opt">=</span> v8stackFramePattern<span class="hl opt">;</span>
        formatStack <span class="hl opt">=</span> v8stackFormatter<span class="hl opt">;</span>
        <span class="hl kwa">var</span> captureStackTrace <span class="hl opt">=</span> Error<span class="hl opt">.</span>captureStackTrace<span class="hl opt">;</span>

        <span class="hl kwd">shouldIgnore</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>line<span class="hl opt">) {</span>
            <span class="hl kwa">return</span> bluebirdFramePattern<span class="hl opt">.</span><span class="hl kwd">test</span><span class="hl opt">(</span>line<span class="hl opt">);</span>
        <span class="hl opt">};</span>
        <span class="hl kwa">return function</span><span class="hl opt">(</span>receiver<span class="hl opt">,</span> ignoreUntil<span class="hl opt">) {</span>
            Error<span class="hl opt">.</span>stackTraceLimit <span class="hl opt">=</span> Error<span class="hl opt">.</span>stackTraceLimit <span class="hl opt">+</span> <span class="hl num">6</span><span class="hl opt">;</span>
            <span class="hl kwd">captureStackTrace</span><span class="hl opt">(</span>receiver<span class="hl opt">,</span> ignoreUntil<span class="hl opt">);</span>
            Error<span class="hl opt">.</span>stackTraceLimit <span class="hl opt">=</span> Error<span class="hl opt">.</span>stackTraceLimit <span class="hl opt">-</span> <span class="hl num">6</span><span class="hl opt">;</span>
        <span class="hl opt">};</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">var</span> err <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Error</span><span class="hl opt">();</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> err<span class="hl opt">.</span>stack <span class="hl opt">===</span> <span class="hl str">&quot;string&quot;</span> <span class="hl opt">&amp;&amp;</span>
        err<span class="hl opt">.</span>stack<span class="hl opt">.</span><span class="hl kwd">split</span><span class="hl opt">(</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">)[</span><span class="hl num">0</span><span class="hl opt">].</span><span class="hl kwd">indexOf</span><span class="hl opt">(</span><span class="hl str">&quot;stackDetection&#64;&quot;</span><span class="hl opt">) &gt;=</span> <span class="hl num">0</span><span class="hl opt">) {</span>
        stackFramePattern <span class="hl opt">= /&#64;/;</span>
        formatStack <span class="hl opt">=</span> v8stackFormatter<span class="hl opt">;</span>
        indentStackFrames <span class="hl opt">=</span> <span class="hl kwa">true</span><span class="hl opt">;</span>
        <span class="hl kwa">return function</span> <span class="hl kwd">captureStackTrace</span><span class="hl opt">(</span>o<span class="hl opt">) {</span>
            o<span class="hl opt">.</span>stack <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Error</span><span class="hl opt">().</span>stack<span class="hl opt">;</span>
        <span class="hl opt">};</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">var</span> hasStackAfterThrow<span class="hl opt">;</span>
    <span class="hl kwa">try</span> <span class="hl opt">{</span> <span class="hl kwa">throw new</span> <span class="hl kwd">Error</span><span class="hl opt">(); }</span>
    <span class="hl kwa">catch</span><span class="hl opt">(</span>e<span class="hl opt">) {</span>
        hasStackAfterThrow <span class="hl opt">= (</span><span class="hl str">&quot;stack&quot;</span> <span class="hl kwa">in</span> e<span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!(</span><span class="hl str">&quot;stack&quot;</span> <span class="hl kwa">in</span> err<span class="hl opt">) &amp;&amp;</span> hasStackAfterThrow <span class="hl opt">&amp;&amp;</span>
        <span class="hl kwa">typeof</span> Error<span class="hl opt">.</span>stackTraceLimit <span class="hl opt">===</span> <span class="hl str">&quot;number&quot;</span><span class="hl opt">) {</span>
        stackFramePattern <span class="hl opt">=</span> v8stackFramePattern<span class="hl opt">;</span>
        formatStack <span class="hl opt">=</span> v8stackFormatter<span class="hl opt">;</span>
        <span class="hl kwa">return function</span> <span class="hl kwd">captureStackTrace</span><span class="hl opt">(</span>o<span class="hl opt">) {</span>
            Error<span class="hl opt">.</span>stackTraceLimit <span class="hl opt">=</span> Error<span class="hl opt">.</span>stackTraceLimit <span class="hl opt">+</span> <span class="hl num">6</span><span class="hl opt">;</span>
            <span class="hl kwa">try</span> <span class="hl opt">{</span> <span class="hl kwa">throw new</span> <span class="hl kwd">Error</span><span class="hl opt">(); }</span>
            <span class="hl kwa">catch</span><span class="hl opt">(</span>e<span class="hl opt">) {</span> o<span class="hl opt">.</span>stack <span class="hl opt">=</span> e<span class="hl opt">.</span>stack<span class="hl opt">; }</span>
            Error<span class="hl opt">.</span>stackTraceLimit <span class="hl opt">=</span> Error<span class="hl opt">.</span>stackTraceLimit <span class="hl opt">-</span> <span class="hl num">6</span><span class="hl opt">;</span>
        <span class="hl opt">};</span>
    <span class="hl opt">}</span>

    <span class="hl kwd">formatStack</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>stack<span class="hl opt">,</span> error<span class="hl opt">) {</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> stack <span class="hl opt">===</span> <span class="hl str">&quot;string&quot;</span><span class="hl opt">)</span> <span class="hl kwa">return</span> stack<span class="hl opt">;</span>

        <span class="hl kwa">if</span> <span class="hl opt">((</span><span class="hl kwa">typeof</span> error <span class="hl opt">===</span> <span class="hl str">&quot;object&quot;</span> <span class="hl opt">||</span>
            <span class="hl kwa">typeof</span> error <span class="hl opt">===</span> <span class="hl str">&quot;function&quot;</span><span class="hl opt">) &amp;&amp;</span>
            error<span class="hl opt">.</span>name <span class="hl opt">!==</span> undefined <span class="hl opt">&amp;&amp;</span>
            error<span class="hl opt">.</span>message <span class="hl opt">!==</span> undefined<span class="hl opt">) {</span>
            <span class="hl kwa">return</span> error<span class="hl opt">.</span><span class="hl kwd">toString</span><span class="hl opt">();</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">return</span> <span class="hl kwd">formatNonError</span><span class="hl opt">(</span>error<span class="hl opt">);</span>
    <span class="hl opt">};</span>

    <span class="hl kwa">return null</span><span class="hl opt">;</span>

<span class="hl opt">})([]);</span>

<span class="hl kwa">var</span> fireDomEvent<span class="hl opt">;</span>
<span class="hl kwa">var</span> fireGlobalEvent <span class="hl opt">= (</span><span class="hl kwa">function</span><span class="hl opt">() {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>util<span class="hl opt">.</span>isNode<span class="hl opt">) {</span>
        <span class="hl kwa">return function</span><span class="hl opt">(</span>name<span class="hl opt">,</span> reason<span class="hl opt">,</span> promise<span class="hl opt">) {</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>name <span class="hl opt">===</span> <span class="hl str">&quot;rejectionHandled&quot;</span><span class="hl opt">) {</span>
                <span class="hl kwa">return</span> process<span class="hl opt">.</span><span class="hl kwd">emit</span><span class="hl opt">(</span>name<span class="hl opt">,</span> promise<span class="hl opt">);</span>
            <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
                <span class="hl kwa">return</span> process<span class="hl opt">.</span><span class="hl kwd">emit</span><span class="hl opt">(</span>name<span class="hl opt">,</span> reason<span class="hl opt">,</span> promise<span class="hl opt">);</span>
            <span class="hl opt">}</span>
        <span class="hl opt">};</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
        <span class="hl kwa">var</span> customEventWorks <span class="hl opt">=</span> <span class="hl kwa">false</span><span class="hl opt">;</span>
        <span class="hl kwa">var</span> anyEventWorks <span class="hl opt">=</span> <span class="hl kwa">true</span><span class="hl opt">;</span>
        <span class="hl kwa">try</span> <span class="hl opt">{</span>
            <span class="hl kwa">var</span> ev <span class="hl opt">=</span> <span class="hl kwa">new</span> self<span class="hl opt">.</span><span class="hl kwd">CustomEvent</span><span class="hl opt">(</span><span class="hl str">&quot;test&quot;</span><span class="hl opt">);</span>
            customEventWorks <span class="hl opt">=</span> ev <span class="hl kwa">instanceof</span> CustomEvent<span class="hl opt">;</span>
        <span class="hl opt">}</span> <span class="hl kwa">catch</span> <span class="hl opt">(</span>e<span class="hl opt">) {}</span>
        <span class="hl kwa">if</span> <span class="hl opt">(!</span>customEventWorks<span class="hl opt">) {</span>
            <span class="hl kwa">try</span> <span class="hl opt">{</span>
                <span class="hl kwa">var</span> event <span class="hl opt">=</span> document<span class="hl opt">.</span><span class="hl kwd">createEvent</span><span class="hl opt">(</span><span class="hl str">&quot;CustomEvent&quot;</span><span class="hl opt">);</span>
                event<span class="hl opt">.</span><span class="hl kwd">initCustomEvent</span><span class="hl opt">(</span><span class="hl str">&quot;testingtheevent&quot;</span><span class="hl opt">,</span> <span class="hl kwa">false</span><span class="hl opt">,</span> <span class="hl kwa">true</span><span class="hl opt">, {});</span>
                self<span class="hl opt">.</span><span class="hl kwd">dispatchEvent</span><span class="hl opt">(</span>event<span class="hl opt">);</span>
            <span class="hl opt">}</span> <span class="hl kwa">catch</span> <span class="hl opt">(</span>e<span class="hl opt">) {</span>
                anyEventWorks <span class="hl opt">=</span> <span class="hl kwa">false</span><span class="hl opt">;</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>anyEventWorks<span class="hl opt">) {</span>
            <span class="hl kwd">fireDomEvent</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>type<span class="hl opt">,</span> detail<span class="hl opt">) {</span>
                <span class="hl kwa">var</span> event<span class="hl opt">;</span>
                <span class="hl kwa">if</span> <span class="hl opt">(</span>customEventWorks<span class="hl opt">) {</span>
                    event <span class="hl opt">=</span> <span class="hl kwa">new</span> self<span class="hl opt">.</span><span class="hl kwd">CustomEvent</span><span class="hl opt">(</span>type<span class="hl opt">, {</span>
                        detail<span class="hl opt">:</span> detail<span class="hl opt">,</span>
                        bubbles<span class="hl opt">:</span> <span class="hl kwa">false</span><span class="hl opt">,</span>
                        cancelable<span class="hl opt">:</span> <span class="hl kwa">true</span>
                    <span class="hl opt">});</span>
                <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>self<span class="hl opt">.</span>dispatchEvent<span class="hl opt">) {</span>
                    event <span class="hl opt">=</span> document<span class="hl opt">.</span><span class="hl kwd">createEvent</span><span class="hl opt">(</span><span class="hl str">&quot;CustomEvent&quot;</span><span class="hl opt">);</span>
                    event<span class="hl opt">.</span><span class="hl kwd">initCustomEvent</span><span class="hl opt">(</span>type<span class="hl opt">,</span> <span class="hl kwa">false</span><span class="hl opt">,</span> <span class="hl kwa">true</span><span class="hl opt">,</span> detail<span class="hl opt">);</span>
                <span class="hl opt">}</span>

                <span class="hl kwa">return</span> event <span class="hl opt">? !</span>self<span class="hl opt">.</span><span class="hl kwd">dispatchEvent</span><span class="hl opt">(</span>event<span class="hl opt">) :</span> <span class="hl kwa">false</span><span class="hl opt">;</span>
            <span class="hl opt">};</span>
        <span class="hl opt">}</span>

        <span class="hl kwa">var</span> toWindowMethodNameMap <span class="hl opt">= {};</span>
        toWindowMethodNameMap<span class="hl opt">[</span><span class="hl str">&quot;unhandledRejection&quot;</span><span class="hl opt">] = (</span><span class="hl str">&quot;on&quot;</span> <span class="hl opt">+</span>
            <span class="hl str">&quot;unhandledRejection&quot;</span><span class="hl opt">).</span><span class="hl kwd">toLowerCase</span><span class="hl opt">();</span>
        toWindowMethodNameMap<span class="hl opt">[</span><span class="hl str">&quot;rejectionHandled&quot;</span><span class="hl opt">] = (</span><span class="hl str">&quot;on&quot;</span> <span class="hl opt">+</span>
            <span class="hl str">&quot;rejectionHandled&quot;</span><span class="hl opt">).</span><span class="hl kwd">toLowerCase</span><span class="hl opt">();</span>

        <span class="hl kwa">return function</span><span class="hl opt">(</span>name<span class="hl opt">,</span> reason<span class="hl opt">,</span> promise<span class="hl opt">) {</span>
            <span class="hl kwa">var</span> methodName <span class="hl opt">=</span> toWindowMethodNameMap<span class="hl opt">[</span>name<span class="hl opt">];</span>
            <span class="hl kwa">var</span> method <span class="hl opt">=</span> self<span class="hl opt">[</span>methodName<span class="hl opt">];</span>
            <span class="hl kwa">if</span> <span class="hl opt">(!</span>method<span class="hl opt">)</span> <span class="hl kwa">return false</span><span class="hl opt">;</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>name <span class="hl opt">===</span> <span class="hl str">&quot;rejectionHandled&quot;</span><span class="hl opt">) {</span>
                method<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span>self<span class="hl opt">,</span> promise<span class="hl opt">);</span>
            <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
                method<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span>self<span class="hl opt">,</span> reason<span class="hl opt">,</span> promise<span class="hl opt">);</span>
            <span class="hl opt">}</span>
            <span class="hl kwa">return true</span><span class="hl opt">;</span>
        <span class="hl opt">};</span>
    <span class="hl opt">}</span>
<span class="hl opt">})();</span>

<span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> console <span class="hl opt">!==</span> <span class="hl str">&quot;undefined&quot;</span> <span class="hl opt">&amp;&amp;</span> <span class="hl kwa">typeof</span> console<span class="hl opt">.</span>warn <span class="hl opt">!==</span> <span class="hl str">&quot;undefined&quot;</span><span class="hl opt">) {</span>
    <span class="hl kwd">warn</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>message<span class="hl opt">) {</span>
        console<span class="hl opt">.</span><span class="hl kwd">warn</span><span class="hl opt">(</span>message<span class="hl opt">);</span>
    <span class="hl opt">};</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>util<span class="hl opt">.</span>isNode <span class="hl opt">&amp;&amp;</span> process<span class="hl opt">.</span>stderr<span class="hl opt">.</span>isTTY<span class="hl opt">) {</span>
        <span class="hl kwd">warn</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>message<span class="hl opt">) {</span>
            process<span class="hl opt">.</span>stderr<span class="hl opt">.</span><span class="hl kwd">write</span><span class="hl opt">(</span><span class="hl str">&quot;</span><span class="hl esc">\u001b</span><span class="hl str">[31m&quot;</span> <span class="hl opt">+</span> message <span class="hl opt">+</span> <span class="hl str">&quot;</span><span class="hl esc">\u001b</span><span class="hl str">[39m</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
        <span class="hl opt">};</span>
    <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(!</span>util<span class="hl opt">.</span>isNode <span class="hl opt">&amp;&amp;</span> <span class="hl kwa">typeof</span> <span class="hl opt">(</span><span class="hl kwa">new</span> <span class="hl kwd">Error</span><span class="hl opt">().</span>stack<span class="hl opt">) ===</span> <span class="hl str">&quot;string&quot;</span><span class="hl opt">) {</span>
        <span class="hl kwd">warn</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>message<span class="hl opt">) {</span>
            console<span class="hl opt">.</span><span class="hl kwd">warn</span><span class="hl opt">(</span><span class="hl str">&quot;%c&quot;</span> <span class="hl opt">+</span> message<span class="hl opt">,</span> <span class="hl str">&quot;color: red&quot;</span><span class="hl opt">);</span>
        <span class="hl opt">};</span>
    <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwa">return</span> CapturedTrace<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl opt">},{</span><span class="hl str">&quot;./async.js&quot;</span><span class="hl opt">:</span><span class="hl num">2</span><span class="hl opt">,</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">:</span><span class="hl num">38</span><span class="hl opt">}],</span><span class="hl num">8</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>_dereq_<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl str">&quot;use strict&quot;</span><span class="hl opt">;</span>
module<span class="hl opt">.</span><span class="hl kwd">exports</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>NEXT_FILTER<span class="hl opt">) {</span>
<span class="hl kwa">var</span> util <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> errors <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./errors.js&quot;</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> tryCatch <span class="hl opt">=</span> util<span class="hl opt">.</span>tryCatch<span class="hl opt">;</span>
<span class="hl kwa">var</span> errorObj <span class="hl opt">=</span> util<span class="hl opt">.</span>errorObj<span class="hl opt">;</span>
<span class="hl kwa">var</span> keys <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./es5.js&quot;</span><span class="hl opt">).</span>keys<span class="hl opt">;</span>
<span class="hl kwa">var</span> TypeError <span class="hl opt">=</span> errors<span class="hl opt">.</span>TypeError<span class="hl opt">;</span>

<span class="hl kwa">function</span> <span class="hl kwd">CatchFilter</span><span class="hl opt">(</span>instances<span class="hl opt">,</span> callback<span class="hl opt">,</span> promise<span class="hl opt">) {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_instances <span class="hl opt">=</span> instances<span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_callback <span class="hl opt">=</span> callback<span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_promise <span class="hl opt">=</span> promise<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">safePredicate</span><span class="hl opt">(</span>predicate<span class="hl opt">,</span> e<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> safeObject <span class="hl opt">= {};</span>
    <span class="hl kwa">var</span> retfilter <span class="hl opt">=</span> <span class="hl kwd">tryCatch</span><span class="hl opt">(</span>predicate<span class="hl opt">).</span><span class="hl kwd">call</span><span class="hl opt">(</span>safeObject<span class="hl opt">,</span> e<span class="hl opt">);</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>retfilter <span class="hl opt">===</span> errorObj<span class="hl opt">)</span> <span class="hl kwa">return</span> retfilter<span class="hl opt">;</span>

    <span class="hl kwa">var</span> safeKeys <span class="hl opt">=</span> <span class="hl kwd">keys</span><span class="hl opt">(</span>safeObject<span class="hl opt">);</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>safeKeys<span class="hl opt">.</span>length<span class="hl opt">) {</span>
        errorObj<span class="hl opt">.</span>e <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">TypeError</span><span class="hl opt">(</span><span class="hl str">&quot;Catch filter must inherit from Error or be a simple predicate function</span><span class="hl esc">\u000a\u000a</span>    <span class="hl str">See http://goo.gl/o84o68</span><span class="hl esc">\u000a</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
        <span class="hl kwa">return</span> errorObj<span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return</span> retfilter<span class="hl opt">;</span>
<span class="hl opt">}</span>

CatchFilter<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">doFilter</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>e<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> cb <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_callback<span class="hl opt">;</span>
    <span class="hl kwa">var</span> promise <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_promise<span class="hl opt">;</span>
    <span class="hl kwa">var</span> boundTo <span class="hl opt">=</span> promise<span class="hl opt">.</span><span class="hl kwd">_boundValue</span><span class="hl opt">();</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> len <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_instances<span class="hl opt">.</span>length<span class="hl opt">;</span> i <span class="hl opt">&lt;</span> len<span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
        <span class="hl kwa">var</span> item <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_instances<span class="hl opt">[</span>i<span class="hl opt">];</span>
        <span class="hl kwa">var</span> itemIsErrorType <span class="hl opt">=</span> item <span class="hl opt">===</span> Error <span class="hl opt">||</span>
            <span class="hl opt">(</span>item <span class="hl opt">!=</span> <span class="hl kwa">null</span> <span class="hl opt">&amp;&amp;</span> item<span class="hl opt">.</span><span class="hl kwa">prototype instanceof</span> Error<span class="hl opt">);</span>

        <span class="hl kwa">if</span> <span class="hl opt">(</span>itemIsErrorType <span class="hl opt">&amp;&amp;</span> e <span class="hl kwa">instanceof</span> item<span class="hl opt">) {</span>
            <span class="hl kwa">var</span> ret <span class="hl opt">=</span> <span class="hl kwd">tryCatch</span><span class="hl opt">(</span>cb<span class="hl opt">).</span><span class="hl kwd">call</span><span class="hl opt">(</span>boundTo<span class="hl opt">,</span> e<span class="hl opt">);</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>ret <span class="hl opt">===</span> errorObj<span class="hl opt">) {</span>
                NEXT_FILTER<span class="hl opt">.</span>e <span class="hl opt">=</span> ret<span class="hl opt">.</span>e<span class="hl opt">;</span>
                <span class="hl kwa">return</span> NEXT_FILTER<span class="hl opt">;</span>
            <span class="hl opt">}</span>
            <span class="hl kwa">return</span> ret<span class="hl opt">;</span>
        <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> item <span class="hl opt">===</span> <span class="hl str">&quot;function&quot;</span> <span class="hl opt">&amp;&amp; !</span>itemIsErrorType<span class="hl opt">) {</span>
            <span class="hl kwa">var</span> shouldHandle <span class="hl opt">=</span> <span class="hl kwd">safePredicate</span><span class="hl opt">(</span>item<span class="hl opt">,</span> e<span class="hl opt">);</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>shouldHandle <span class="hl opt">===</span> errorObj<span class="hl opt">) {</span>
                e <span class="hl opt">=</span> errorObj<span class="hl opt">.</span>e<span class="hl opt">;</span>
                <span class="hl kwa">break</span><span class="hl opt">;</span>
            <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>shouldHandle<span class="hl opt">) {</span>
                <span class="hl kwa">var</span> ret <span class="hl opt">=</span> <span class="hl kwd">tryCatch</span><span class="hl opt">(</span>cb<span class="hl opt">).</span><span class="hl kwd">call</span><span class="hl opt">(</span>boundTo<span class="hl opt">,</span> e<span class="hl opt">);</span>
                <span class="hl kwa">if</span> <span class="hl opt">(</span>ret <span class="hl opt">===</span> errorObj<span class="hl opt">) {</span>
                    NEXT_FILTER<span class="hl opt">.</span>e <span class="hl opt">=</span> ret<span class="hl opt">.</span>e<span class="hl opt">;</span>
                    <span class="hl kwa">return</span> NEXT_FILTER<span class="hl opt">;</span>
                <span class="hl opt">}</span>
                <span class="hl kwa">return</span> ret<span class="hl opt">;</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>
    NEXT_FILTER<span class="hl opt">.</span>e <span class="hl opt">=</span> e<span class="hl opt">;</span>
    <span class="hl kwa">return</span> NEXT_FILTER<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl kwa">return</span> CatchFilter<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl opt">},{</span><span class="hl str">&quot;./errors.js&quot;</span><span class="hl opt">:</span><span class="hl num">13</span><span class="hl opt">,</span><span class="hl str">&quot;./es5.js&quot;</span><span class="hl opt">:</span><span class="hl num">14</span><span class="hl opt">,</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">:</span><span class="hl num">38</span><span class="hl opt">}],</span><span class="hl num">9</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>_dereq_<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl str">&quot;use strict&quot;</span><span class="hl opt">;</span>
module<span class="hl opt">.</span><span class="hl kwd">exports</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>Promise<span class="hl opt">,</span> CapturedTrace<span class="hl opt">,</span> isDebugging<span class="hl opt">) {</span>
<span class="hl kwa">var</span> contextStack <span class="hl opt">= [];</span>
<span class="hl kwa">function</span> <span class="hl kwd">Context</span><span class="hl opt">() {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_trace <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">CapturedTrace</span><span class="hl opt">(</span><span class="hl kwd">peekContext</span><span class="hl opt">());</span>
<span class="hl opt">}</span>
Context<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_pushContext</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!</span><span class="hl kwd">isDebugging</span><span class="hl opt">())</span> <span class="hl kwa">return</span><span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>_trace <span class="hl opt">!==</span> undefined<span class="hl opt">) {</span>
        contextStack<span class="hl opt">.</span><span class="hl kwd">push</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>_trace<span class="hl opt">);</span>
    <span class="hl opt">}</span>
<span class="hl opt">};</span>

Context<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_popContext</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!</span><span class="hl kwd">isDebugging</span><span class="hl opt">())</span> <span class="hl kwa">return</span><span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>_trace <span class="hl opt">!==</span> undefined<span class="hl opt">) {</span>
        contextStack<span class="hl opt">.</span><span class="hl kwd">pop</span><span class="hl opt">();</span>
    <span class="hl opt">}</span>
<span class="hl opt">};</span>

<span class="hl kwa">function</span> <span class="hl kwd">createContext</span><span class="hl opt">() {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">isDebugging</span><span class="hl opt">())</span> <span class="hl kwa">return new</span> <span class="hl kwd">Context</span><span class="hl opt">();</span>
<span class="hl opt">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">peekContext</span><span class="hl opt">() {</span>
    <span class="hl kwa">var</span> lastIndex <span class="hl opt">=</span> contextStack<span class="hl opt">.</span>length <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>lastIndex <span class="hl opt">&gt;=</span> <span class="hl num">0</span><span class="hl opt">) {</span>
        <span class="hl kwa">return</span> contextStack<span class="hl opt">[</span>lastIndex<span class="hl opt">];</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return</span> undefined<span class="hl opt">;</span>
<span class="hl opt">}</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_peekContext <span class="hl opt">=</span> peekContext<span class="hl opt">;</span>
Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_pushContext <span class="hl opt">=</span> Context<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_pushContext<span class="hl opt">;</span>
Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_popContext <span class="hl opt">=</span> Context<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_popContext<span class="hl opt">;</span>

<span class="hl kwa">return</span> createContext<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl opt">},{}],</span><span class="hl num">10</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>_dereq_<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl str">&quot;use strict&quot;</span><span class="hl opt">;</span>
module<span class="hl opt">.</span><span class="hl kwd">exports</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>Promise<span class="hl opt">,</span> CapturedTrace<span class="hl opt">) {</span>
<span class="hl kwa">var</span> getDomain <span class="hl opt">=</span> Promise<span class="hl opt">.</span>_getDomain<span class="hl opt">;</span>
<span class="hl kwa">var</span> async <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./async.js&quot;</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> Warning <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./errors.js&quot;</span><span class="hl opt">).</span>Warning<span class="hl opt">;</span>
<span class="hl kwa">var</span> util <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> canAttachTrace <span class="hl opt">=</span> util<span class="hl opt">.</span>canAttachTrace<span class="hl opt">;</span>
<span class="hl kwa">var</span> unhandledRejectionHandled<span class="hl opt">;</span>
<span class="hl kwa">var</span> possiblyUnhandledRejection<span class="hl opt">;</span>
<span class="hl kwa">var</span> debugging <span class="hl opt">=</span> <span class="hl kwa">false</span> <span class="hl opt">|| (</span>util<span class="hl opt">.</span>isNode <span class="hl opt">&amp;&amp;</span>
                    <span class="hl opt">(!!</span>process<span class="hl opt">.</span>env<span class="hl opt">[</span><span class="hl str">&quot;BLUEBIRD_DEBUG&quot;</span><span class="hl opt">] ||</span>
                     process<span class="hl opt">.</span>env<span class="hl opt">[</span><span class="hl str">&quot;NODE_ENV&quot;</span><span class="hl opt">] ===</span> <span class="hl str">&quot;development&quot;</span><span class="hl opt">));</span>

<span class="hl kwa">if</span> <span class="hl opt">(</span>debugging<span class="hl opt">) {</span>
    async<span class="hl opt">.</span><span class="hl kwd">disableTrampolineIfNecessary</span><span class="hl opt">();</span>
<span class="hl opt">}</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_ignoreRejections</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_unsetRejectionIsUnhandled</span><span class="hl opt">();</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">|</span> <span class="hl num">16777216</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_ensurePossibleRejectionHandled</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">if</span> <span class="hl opt">((</span><span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">&amp;</span> <span class="hl num">16777216</span><span class="hl opt">) !==</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">return</span><span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_setRejectionIsUnhandled</span><span class="hl opt">();</span>
    async<span class="hl opt">.</span><span class="hl kwd">invokeLater</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>_notifyUnhandledRejection<span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">,</span> undefined<span class="hl opt">);</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_notifyUnhandledRejectionIsHandled</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    CapturedTrace<span class="hl opt">.</span><span class="hl kwd">fireRejectionEvent</span><span class="hl opt">(</span><span class="hl str">&quot;rejectionHandled&quot;</span><span class="hl opt">,</span>
                                  unhandledRejectionHandled<span class="hl opt">,</span> undefined<span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">);</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_notifyUnhandledRejection</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_isRejectionUnhandled</span><span class="hl opt">()) {</span>
        <span class="hl kwa">var</span> reason <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_getCarriedStackTrace</span><span class="hl opt">() ||</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_settledValue<span class="hl opt">;</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_setUnhandledRejectionIsNotified</span><span class="hl opt">();</span>
        CapturedTrace<span class="hl opt">.</span><span class="hl kwd">fireRejectionEvent</span><span class="hl opt">(</span><span class="hl str">&quot;unhandledRejection&quot;</span><span class="hl opt">,</span>
                                      possiblyUnhandledRejection<span class="hl opt">,</span> reason<span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_setUnhandledRejectionIsNotified</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">|</span> <span class="hl num">524288</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_unsetUnhandledRejectionIsNotified</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">&amp; (~</span><span class="hl num">524288</span><span class="hl opt">);</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_isUnhandledRejectionNotified</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">&amp;</span> <span class="hl num">524288</span><span class="hl opt">) &gt;</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_setRejectionIsUnhandled</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">|</span> <span class="hl num">2097152</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_unsetRejectionIsUnhandled</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">&amp; (~</span><span class="hl num">2097152</span><span class="hl opt">);</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_isUnhandledRejectionNotified</span><span class="hl opt">()) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_unsetUnhandledRejectionIsNotified</span><span class="hl opt">();</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_notifyUnhandledRejectionIsHandled</span><span class="hl opt">();</span>
    <span class="hl opt">}</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_isRejectionUnhandled</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">&amp;</span> <span class="hl num">2097152</span><span class="hl opt">) &gt;</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_setCarriedStackTrace</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>capturedTrace<span class="hl opt">) {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">|</span> <span class="hl num">1048576</span><span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_fulfillmentHandler0 <span class="hl opt">=</span> capturedTrace<span class="hl opt">;</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_isCarryingStackTrace</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">&amp;</span> <span class="hl num">1048576</span><span class="hl opt">) &gt;</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_getCarriedStackTrace</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_isCarryingStackTrace</span><span class="hl opt">()</span>
        <span class="hl opt">?</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_fulfillmentHandler0
        <span class="hl opt">:</span> undefined<span class="hl opt">;</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_captureStackTrace</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>debugging<span class="hl opt">) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>_trace <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">CapturedTrace</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_peekContext</span><span class="hl opt">());</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return this</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_attachExtraTrace</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>error<span class="hl opt">,</span> ignoreSelf<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>debugging <span class="hl opt">&amp;&amp;</span> <span class="hl kwd">canAttachTrace</span><span class="hl opt">(</span>error<span class="hl opt">)) {</span>
        <span class="hl kwa">var</span> trace <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_trace<span class="hl opt">;</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>trace <span class="hl opt">!==</span> undefined<span class="hl opt">) {</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>ignoreSelf<span class="hl opt">)</span> trace <span class="hl opt">=</span> trace<span class="hl opt">.</span>_parent<span class="hl opt">;</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>trace <span class="hl opt">!==</span> undefined<span class="hl opt">) {</span>
            trace<span class="hl opt">.</span><span class="hl kwd">attachExtraTrace</span><span class="hl opt">(</span>error<span class="hl opt">);</span>
        <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(!</span>error<span class="hl opt">.</span>__stackCleaned__<span class="hl opt">) {</span>
            <span class="hl kwa">var</span> parsed <span class="hl opt">=</span> CapturedTrace<span class="hl opt">.</span><span class="hl kwd">parseStackAndMessage</span><span class="hl opt">(</span>error<span class="hl opt">);</span>
            util<span class="hl opt">.</span><span class="hl kwd">notEnumerableProp</span><span class="hl opt">(</span>error<span class="hl opt">,</span> <span class="hl str">&quot;stack&quot;</span><span class="hl opt">,</span>
                parsed<span class="hl opt">.</span>message <span class="hl opt">+</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl opt">+</span> parsed<span class="hl opt">.</span>stack<span class="hl opt">.</span><span class="hl kwd">join</span><span class="hl opt">(</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">));</span>
            util<span class="hl opt">.</span><span class="hl kwd">notEnumerableProp</span><span class="hl opt">(</span>error<span class="hl opt">,</span> <span class="hl str">&quot;__stackCleaned__&quot;</span><span class="hl opt">,</span> <span class="hl kwa">true</span><span class="hl opt">);</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_warn</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>message<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> warning <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Warning</span><span class="hl opt">(</span>message<span class="hl opt">);</span>
    <span class="hl kwa">var</span> ctx <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_peekContext</span><span class="hl opt">();</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>ctx<span class="hl opt">) {</span>
        ctx<span class="hl opt">.</span><span class="hl kwd">attachExtraTrace</span><span class="hl opt">(</span>warning<span class="hl opt">);</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
        <span class="hl kwa">var</span> parsed <span class="hl opt">=</span> CapturedTrace<span class="hl opt">.</span><span class="hl kwd">parseStackAndMessage</span><span class="hl opt">(</span>warning<span class="hl opt">);</span>
        warning<span class="hl opt">.</span>stack <span class="hl opt">=</span> parsed<span class="hl opt">.</span>message <span class="hl opt">+</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl opt">+</span> parsed<span class="hl opt">.</span>stack<span class="hl opt">.</span><span class="hl kwd">join</span><span class="hl opt">(</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
    CapturedTrace<span class="hl opt">.</span><span class="hl kwd">formatAndLogError</span><span class="hl opt">(</span>warning<span class="hl opt">,</span> <span class="hl str">&quot;&quot;</span><span class="hl opt">);</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwd">onPossiblyUnhandledRejection</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>fn<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> domain <span class="hl opt">=</span> <span class="hl kwd">getDomain</span><span class="hl opt">();</span>
    possiblyUnhandledRejection <span class="hl opt">=</span>
        <span class="hl kwa">typeof</span> fn <span class="hl opt">===</span> <span class="hl str">&quot;function&quot;</span> <span class="hl opt">? (</span>domain <span class="hl opt">===</span> <span class="hl kwa">null</span> <span class="hl opt">?</span> fn <span class="hl opt">:</span> domain<span class="hl opt">.</span><span class="hl kwd">bind</span><span class="hl opt">(</span>fn<span class="hl opt">))</span>
                                 <span class="hl opt">:</span> undefined<span class="hl opt">;</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwd">onUnhandledRejectionHandled</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>fn<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> domain <span class="hl opt">=</span> <span class="hl kwd">getDomain</span><span class="hl opt">();</span>
    unhandledRejectionHandled <span class="hl opt">=</span>
        <span class="hl kwa">typeof</span> fn <span class="hl opt">===</span> <span class="hl str">&quot;function&quot;</span> <span class="hl opt">? (</span>domain <span class="hl opt">===</span> <span class="hl kwa">null</span> <span class="hl opt">?</span> fn <span class="hl opt">:</span> domain<span class="hl opt">.</span><span class="hl kwd">bind</span><span class="hl opt">(</span>fn<span class="hl opt">))</span>
                                 <span class="hl opt">:</span> undefined<span class="hl opt">;</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwd">longStackTraces</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>async<span class="hl opt">.</span><span class="hl kwd">haveItemsQueued</span><span class="hl opt">() &amp;&amp;</span>
        debugging <span class="hl opt">===</span> <span class="hl kwa">false</span>
   <span class="hl opt">) {</span>
        <span class="hl kwa">throw new</span> <span class="hl kwd">Error</span><span class="hl opt">(</span><span class="hl str">&quot;cannot enable long stack traces after promises have been created</span><span class="hl esc">\u000a\u000a</span>    <span class="hl str">See http://goo.gl/DT1qyG</span><span class="hl esc">\u000a</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
    debugging <span class="hl opt">=</span> CapturedTrace<span class="hl opt">.</span><span class="hl kwd">isSupported</span><span class="hl opt">();</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>debugging<span class="hl opt">) {</span>
        async<span class="hl opt">.</span><span class="hl kwd">disableTrampolineIfNecessary</span><span class="hl opt">();</span>
    <span class="hl opt">}</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwd">hasLongStackTraces</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return</span> debugging <span class="hl opt">&amp;&amp;</span> CapturedTrace<span class="hl opt">.</span><span class="hl kwd">isSupported</span><span class="hl opt">();</span>
<span class="hl opt">};</span>

<span class="hl kwa">if</span> <span class="hl opt">(!</span>CapturedTrace<span class="hl opt">.</span><span class="hl kwd">isSupported</span><span class="hl opt">()) {</span>
    Promise<span class="hl opt">.</span><span class="hl kwd">longStackTraces</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(){};</span>
    debugging <span class="hl opt">=</span> <span class="hl kwa">false</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwa">return function</span><span class="hl opt">() {</span>
    <span class="hl kwa">return</span> debugging<span class="hl opt">;</span>
<span class="hl opt">};</span>
<span class="hl opt">};</span>

<span class="hl opt">},{</span><span class="hl str">&quot;./async.js&quot;</span><span class="hl opt">:</span><span class="hl num">2</span><span class="hl opt">,</span><span class="hl str">&quot;./errors.js&quot;</span><span class="hl opt">:</span><span class="hl num">13</span><span class="hl opt">,</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">:</span><span class="hl num">38</span><span class="hl opt">}],</span><span class="hl num">11</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>_dereq_<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl str">&quot;use strict&quot;</span><span class="hl opt">;</span>
<span class="hl kwa">var</span> util <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> isPrimitive <span class="hl opt">=</span> util<span class="hl opt">.</span>isPrimitive<span class="hl opt">;</span>

module<span class="hl opt">.</span><span class="hl kwd">exports</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>Promise<span class="hl opt">) {</span>
<span class="hl kwa">var</span> <span class="hl kwd">returner</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return this</span><span class="hl opt">;</span>
<span class="hl opt">};</span>
<span class="hl kwa">var</span> <span class="hl kwd">thrower</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">throw this</span><span class="hl opt">;</span>
<span class="hl opt">};</span>
<span class="hl kwa">var</span> <span class="hl kwd">returnUndefined</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {};</span>
<span class="hl kwa">var</span> <span class="hl kwd">throwUndefined</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
    <span class="hl kwa">throw</span> undefined<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl kwa">var</span> <span class="hl kwd">wrapper</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>value<span class="hl opt">,</span> action<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>action <span class="hl opt">===</span> <span class="hl num">1</span><span class="hl opt">) {</span>
        <span class="hl kwa">return function</span> <span class="hl opt">() {</span>
            <span class="hl kwa">throw</span> value<span class="hl opt">;</span>
        <span class="hl opt">};</span>
    <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>action <span class="hl opt">===</span> <span class="hl num">2</span><span class="hl opt">) {</span>
        <span class="hl kwa">return function</span> <span class="hl opt">() {</span>
            <span class="hl kwa">return</span> value<span class="hl opt">;</span>
        <span class="hl opt">};</span>
    <span class="hl opt">}</span>
<span class="hl opt">};</span>


Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">[</span><span class="hl str">&quot;return&quot;</span><span class="hl opt">] =</span>
Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">thenReturn</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>value<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>value <span class="hl opt">===</span> undefined<span class="hl opt">)</span> <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">then</span><span class="hl opt">(</span>returnUndefined<span class="hl opt">);</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">isPrimitive</span><span class="hl opt">(</span>value<span class="hl opt">)) {</span>
        <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_then</span><span class="hl opt">(</span>
            <span class="hl kwd">wrapper</span><span class="hl opt">(</span>value<span class="hl opt">,</span> <span class="hl num">2</span><span class="hl opt">),</span>
            undefined<span class="hl opt">,</span>
            undefined<span class="hl opt">,</span>
            undefined<span class="hl opt">,</span>
            undefined
       <span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_then</span><span class="hl opt">(</span>returner<span class="hl opt">,</span> undefined<span class="hl opt">,</span> undefined<span class="hl opt">,</span> value<span class="hl opt">,</span> undefined<span class="hl opt">);</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">[</span><span class="hl str">&quot;throw&quot;</span><span class="hl opt">] =</span>
Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">thenThrow</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>reason<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>reason <span class="hl opt">===</span> undefined<span class="hl opt">)</span> <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">then</span><span class="hl opt">(</span>throwUndefined<span class="hl opt">);</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">isPrimitive</span><span class="hl opt">(</span>reason<span class="hl opt">)) {</span>
        <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_then</span><span class="hl opt">(</span>
            <span class="hl kwd">wrapper</span><span class="hl opt">(</span>reason<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">),</span>
            undefined<span class="hl opt">,</span>
            undefined<span class="hl opt">,</span>
            undefined<span class="hl opt">,</span>
            undefined
       <span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_then</span><span class="hl opt">(</span>thrower<span class="hl opt">,</span> undefined<span class="hl opt">,</span> undefined<span class="hl opt">,</span> reason<span class="hl opt">,</span> undefined<span class="hl opt">);</span>
<span class="hl opt">};</span>
<span class="hl opt">};</span>

<span class="hl opt">},{</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">:</span><span class="hl num">38</span><span class="hl opt">}],</span><span class="hl num">12</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>_dereq_<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl str">&quot;use strict&quot;</span><span class="hl opt">;</span>
module<span class="hl opt">.</span><span class="hl kwd">exports</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>Promise<span class="hl opt">,</span> INTERNAL<span class="hl opt">) {</span>
<span class="hl kwa">var</span> PromiseReduce <span class="hl opt">=</span> Promise<span class="hl opt">.</span>reduce<span class="hl opt">;</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">each</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>fn<span class="hl opt">) {</span>
    <span class="hl kwa">return</span> <span class="hl kwd">PromiseReduce</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> fn<span class="hl opt">,</span> <span class="hl kwa">null</span><span class="hl opt">,</span> INTERNAL<span class="hl opt">);</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwd">each</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>promises<span class="hl opt">,</span> fn<span class="hl opt">) {</span>
    <span class="hl kwa">return</span> <span class="hl kwd">PromiseReduce</span><span class="hl opt">(</span>promises<span class="hl opt">,</span> fn<span class="hl opt">,</span> <span class="hl kwa">null</span><span class="hl opt">,</span> INTERNAL<span class="hl opt">);</span>
<span class="hl opt">};</span>
<span class="hl opt">};</span>

<span class="hl opt">},{}],</span><span class="hl num">13</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>_dereq_<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl str">&quot;use strict&quot;</span><span class="hl opt">;</span>
<span class="hl kwa">var</span> es5 <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./es5.js&quot;</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> Objectfreeze <span class="hl opt">=</span> es5<span class="hl opt">.</span>freeze<span class="hl opt">;</span>
<span class="hl kwa">var</span> util <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> inherits <span class="hl opt">=</span> util<span class="hl opt">.</span>inherits<span class="hl opt">;</span>
<span class="hl kwa">var</span> notEnumerableProp <span class="hl opt">=</span> util<span class="hl opt">.</span>notEnumerableProp<span class="hl opt">;</span>

<span class="hl kwa">function</span> <span class="hl kwd">subError</span><span class="hl opt">(</span>nameProperty<span class="hl opt">,</span> defaultMessage<span class="hl opt">) {</span>
    <span class="hl kwa">function</span> <span class="hl kwd">SubError</span><span class="hl opt">(</span>message<span class="hl opt">) {</span>
        <span class="hl kwa">if</span> <span class="hl opt">(!(</span><span class="hl kwa">this instanceof</span> SubError<span class="hl opt">))</span> <span class="hl kwa">return new</span> <span class="hl kwd">SubError</span><span class="hl opt">(</span>message<span class="hl opt">);</span>
        <span class="hl kwd">notEnumerableProp</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> <span class="hl str">&quot;message&quot;</span><span class="hl opt">,</span>
            <span class="hl kwa">typeof</span> message <span class="hl opt">===</span> <span class="hl str">&quot;string&quot;</span> <span class="hl opt">?</span> message <span class="hl opt">:</span> defaultMessage<span class="hl opt">);</span>
        <span class="hl kwd">notEnumerableProp</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> <span class="hl str">&quot;name&quot;</span><span class="hl opt">,</span> nameProperty<span class="hl opt">);</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>Error<span class="hl opt">.</span>captureStackTrace<span class="hl opt">) {</span>
            Error<span class="hl opt">.</span><span class="hl kwd">captureStackTrace</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">.</span>constructor<span class="hl opt">);</span>
        <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
            Error<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">);</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>
    <span class="hl kwd">inherits</span><span class="hl opt">(</span>SubError<span class="hl opt">,</span> Error<span class="hl opt">);</span>
    <span class="hl kwa">return</span> SubError<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwa">var</span> _TypeError<span class="hl opt">,</span> _RangeError<span class="hl opt">;</span>
<span class="hl kwa">var</span> Warning <span class="hl opt">=</span> <span class="hl kwd">subError</span><span class="hl opt">(</span><span class="hl str">&quot;Warning&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;warning&quot;</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> CancellationError <span class="hl opt">=</span> <span class="hl kwd">subError</span><span class="hl opt">(</span><span class="hl str">&quot;CancellationError&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;cancellation error&quot;</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> TimeoutError <span class="hl opt">=</span> <span class="hl kwd">subError</span><span class="hl opt">(</span><span class="hl str">&quot;TimeoutError&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;timeout error&quot;</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> AggregateError <span class="hl opt">=</span> <span class="hl kwd">subError</span><span class="hl opt">(</span><span class="hl str">&quot;AggregateError&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;aggregate error&quot;</span><span class="hl opt">);</span>
<span class="hl kwa">try</span> <span class="hl opt">{</span>
    _TypeError <span class="hl opt">=</span> TypeError<span class="hl opt">;</span>
    _RangeError <span class="hl opt">=</span> RangeError<span class="hl opt">;</span>
<span class="hl opt">}</span> <span class="hl kwa">catch</span><span class="hl opt">(</span>e<span class="hl opt">) {</span>
    _TypeError <span class="hl opt">=</span> <span class="hl kwd">subError</span><span class="hl opt">(</span><span class="hl str">&quot;TypeError&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;type error&quot;</span><span class="hl opt">);</span>
    _RangeError <span class="hl opt">=</span> <span class="hl kwd">subError</span><span class="hl opt">(</span><span class="hl str">&quot;RangeError&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;range error&quot;</span><span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwa">var</span> methods <span class="hl opt">= (</span><span class="hl str">&quot;join pop push shift unshift slice filter forEach some &quot;</span> <span class="hl opt">+</span>
    <span class="hl str">&quot;every map indexOf lastIndexOf reduce reduceRight sort reverse&quot;</span><span class="hl opt">).</span><span class="hl kwd">split</span><span class="hl opt">(</span><span class="hl str">&quot; &quot;</span><span class="hl opt">);</span>

<span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> methods<span class="hl opt">.</span>length<span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> Array<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">[</span>methods<span class="hl opt">[</span>i<span class="hl opt">]] ===</span> <span class="hl str">&quot;function&quot;</span><span class="hl opt">) {</span>
        AggregateError<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">[</span>methods<span class="hl opt">[</span>i<span class="hl opt">]] =</span> Array<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">[</span>methods<span class="hl opt">[</span>i<span class="hl opt">]];</span>
    <span class="hl opt">}</span>
<span class="hl opt">}</span>

es5<span class="hl opt">.</span><span class="hl kwd">defineProperty</span><span class="hl opt">(</span>AggregateError<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">,</span> <span class="hl str">&quot;length&quot;</span><span class="hl opt">, {</span>
    value<span class="hl opt">:</span> <span class="hl num">0</span><span class="hl opt">,</span>
    configurable<span class="hl opt">:</span> <span class="hl kwa">false</span><span class="hl opt">,</span>
    writable<span class="hl opt">:</span> <span class="hl kwa">true</span><span class="hl opt">,</span>
    enumerable<span class="hl opt">:</span> <span class="hl kwa">true</span>
<span class="hl opt">});</span>
AggregateError<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">[</span><span class="hl str">&quot;isOperational&quot;</span><span class="hl opt">] =</span> <span class="hl kwa">true</span><span class="hl opt">;</span>
<span class="hl kwa">var</span> level <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
AggregateError<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">toString</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
    <span class="hl kwa">var</span> indent <span class="hl opt">=</span> <span class="hl kwd">Array</span><span class="hl opt">(</span>level <span class="hl opt">*</span> <span class="hl num">4</span> <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">).</span><span class="hl kwd">join</span><span class="hl opt">(</span><span class="hl str">&quot; &quot;</span><span class="hl opt">);</span>
    <span class="hl kwa">var</span> ret <span class="hl opt">=</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl opt">+</span> indent <span class="hl opt">+</span> <span class="hl str">&quot;AggregateError of:&quot;</span> <span class="hl opt">+</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">;</span>
    level<span class="hl opt">++;</span>
    indent <span class="hl opt">=</span> <span class="hl kwd">Array</span><span class="hl opt">(</span>level <span class="hl opt">*</span> <span class="hl num">4</span> <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">).</span><span class="hl kwd">join</span><span class="hl opt">(</span><span class="hl str">&quot; &quot;</span><span class="hl opt">);</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> <span class="hl kwa">this</span><span class="hl opt">.</span>length<span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
        <span class="hl kwa">var</span> str <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">[</span>i<span class="hl opt">] ===</span> <span class="hl kwa">this</span> <span class="hl opt">?</span> <span class="hl str">&quot;[Circular AggregateError]&quot;</span> <span class="hl opt">:</span> <span class="hl kwa">this</span><span class="hl opt">[</span>i<span class="hl opt">] +</span> <span class="hl str">&quot;&quot;</span><span class="hl opt">;</span>
        <span class="hl kwa">var</span> lines <span class="hl opt">=</span> str<span class="hl opt">.</span><span class="hl kwd">split</span><span class="hl opt">(</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
        <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> j <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> j <span class="hl opt">&lt;</span> lines<span class="hl opt">.</span>length<span class="hl opt">; ++</span>j<span class="hl opt">) {</span>
            lines<span class="hl opt">[</span>j<span class="hl opt">] =</span> indent <span class="hl opt">+</span> lines<span class="hl opt">[</span>j<span class="hl opt">];</span>
        <span class="hl opt">}</span>
        str <span class="hl opt">=</span> lines<span class="hl opt">.</span><span class="hl kwd">join</span><span class="hl opt">(</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
        ret <span class="hl opt">+=</span> str <span class="hl opt">+</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
    level<span class="hl opt">--;</span>
    <span class="hl kwa">return</span> ret<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl kwa">function</span> <span class="hl kwd">OperationalError</span><span class="hl opt">(</span>message<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!(</span><span class="hl kwa">this instanceof</span> OperationalError<span class="hl opt">))</span>
        <span class="hl kwa">return new</span> <span class="hl kwd">OperationalError</span><span class="hl opt">(</span>message<span class="hl opt">);</span>
    <span class="hl kwd">notEnumerableProp</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> <span class="hl str">&quot;name&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;OperationalError&quot;</span><span class="hl opt">);</span>
    <span class="hl kwd">notEnumerableProp</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> <span class="hl str">&quot;message&quot;</span><span class="hl opt">,</span> message<span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>cause <span class="hl opt">=</span> message<span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">[</span><span class="hl str">&quot;isOperational&quot;</span><span class="hl opt">] =</span> <span class="hl kwa">true</span><span class="hl opt">;</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>message <span class="hl kwa">instanceof</span> Error<span class="hl opt">) {</span>
        <span class="hl kwd">notEnumerableProp</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> <span class="hl str">&quot;message&quot;</span><span class="hl opt">,</span> message<span class="hl opt">.</span>message<span class="hl opt">);</span>
        <span class="hl kwd">notEnumerableProp</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> <span class="hl str">&quot;stack&quot;</span><span class="hl opt">,</span> message<span class="hl opt">.</span>stack<span class="hl opt">);</span>
    <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>Error<span class="hl opt">.</span>captureStackTrace<span class="hl opt">) {</span>
        Error<span class="hl opt">.</span><span class="hl kwd">captureStackTrace</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">.</span>constructor<span class="hl opt">);</span>
    <span class="hl opt">}</span>

<span class="hl opt">}</span>
<span class="hl kwd">inherits</span><span class="hl opt">(</span>OperationalError<span class="hl opt">,</span> Error<span class="hl opt">);</span>

<span class="hl kwa">var</span> errorTypes <span class="hl opt">=</span> Error<span class="hl opt">[</span><span class="hl str">&quot;__BluebirdErrorTypes__&quot;</span><span class="hl opt">];</span>
<span class="hl kwa">if</span> <span class="hl opt">(!</span>errorTypes<span class="hl opt">) {</span>
    errorTypes <span class="hl opt">=</span> <span class="hl kwd">Objectfreeze</span><span class="hl opt">({</span>
        CancellationError<span class="hl opt">:</span> CancellationError<span class="hl opt">,</span>
        TimeoutError<span class="hl opt">:</span> TimeoutError<span class="hl opt">,</span>
        OperationalError<span class="hl opt">:</span> OperationalError<span class="hl opt">,</span>
        RejectionError<span class="hl opt">:</span> OperationalError<span class="hl opt">,</span>
        AggregateError<span class="hl opt">:</span> AggregateError
    <span class="hl opt">});</span>
    <span class="hl kwd">notEnumerableProp</span><span class="hl opt">(</span>Error<span class="hl opt">,</span> <span class="hl str">&quot;__BluebirdErrorTypes__&quot;</span><span class="hl opt">,</span> errorTypes<span class="hl opt">);</span>
<span class="hl opt">}</span>

module<span class="hl opt">.</span>exports <span class="hl opt">= {</span>
    Error<span class="hl opt">:</span> Error<span class="hl opt">,</span>
    TypeError<span class="hl opt">:</span> _TypeError<span class="hl opt">,</span>
    RangeError<span class="hl opt">:</span> _RangeError<span class="hl opt">,</span>
    CancellationError<span class="hl opt">:</span> errorTypes<span class="hl opt">.</span>CancellationError<span class="hl opt">,</span>
    OperationalError<span class="hl opt">:</span> errorTypes<span class="hl opt">.</span>OperationalError<span class="hl opt">,</span>
    TimeoutError<span class="hl opt">:</span> errorTypes<span class="hl opt">.</span>TimeoutError<span class="hl opt">,</span>
    AggregateError<span class="hl opt">:</span> errorTypes<span class="hl opt">.</span>AggregateError<span class="hl opt">,</span>
    Warning<span class="hl opt">:</span> Warning
<span class="hl opt">};</span>

<span class="hl opt">},{</span><span class="hl str">&quot;./es5.js&quot;</span><span class="hl opt">:</span><span class="hl num">14</span><span class="hl opt">,</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">:</span><span class="hl num">38</span><span class="hl opt">}],</span><span class="hl num">14</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>_dereq_<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl kwa">var</span> isES5 <span class="hl opt">= (</span><span class="hl kwa">function</span><span class="hl opt">(){</span>
    <span class="hl str">&quot;use strict&quot;</span><span class="hl opt">;</span>
    <span class="hl kwa">return this</span> <span class="hl opt">===</span> undefined<span class="hl opt">;</span>
<span class="hl opt">})();</span>

<span class="hl kwa">if</span> <span class="hl opt">(</span>isES5<span class="hl opt">) {</span>
    module<span class="hl opt">.</span>exports <span class="hl opt">= {</span>
        freeze<span class="hl opt">:</span> Object<span class="hl opt">.</span>freeze<span class="hl opt">,</span>
        defineProperty<span class="hl opt">:</span> Object<span class="hl opt">.</span>defineProperty<span class="hl opt">,</span>
        getDescriptor<span class="hl opt">:</span> Object<span class="hl opt">.</span>getOwnPropertyDescriptor<span class="hl opt">,</span>
        keys<span class="hl opt">:</span> Object<span class="hl opt">.</span>keys<span class="hl opt">,</span>
        names<span class="hl opt">:</span> Object<span class="hl opt">.</span>getOwnPropertyNames<span class="hl opt">,</span>
        getPrototypeOf<span class="hl opt">:</span> Object<span class="hl opt">.</span>getPrototypeOf<span class="hl opt">,</span>
        isArray<span class="hl opt">:</span> Array<span class="hl opt">.</span>isArray<span class="hl opt">,</span>
        isES5<span class="hl opt">:</span> isES5<span class="hl opt">,</span>
        <span class="hl kwd">propertyIsWritable</span><span class="hl opt">:</span> <span class="hl kwa">function</span><span class="hl opt">(</span>obj<span class="hl opt">,</span> prop<span class="hl opt">) {</span>
            <span class="hl kwa">var</span> descriptor <span class="hl opt">=</span> Object<span class="hl opt">.</span><span class="hl kwd">getOwnPropertyDescriptor</span><span class="hl opt">(</span>obj<span class="hl opt">,</span> prop<span class="hl opt">);</span>
            <span class="hl kwa">return</span> <span class="hl opt">!!(!</span>descriptor <span class="hl opt">||</span> descriptor<span class="hl opt">.</span>writable <span class="hl opt">||</span> descriptor<span class="hl opt">.</span><span class="hl kwa">set</span><span class="hl opt">);</span>
        <span class="hl opt">}</span>
    <span class="hl opt">};</span>
<span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
    <span class="hl kwa">var</span> has <span class="hl opt">= {}.</span>hasOwnProperty<span class="hl opt">;</span>
    <span class="hl kwa">var</span> str <span class="hl opt">= {}.</span>toString<span class="hl opt">;</span>
    <span class="hl kwa">var</span> proto <span class="hl opt">= {}.</span>constructor<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">;</span>

    <span class="hl kwa">var</span> <span class="hl kwd">ObjectKeys</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>o<span class="hl opt">) {</span>
        <span class="hl kwa">var</span> ret <span class="hl opt">= [];</span>
        <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> key <span class="hl kwa">in</span> o<span class="hl opt">) {</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>has<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span>o<span class="hl opt">,</span> key<span class="hl opt">)) {</span>
                ret<span class="hl opt">.</span><span class="hl kwd">push</span><span class="hl opt">(</span>key<span class="hl opt">);</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">return</span> ret<span class="hl opt">;</span>
    <span class="hl opt">};</span>

    <span class="hl kwa">var</span> <span class="hl kwd">ObjectGetDescriptor</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>o<span class="hl opt">,</span> key<span class="hl opt">) {</span>
        <span class="hl kwa">return</span> <span class="hl opt">{</span>value<span class="hl opt">:</span> o<span class="hl opt">[</span>key<span class="hl opt">]};</span>
    <span class="hl opt">};</span>

    <span class="hl kwa">var</span> <span class="hl kwd">ObjectDefineProperty</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>o<span class="hl opt">,</span> key<span class="hl opt">,</span> desc<span class="hl opt">) {</span>
        o<span class="hl opt">[</span>key<span class="hl opt">] =</span> desc<span class="hl opt">.</span>value<span class="hl opt">;</span>
        <span class="hl kwa">return</span> o<span class="hl opt">;</span>
    <span class="hl opt">};</span>

    <span class="hl kwa">var</span> <span class="hl kwd">ObjectFreeze</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>obj<span class="hl opt">) {</span>
        <span class="hl kwa">return</span> obj<span class="hl opt">;</span>
    <span class="hl opt">};</span>

    <span class="hl kwa">var</span> <span class="hl kwd">ObjectGetPrototypeOf</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>obj<span class="hl opt">) {</span>
        <span class="hl kwa">try</span> <span class="hl opt">{</span>
            <span class="hl kwa">return</span> <span class="hl kwd">Object</span><span class="hl opt">(</span>obj<span class="hl opt">).</span>constructor<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">;</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">catch</span> <span class="hl opt">(</span>e<span class="hl opt">) {</span>
            <span class="hl kwa">return</span> proto<span class="hl opt">;</span>
        <span class="hl opt">}</span>
    <span class="hl opt">};</span>

    <span class="hl kwa">var</span> <span class="hl kwd">ArrayIsArray</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>obj<span class="hl opt">) {</span>
        <span class="hl kwa">try</span> <span class="hl opt">{</span>
            <span class="hl kwa">return</span> str<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span>obj<span class="hl opt">) ===</span> <span class="hl str">&quot;[object Array]&quot;</span><span class="hl opt">;</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">catch</span><span class="hl opt">(</span>e<span class="hl opt">) {</span>
            <span class="hl kwa">return false</span><span class="hl opt">;</span>
        <span class="hl opt">}</span>
    <span class="hl opt">};</span>

    module<span class="hl opt">.</span>exports <span class="hl opt">= {</span>
        isArray<span class="hl opt">:</span> ArrayIsArray<span class="hl opt">,</span>
        keys<span class="hl opt">:</span> ObjectKeys<span class="hl opt">,</span>
        names<span class="hl opt">:</span> ObjectKeys<span class="hl opt">,</span>
        defineProperty<span class="hl opt">:</span> ObjectDefineProperty<span class="hl opt">,</span>
        getDescriptor<span class="hl opt">:</span> ObjectGetDescriptor<span class="hl opt">,</span>
        freeze<span class="hl opt">:</span> ObjectFreeze<span class="hl opt">,</span>
        getPrototypeOf<span class="hl opt">:</span> ObjectGetPrototypeOf<span class="hl opt">,</span>
        isES5<span class="hl opt">:</span> isES5<span class="hl opt">,</span>
        <span class="hl kwd">propertyIsWritable</span><span class="hl opt">:</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
            <span class="hl kwa">return true</span><span class="hl opt">;</span>
        <span class="hl opt">}</span>
    <span class="hl opt">};</span>
<span class="hl opt">}</span>

<span class="hl opt">},{}],</span><span class="hl num">15</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>_dereq_<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl str">&quot;use strict&quot;</span><span class="hl opt">;</span>
module<span class="hl opt">.</span><span class="hl kwd">exports</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>Promise<span class="hl opt">,</span> INTERNAL<span class="hl opt">) {</span>
<span class="hl kwa">var</span> PromiseMap <span class="hl opt">=</span> Promise<span class="hl opt">.</span>map<span class="hl opt">;</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">filter</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>fn<span class="hl opt">,</span> options<span class="hl opt">) {</span>
    <span class="hl kwa">return</span> <span class="hl kwd">PromiseMap</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> fn<span class="hl opt">,</span> options<span class="hl opt">,</span> INTERNAL<span class="hl opt">);</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwd">filter</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>promises<span class="hl opt">,</span> fn<span class="hl opt">,</span> options<span class="hl opt">) {</span>
    <span class="hl kwa">return</span> <span class="hl kwd">PromiseMap</span><span class="hl opt">(</span>promises<span class="hl opt">,</span> fn<span class="hl opt">,</span> options<span class="hl opt">,</span> INTERNAL<span class="hl opt">);</span>
<span class="hl opt">};</span>
<span class="hl opt">};</span>

<span class="hl opt">},{}],</span><span class="hl num">16</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>_dereq_<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl str">&quot;use strict&quot;</span><span class="hl opt">;</span>
module<span class="hl opt">.</span><span class="hl kwd">exports</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>Promise<span class="hl opt">,</span> NEXT_FILTER<span class="hl opt">,</span> tryConvertToPromise<span class="hl opt">) {</span>
<span class="hl kwa">var</span> util <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> isPrimitive <span class="hl opt">=</span> util<span class="hl opt">.</span>isPrimitive<span class="hl opt">;</span>
<span class="hl kwa">var</span> thrower <span class="hl opt">=</span> util<span class="hl opt">.</span>thrower<span class="hl opt">;</span>

<span class="hl kwa">function</span> <span class="hl kwd">returnThis</span><span class="hl opt">() {</span>
    <span class="hl kwa">return this</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
<span class="hl kwa">function</span> <span class="hl kwd">throwThis</span><span class="hl opt">() {</span>
    <span class="hl kwa">throw this</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
<span class="hl kwa">function return</span><span class="hl opt">$(</span>r<span class="hl opt">) {</span>
    <span class="hl kwa">return function</span><span class="hl opt">() {</span>
        <span class="hl kwa">return</span> r<span class="hl opt">;</span>
    <span class="hl opt">};</span>
<span class="hl opt">}</span>
<span class="hl kwa">function throw</span><span class="hl opt">$(</span>r<span class="hl opt">) {</span>
    <span class="hl kwa">return function</span><span class="hl opt">() {</span>
        <span class="hl kwa">throw</span> r<span class="hl opt">;</span>
    <span class="hl opt">};</span>
<span class="hl opt">}</span>
<span class="hl kwa">function</span> <span class="hl kwd">promisedFinally</span><span class="hl opt">(</span>ret<span class="hl opt">,</span> reasonOrValue<span class="hl opt">,</span> isFulfilled<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> then<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">isPrimitive</span><span class="hl opt">(</span>reasonOrValue<span class="hl opt">)) {</span>
        then <span class="hl opt">=</span> isFulfilled <span class="hl opt">?</span> <span class="hl kwa">return</span><span class="hl opt">$(</span>reasonOrValue<span class="hl opt">) :</span> <span class="hl kwa">throw</span><span class="hl opt">$(</span>reasonOrValue<span class="hl opt">);</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
        then <span class="hl opt">=</span> isFulfilled <span class="hl opt">?</span> returnThis <span class="hl opt">:</span> throwThis<span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return</span> ret<span class="hl opt">.</span><span class="hl kwd">_then</span><span class="hl opt">(</span>then<span class="hl opt">,</span> thrower<span class="hl opt">,</span> undefined<span class="hl opt">,</span> reasonOrValue<span class="hl opt">,</span> undefined<span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">finallyHandler</span><span class="hl opt">(</span>reasonOrValue<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> promise <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>promise<span class="hl opt">;</span>
    <span class="hl kwa">var</span> handler <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>handler<span class="hl opt">;</span>

    <span class="hl kwa">var</span> ret <span class="hl opt">=</span> promise<span class="hl opt">.</span><span class="hl kwd">_isBound</span><span class="hl opt">()</span>
                    <span class="hl opt">?</span> handler<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span>promise<span class="hl opt">.</span><span class="hl kwd">_boundValue</span><span class="hl opt">())</span>
                    <span class="hl opt">:</span> <span class="hl kwd">handler</span><span class="hl opt">();</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>ret <span class="hl opt">!==</span> undefined<span class="hl opt">) {</span>
        <span class="hl kwa">var</span> maybePromise <span class="hl opt">=</span> <span class="hl kwd">tryConvertToPromise</span><span class="hl opt">(</span>ret<span class="hl opt">,</span> promise<span class="hl opt">);</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>maybePromise <span class="hl kwa">instanceof</span> Promise<span class="hl opt">) {</span>
            maybePromise <span class="hl opt">=</span> maybePromise<span class="hl opt">.</span><span class="hl kwd">_target</span><span class="hl opt">();</span>
            <span class="hl kwa">return</span> <span class="hl kwd">promisedFinally</span><span class="hl opt">(</span>maybePromise<span class="hl opt">,</span> reasonOrValue<span class="hl opt">,</span>
                                    promise<span class="hl opt">.</span><span class="hl kwd">isFulfilled</span><span class="hl opt">());</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>promise<span class="hl opt">.</span><span class="hl kwd">isRejected</span><span class="hl opt">()) {</span>
        NEXT_FILTER<span class="hl opt">.</span>e <span class="hl opt">=</span> reasonOrValue<span class="hl opt">;</span>
        <span class="hl kwa">return</span> NEXT_FILTER<span class="hl opt">;</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
        <span class="hl kwa">return</span> reasonOrValue<span class="hl opt">;</span>
    <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">tapHandler</span><span class="hl opt">(</span>value<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> promise <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>promise<span class="hl opt">;</span>
    <span class="hl kwa">var</span> handler <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>handler<span class="hl opt">;</span>

    <span class="hl kwa">var</span> ret <span class="hl opt">=</span> promise<span class="hl opt">.</span><span class="hl kwd">_isBound</span><span class="hl opt">()</span>
                    <span class="hl opt">?</span> handler<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span>promise<span class="hl opt">.</span><span class="hl kwd">_boundValue</span><span class="hl opt">(),</span> value<span class="hl opt">)</span>
                    <span class="hl opt">:</span> <span class="hl kwd">handler</span><span class="hl opt">(</span>value<span class="hl opt">);</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>ret <span class="hl opt">!==</span> undefined<span class="hl opt">) {</span>
        <span class="hl kwa">var</span> maybePromise <span class="hl opt">=</span> <span class="hl kwd">tryConvertToPromise</span><span class="hl opt">(</span>ret<span class="hl opt">,</span> promise<span class="hl opt">);</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>maybePromise <span class="hl kwa">instanceof</span> Promise<span class="hl opt">) {</span>
            maybePromise <span class="hl opt">=</span> maybePromise<span class="hl opt">.</span><span class="hl kwd">_target</span><span class="hl opt">();</span>
            <span class="hl kwa">return</span> <span class="hl kwd">promisedFinally</span><span class="hl opt">(</span>maybePromise<span class="hl opt">,</span> value<span class="hl opt">,</span> <span class="hl kwa">true</span><span class="hl opt">);</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return</span> value<span class="hl opt">;</span>
<span class="hl opt">}</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_passThroughHandler</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>handler<span class="hl opt">,</span> isFinally<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> handler <span class="hl opt">!==</span> <span class="hl str">&quot;function&quot;</span><span class="hl opt">)</span> <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">then</span><span class="hl opt">();</span>

    <span class="hl kwa">var</span> promiseAndHandler <span class="hl opt">= {</span>
        promise<span class="hl opt">:</span> <span class="hl kwa">this</span><span class="hl opt">,</span>
        handler<span class="hl opt">:</span> handler
    <span class="hl opt">};</span>

    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_then</span><span class="hl opt">(</span>
            isFinally <span class="hl opt">?</span> finallyHandler <span class="hl opt">:</span> tapHandler<span class="hl opt">,</span>
            isFinally <span class="hl opt">?</span> finallyHandler <span class="hl opt">:</span> undefined<span class="hl opt">,</span> undefined<span class="hl opt">,</span>
            promiseAndHandler<span class="hl opt">,</span> undefined<span class="hl opt">);</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>lastly <span class="hl opt">=</span>
Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">[</span><span class="hl str">&quot;finally&quot;</span><span class="hl opt">] =</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>handler<span class="hl opt">) {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_passThroughHandler</span><span class="hl opt">(</span>handler<span class="hl opt">,</span> <span class="hl kwa">true</span><span class="hl opt">);</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">tap</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>handler<span class="hl opt">) {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_passThroughHandler</span><span class="hl opt">(</span>handler<span class="hl opt">,</span> <span class="hl kwa">false</span><span class="hl opt">);</span>
<span class="hl opt">};</span>
<span class="hl opt">};</span>

<span class="hl opt">},{</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">:</span><span class="hl num">38</span><span class="hl opt">}],</span><span class="hl num">17</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>_dereq_<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl str">&quot;use strict&quot;</span><span class="hl opt">;</span>
module<span class="hl opt">.</span><span class="hl kwd">exports</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>Promise<span class="hl opt">,</span>
                          apiRejection<span class="hl opt">,</span>
                          INTERNAL<span class="hl opt">,</span>
                          tryConvertToPromise<span class="hl opt">) {</span>
<span class="hl kwa">var</span> errors <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./errors.js&quot;</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> TypeError <span class="hl opt">=</span> errors<span class="hl opt">.</span>TypeError<span class="hl opt">;</span>
<span class="hl kwa">var</span> util <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> errorObj <span class="hl opt">=</span> util<span class="hl opt">.</span>errorObj<span class="hl opt">;</span>
<span class="hl kwa">var</span> tryCatch <span class="hl opt">=</span> util<span class="hl opt">.</span>tryCatch<span class="hl opt">;</span>
<span class="hl kwa">var</span> yieldHandlers <span class="hl opt">= [];</span>

<span class="hl kwa">function</span> <span class="hl kwd">promiseFromYieldHandler</span><span class="hl opt">(</span>value<span class="hl opt">,</span> yieldHandlers<span class="hl opt">,</span> traceParent<span class="hl opt">) {</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> yieldHandlers<span class="hl opt">.</span>length<span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
        traceParent<span class="hl opt">.</span><span class="hl kwd">_pushContext</span><span class="hl opt">();</span>
        <span class="hl kwa">var</span> result <span class="hl opt">=</span> <span class="hl kwd">tryCatch</span><span class="hl opt">(</span>yieldHandlers<span class="hl opt">[</span>i<span class="hl opt">])(</span>value<span class="hl opt">);</span>
        traceParent<span class="hl opt">.</span><span class="hl kwd">_popContext</span><span class="hl opt">();</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>result <span class="hl opt">===</span> errorObj<span class="hl opt">) {</span>
            traceParent<span class="hl opt">.</span><span class="hl kwd">_pushContext</span><span class="hl opt">();</span>
            <span class="hl kwa">var</span> ret <span class="hl opt">=</span> Promise<span class="hl opt">.</span><span class="hl kwd">reject</span><span class="hl opt">(</span>errorObj<span class="hl opt">.</span>e<span class="hl opt">);</span>
            traceParent<span class="hl opt">.</span><span class="hl kwd">_popContext</span><span class="hl opt">();</span>
            <span class="hl kwa">return</span> ret<span class="hl opt">;</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">var</span> maybePromise <span class="hl opt">=</span> <span class="hl kwd">tryConvertToPromise</span><span class="hl opt">(</span>result<span class="hl opt">,</span> traceParent<span class="hl opt">);</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>maybePromise <span class="hl kwa">instanceof</span> Promise<span class="hl opt">)</span> <span class="hl kwa">return</span> maybePromise<span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return null</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">PromiseSpawn</span><span class="hl opt">(</span>generatorFunction<span class="hl opt">,</span> receiver<span class="hl opt">,</span> yieldHandler<span class="hl opt">,</span> stack<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> promise <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_promise <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Promise</span><span class="hl opt">(</span>INTERNAL<span class="hl opt">);</span>
    promise<span class="hl opt">.</span><span class="hl kwd">_captureStackTrace</span><span class="hl opt">();</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_stack <span class="hl opt">=</span> stack<span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_generatorFunction <span class="hl opt">=</span> generatorFunction<span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_receiver <span class="hl opt">=</span> receiver<span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_generator <span class="hl opt">=</span> undefined<span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_yieldHandlers <span class="hl opt">=</span> <span class="hl kwa">typeof</span> yieldHandler <span class="hl opt">===</span> <span class="hl str">&quot;function&quot;</span>
        <span class="hl opt">? [</span>yieldHandler<span class="hl opt">].</span><span class="hl kwd">concat</span><span class="hl opt">(</span>yieldHandlers<span class="hl opt">)</span>
        <span class="hl opt">:</span> yieldHandlers<span class="hl opt">;</span>
<span class="hl opt">}</span>

PromiseSpawn<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">promise</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span>_promise<span class="hl opt">;</span>
<span class="hl opt">};</span>

PromiseSpawn<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_run</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_generator <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_generatorFunction<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>_receiver<span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_receiver <span class="hl opt">=</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>_generatorFunction <span class="hl opt">=</span> undefined<span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_next</span><span class="hl opt">(</span>undefined<span class="hl opt">);</span>
<span class="hl opt">};</span>

PromiseSpawn<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_continue</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>result<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>result <span class="hl opt">===</span> errorObj<span class="hl opt">) {</span>
        <span class="hl kwa">return this</span><span class="hl opt">.</span>_promise<span class="hl opt">.</span><span class="hl kwd">_rejectCallback</span><span class="hl opt">(</span>result<span class="hl opt">.</span>e<span class="hl opt">,</span> <span class="hl kwa">false</span><span class="hl opt">,</span> <span class="hl kwa">true</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">var</span> value <span class="hl opt">=</span> result<span class="hl opt">.</span>value<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>result<span class="hl opt">.</span>done <span class="hl opt">===</span> <span class="hl kwa">true</span><span class="hl opt">) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>_promise<span class="hl opt">.</span><span class="hl kwd">_resolveCallback</span><span class="hl opt">(</span>value<span class="hl opt">);</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
        <span class="hl kwa">var</span> maybePromise <span class="hl opt">=</span> <span class="hl kwd">tryConvertToPromise</span><span class="hl opt">(</span>value<span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_promise<span class="hl opt">);</span>
        <span class="hl kwa">if</span> <span class="hl opt">(!(</span>maybePromise <span class="hl kwa">instanceof</span> Promise<span class="hl opt">)) {</span>
            maybePromise <span class="hl opt">=</span>
                <span class="hl kwd">promiseFromYieldHandler</span><span class="hl opt">(</span>maybePromise<span class="hl opt">,</span>
                                        <span class="hl kwa">this</span><span class="hl opt">.</span>_yieldHandlers<span class="hl opt">,</span>
                                        <span class="hl kwa">this</span><span class="hl opt">.</span>_promise<span class="hl opt">);</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>maybePromise <span class="hl opt">===</span> <span class="hl kwa">null</span><span class="hl opt">) {</span>
                <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_throw</span><span class="hl opt">(</span>
                    <span class="hl kwa">new</span> <span class="hl kwd">TypeError</span><span class="hl opt">(</span>
                        <span class="hl str">&quot;A value %s was yielded that could not be treated as a promise</span><span class="hl esc">\u000a\u000a</span>    <span class="hl str">See http://goo.gl/4Y4pDk</span><span class="hl esc">\u000a\u000a</span><span class="hl str">&quot;</span><span class="hl opt">.</span><span class="hl kwd">replace</span><span class="hl opt">(</span><span class="hl str">&quot;%s&quot;</span><span class="hl opt">,</span> value<span class="hl opt">) +</span>
                        <span class="hl str">&quot;From coroutine:</span><span class="hl esc">\u000a</span><span class="hl str">&quot;</span> <span class="hl opt">+</span>
                        <span class="hl kwa">this</span><span class="hl opt">.</span>_stack<span class="hl opt">.</span><span class="hl kwd">split</span><span class="hl opt">(</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">).</span><span class="hl kwd">slice</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">, -</span><span class="hl num">7</span><span class="hl opt">).</span><span class="hl kwd">join</span><span class="hl opt">(</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">)</span>
                    <span class="hl opt">)</span>
                <span class="hl opt">);</span>
                <span class="hl kwa">return</span><span class="hl opt">;</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span>
        maybePromise<span class="hl opt">.</span><span class="hl kwd">_then</span><span class="hl opt">(</span>
            <span class="hl kwa">this</span><span class="hl opt">.</span>_next<span class="hl opt">,</span>
            <span class="hl kwa">this</span><span class="hl opt">.</span>_throw<span class="hl opt">,</span>
            undefined<span class="hl opt">,</span>
            <span class="hl kwa">this</span><span class="hl opt">,</span>
            <span class="hl kwa">null</span>
       <span class="hl opt">);</span>
    <span class="hl opt">}</span>
<span class="hl opt">};</span>

PromiseSpawn<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_throw</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>reason<span class="hl opt">) {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_promise<span class="hl opt">.</span><span class="hl kwd">_attachExtraTrace</span><span class="hl opt">(</span>reason<span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_promise<span class="hl opt">.</span><span class="hl kwd">_pushContext</span><span class="hl opt">();</span>
    <span class="hl kwa">var</span> result <span class="hl opt">=</span> <span class="hl kwd">tryCatch</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>_generator<span class="hl opt">[</span><span class="hl str">&quot;throw&quot;</span><span class="hl opt">])</span>
        <span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>_generator<span class="hl opt">,</span> reason<span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_promise<span class="hl opt">.</span><span class="hl kwd">_popContext</span><span class="hl opt">();</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_continue</span><span class="hl opt">(</span>result<span class="hl opt">);</span>
<span class="hl opt">};</span>

PromiseSpawn<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_next</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>value<span class="hl opt">) {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_promise<span class="hl opt">.</span><span class="hl kwd">_pushContext</span><span class="hl opt">();</span>
    <span class="hl kwa">var</span> result <span class="hl opt">=</span> <span class="hl kwd">tryCatch</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>_generator<span class="hl opt">.</span>next<span class="hl opt">).</span><span class="hl kwd">call</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>_generator<span class="hl opt">,</span> value<span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_promise<span class="hl opt">.</span><span class="hl kwd">_popContext</span><span class="hl opt">();</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_continue</span><span class="hl opt">(</span>result<span class="hl opt">);</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwd">coroutine</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>generatorFunction<span class="hl opt">,</span> options<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> generatorFunction <span class="hl opt">!==</span> <span class="hl str">&quot;function&quot;</span><span class="hl opt">) {</span>
        <span class="hl kwa">throw new</span> <span class="hl kwd">TypeError</span><span class="hl opt">(</span><span class="hl str">&quot;generatorFunction must be a function</span><span class="hl esc">\u000a\u000a</span>    <span class="hl str">See http://goo.gl/6Vqhm0</span><span class="hl esc">\u000a</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">var</span> yieldHandler <span class="hl opt">=</span> <span class="hl kwd">Object</span><span class="hl opt">(</span>options<span class="hl opt">).</span>yieldHandler<span class="hl opt">;</span>
    <span class="hl kwa">var</span> PromiseSpawn<span class="hl opt">$ =</span> PromiseSpawn<span class="hl opt">;</span>
    <span class="hl kwa">var</span> stack <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Error</span><span class="hl opt">().</span>stack<span class="hl opt">;</span>
    <span class="hl kwa">return function</span> <span class="hl opt">() {</span>
        <span class="hl kwa">var</span> generator <span class="hl opt">=</span> generatorFunction<span class="hl opt">.</span><span class="hl kwd">apply</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> arguments<span class="hl opt">);</span>
        <span class="hl kwa">var</span> spawn <span class="hl opt">=</span> <span class="hl kwa">new</span> PromiseSpawn<span class="hl opt">$(</span>undefined<span class="hl opt">,</span> undefined<span class="hl opt">,</span> yieldHandler<span class="hl opt">,</span>
                                      stack<span class="hl opt">);</span>
        spawn<span class="hl opt">.</span>_generator <span class="hl opt">=</span> generator<span class="hl opt">;</span>
        spawn<span class="hl opt">.</span><span class="hl kwd">_next</span><span class="hl opt">(</span>undefined<span class="hl opt">);</span>
        <span class="hl kwa">return</span> spawn<span class="hl opt">.</span><span class="hl kwd">promise</span><span class="hl opt">();</span>
    <span class="hl opt">};</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span>coroutine<span class="hl opt">.</span><span class="hl kwd">addYieldHandler</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>fn<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> fn <span class="hl opt">!==</span> <span class="hl str">&quot;function&quot;</span><span class="hl opt">)</span> <span class="hl kwa">throw new</span> <span class="hl kwd">TypeError</span><span class="hl opt">(</span><span class="hl str">&quot;fn must be a function</span><span class="hl esc">\u000a\u000a</span>    <span class="hl str">See http://goo.gl/916lJJ</span><span class="hl esc">\u000a</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
    yieldHandlers<span class="hl opt">.</span><span class="hl kwd">push</span><span class="hl opt">(</span>fn<span class="hl opt">);</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwd">spawn</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>generatorFunction<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> generatorFunction <span class="hl opt">!==</span> <span class="hl str">&quot;function&quot;</span><span class="hl opt">) {</span>
        <span class="hl kwa">return</span> <span class="hl kwd">apiRejection</span><span class="hl opt">(</span><span class="hl str">&quot;generatorFunction must be a function</span><span class="hl esc">\u000a\u000a</span>    <span class="hl str">See http://goo.gl/6Vqhm0</span><span class="hl esc">\u000a</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">var</span> spawn <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">PromiseSpawn</span><span class="hl opt">(</span>generatorFunction<span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">);</span>
    <span class="hl kwa">var</span> ret <span class="hl opt">=</span> spawn<span class="hl opt">.</span><span class="hl kwd">promise</span><span class="hl opt">();</span>
    spawn<span class="hl opt">.</span><span class="hl kwd">_run</span><span class="hl opt">(</span>Promise<span class="hl opt">.</span>spawn<span class="hl opt">);</span>
    <span class="hl kwa">return</span> ret<span class="hl opt">;</span>
<span class="hl opt">};</span>
<span class="hl opt">};</span>

<span class="hl opt">},{</span><span class="hl str">&quot;./errors.js&quot;</span><span class="hl opt">:</span><span class="hl num">13</span><span class="hl opt">,</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">:</span><span class="hl num">38</span><span class="hl opt">}],</span><span class="hl num">18</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>_dereq_<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl str">&quot;use strict&quot;</span><span class="hl opt">;</span>
module<span class="hl opt">.</span>exports <span class="hl opt">=</span>
<span class="hl kwa">function</span><span class="hl opt">(</span>Promise<span class="hl opt">,</span> PromiseArray<span class="hl opt">,</span> tryConvertToPromise<span class="hl opt">,</span> INTERNAL<span class="hl opt">) {</span>
<span class="hl kwa">var</span> util <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> canEvaluate <span class="hl opt">=</span> util<span class="hl opt">.</span>canEvaluate<span class="hl opt">;</span>
<span class="hl kwa">var</span> tryCatch <span class="hl opt">=</span> util<span class="hl opt">.</span>tryCatch<span class="hl opt">;</span>
<span class="hl kwa">var</span> errorObj <span class="hl opt">=</span> util<span class="hl opt">.</span>errorObj<span class="hl opt">;</span>
<span class="hl kwa">var</span> reject<span class="hl opt">;</span>

<span class="hl kwa">if</span> <span class="hl opt">(!</span><span class="hl kwa">true</span><span class="hl opt">) {</span>
<span class="hl kwa">if</span> <span class="hl opt">(</span>canEvaluate<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> <span class="hl kwd">thenCallback</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>i<span class="hl opt">) {</span>
        <span class="hl kwa">return new</span> <span class="hl kwd">Function</span><span class="hl opt">(</span><span class="hl str">&quot;value&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;holder&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;</span>                             <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">            'use strict';</span>                                                    <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">            holder.pIndex = value;</span>                                           <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">            holder.checkFulfillment(this);</span>                                   <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">            &quot;</span><span class="hl opt">.</span><span class="hl kwd">replace</span><span class="hl opt">(</span><span class="hl kwc">/Index/g</span><span class="hl opt">,</span> i<span class="hl opt">));</span>
    <span class="hl opt">};</span>

    <span class="hl kwa">var</span> <span class="hl kwd">caller</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>count<span class="hl opt">) {</span>
        <span class="hl kwa">var</span> values <span class="hl opt">= [];</span>
        <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span> i <span class="hl opt">&lt;=</span> count<span class="hl opt">; ++</span>i<span class="hl opt">)</span> values<span class="hl opt">.</span><span class="hl kwd">push</span><span class="hl opt">(</span><span class="hl str">&quot;holder.p&quot;</span> <span class="hl opt">+</span> i<span class="hl opt">);</span>
        <span class="hl kwa">return new</span> <span class="hl kwd">Function</span><span class="hl opt">(</span><span class="hl str">&quot;holder&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;</span>                                      <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">            'use strict';</span>                                                    <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">            var callback = holder.fn;</span>                                        <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">            return callback(values);</span>                                         <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">            &quot;</span><span class="hl opt">.</span><span class="hl kwd">replace</span><span class="hl opt">(</span><span class="hl kwc">/values/g</span><span class="hl opt">,</span> values<span class="hl opt">.</span><span class="hl kwd">join</span><span class="hl opt">(</span><span class="hl str">&quot;, &quot;</span><span class="hl opt">)));</span>
    <span class="hl opt">};</span>
    <span class="hl kwa">var</span> thenCallbacks <span class="hl opt">= [];</span>
    <span class="hl kwa">var</span> callers <span class="hl opt">= [</span>undefined<span class="hl opt">];</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span> i <span class="hl opt">&lt;=</span> <span class="hl num">5</span><span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
        thenCallbacks<span class="hl opt">.</span><span class="hl kwd">push</span><span class="hl opt">(</span><span class="hl kwd">thenCallback</span><span class="hl opt">(</span>i<span class="hl opt">));</span>
        callers<span class="hl opt">.</span><span class="hl kwd">push</span><span class="hl opt">(</span><span class="hl kwd">caller</span><span class="hl opt">(</span>i<span class="hl opt">));</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">var</span> <span class="hl kwd">Holder</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>total<span class="hl opt">,</span> fn<span class="hl opt">) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>p1 <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>p2 <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>p3 <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>p4 <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>p5 <span class="hl opt">=</span> <span class="hl kwa">null</span><span class="hl opt">;</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>fn <span class="hl opt">=</span> fn<span class="hl opt">;</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>total <span class="hl opt">=</span> total<span class="hl opt">;</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>now <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl opt">};</span>

    Holder<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>callers <span class="hl opt">=</span> callers<span class="hl opt">;</span>
    Holder<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">checkFulfillment</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>promise<span class="hl opt">) {</span>
        <span class="hl kwa">var</span> now <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>now<span class="hl opt">;</span>
        now<span class="hl opt">++;</span>
        <span class="hl kwa">var</span> total <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>total<span class="hl opt">;</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>now <span class="hl opt">&gt;=</span> total<span class="hl opt">) {</span>
            <span class="hl kwa">var</span> handler <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>callers<span class="hl opt">[</span>total<span class="hl opt">];</span>
            promise<span class="hl opt">.</span><span class="hl kwd">_pushContext</span><span class="hl opt">();</span>
            <span class="hl kwa">var</span> ret <span class="hl opt">=</span> <span class="hl kwd">tryCatch</span><span class="hl opt">(</span>handler<span class="hl opt">)(</span><span class="hl kwa">this</span><span class="hl opt">);</span>
            promise<span class="hl opt">.</span><span class="hl kwd">_popContext</span><span class="hl opt">();</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>ret <span class="hl opt">===</span> errorObj<span class="hl opt">) {</span>
                promise<span class="hl opt">.</span><span class="hl kwd">_rejectCallback</span><span class="hl opt">(</span>ret<span class="hl opt">.</span>e<span class="hl opt">,</span> <span class="hl kwa">false</span><span class="hl opt">,</span> <span class="hl kwa">true</span><span class="hl opt">);</span>
            <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
                promise<span class="hl opt">.</span><span class="hl kwd">_resolveCallback</span><span class="hl opt">(</span>ret<span class="hl opt">);</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
            <span class="hl kwa">this</span><span class="hl opt">.</span>now <span class="hl opt">=</span> now<span class="hl opt">;</span>
        <span class="hl opt">}</span>
    <span class="hl opt">};</span>

    <span class="hl kwa">var</span> <span class="hl kwd">reject</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>reason<span class="hl opt">) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_reject</span><span class="hl opt">(</span>reason<span class="hl opt">);</span>
    <span class="hl opt">};</span>
<span class="hl opt">}</span>
<span class="hl opt">}</span>

Promise<span class="hl opt">.</span><span class="hl kwd">join</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">var</span> last <span class="hl opt">=</span> arguments<span class="hl opt">.</span>length <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> fn<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>last <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span> <span class="hl kwa">typeof</span> arguments<span class="hl opt">[</span>last<span class="hl opt">] ===</span> <span class="hl str">&quot;function&quot;</span><span class="hl opt">) {</span>
        fn <span class="hl opt">=</span> arguments<span class="hl opt">[</span>last<span class="hl opt">];</span>
        <span class="hl kwa">if</span> <span class="hl opt">(!</span><span class="hl kwa">true</span><span class="hl opt">) {</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>last <span class="hl opt">&lt;</span> <span class="hl num">6</span> <span class="hl opt">&amp;&amp;</span> canEvaluate<span class="hl opt">) {</span>
                <span class="hl kwa">var</span> ret <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Promise</span><span class="hl opt">(</span>INTERNAL<span class="hl opt">);</span>
                ret<span class="hl opt">.</span><span class="hl kwd">_captureStackTrace</span><span class="hl opt">();</span>
                <span class="hl kwa">var</span> holder <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Holder</span><span class="hl opt">(</span>last<span class="hl opt">,</span> fn<span class="hl opt">);</span>
                <span class="hl kwa">var</span> callbacks <span class="hl opt">=</span> thenCallbacks<span class="hl opt">;</span>
                <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> last<span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
                    <span class="hl kwa">var</span> maybePromise <span class="hl opt">=</span> <span class="hl kwd">tryConvertToPromise</span><span class="hl opt">(</span>arguments<span class="hl opt">[</span>i<span class="hl opt">],</span> ret<span class="hl opt">);</span>
                    <span class="hl kwa">if</span> <span class="hl opt">(</span>maybePromise <span class="hl kwa">instanceof</span> Promise<span class="hl opt">) {</span>
                        maybePromise <span class="hl opt">=</span> maybePromise<span class="hl opt">.</span><span class="hl kwd">_target</span><span class="hl opt">();</span>
                        <span class="hl kwa">if</span> <span class="hl opt">(</span>maybePromise<span class="hl opt">.</span><span class="hl kwd">_isPending</span><span class="hl opt">()) {</span>
                            maybePromise<span class="hl opt">.</span><span class="hl kwd">_then</span><span class="hl opt">(</span>callbacks<span class="hl opt">[</span>i<span class="hl opt">],</span> reject<span class="hl opt">,</span>
                                               undefined<span class="hl opt">,</span> ret<span class="hl opt">,</span> holder<span class="hl opt">);</span>
                        <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>maybePromise<span class="hl opt">.</span><span class="hl kwd">_isFulfilled</span><span class="hl opt">()) {</span>
                            callbacks<span class="hl opt">[</span>i<span class="hl opt">].</span><span class="hl kwd">call</span><span class="hl opt">(</span>ret<span class="hl opt">,</span>
                                              maybePromise<span class="hl opt">.</span><span class="hl kwd">_value</span><span class="hl opt">(),</span> holder<span class="hl opt">);</span>
                        <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
                            ret<span class="hl opt">.</span><span class="hl kwd">_reject</span><span class="hl opt">(</span>maybePromise<span class="hl opt">.</span><span class="hl kwd">_reason</span><span class="hl opt">());</span>
                        <span class="hl opt">}</span>
                    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
                        callbacks<span class="hl opt">[</span>i<span class="hl opt">].</span><span class="hl kwd">call</span><span class="hl opt">(</span>ret<span class="hl opt">,</span> maybePromise<span class="hl opt">,</span> holder<span class="hl opt">);</span>
                    <span class="hl opt">}</span>
                <span class="hl opt">}</span>
                <span class="hl kwa">return</span> ret<span class="hl opt">;</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">var</span> <span class="hl opt">$</span>_len <span class="hl opt">=</span> arguments<span class="hl opt">.</span>length<span class="hl opt">;</span><span class="hl kwa">var</span> args <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Array</span><span class="hl opt">($</span>_len<span class="hl opt">);</span> <span class="hl kwa">for</span><span class="hl opt">(</span><span class="hl kwa">var</span> <span class="hl opt">$</span>_i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">; $</span>_i <span class="hl opt">&lt; $</span>_len<span class="hl opt">; ++$</span>_i<span class="hl opt">) {</span>args<span class="hl opt">[$</span>_i<span class="hl opt">] =</span> arguments<span class="hl opt">[$</span>_i<span class="hl opt">];}</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>fn<span class="hl opt">)</span> args<span class="hl opt">.</span><span class="hl kwd">pop</span><span class="hl opt">();</span>
    <span class="hl kwa">var</span> ret <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">PromiseArray</span><span class="hl opt">(</span>args<span class="hl opt">).</span><span class="hl kwd">promise</span><span class="hl opt">();</span>
    <span class="hl kwa">return</span> fn <span class="hl opt">!==</span> undefined <span class="hl opt">?</span> ret<span class="hl opt">.</span><span class="hl kwd">spread</span><span class="hl opt">(</span>fn<span class="hl opt">) :</span> ret<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl opt">};</span>

<span class="hl opt">},{</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">:</span><span class="hl num">38</span><span class="hl opt">}],</span><span class="hl num">19</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>_dereq_<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl str">&quot;use strict&quot;</span><span class="hl opt">;</span>
module<span class="hl opt">.</span><span class="hl kwd">exports</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>Promise<span class="hl opt">,</span>
                          PromiseArray<span class="hl opt">,</span>
                          apiRejection<span class="hl opt">,</span>
                          tryConvertToPromise<span class="hl opt">,</span>
                          INTERNAL<span class="hl opt">) {</span>
<span class="hl kwa">var</span> getDomain <span class="hl opt">=</span> Promise<span class="hl opt">.</span>_getDomain<span class="hl opt">;</span>
<span class="hl kwa">var</span> async <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./async.js&quot;</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> util <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> tryCatch <span class="hl opt">=</span> util<span class="hl opt">.</span>tryCatch<span class="hl opt">;</span>
<span class="hl kwa">var</span> errorObj <span class="hl opt">=</span> util<span class="hl opt">.</span>errorObj<span class="hl opt">;</span>
<span class="hl kwa">var</span> PENDING <span class="hl opt">= {};</span>
<span class="hl kwa">var</span> EMPTY_ARRAY <span class="hl opt">= [];</span>

<span class="hl kwa">function</span> <span class="hl kwd">MappingPromiseArray</span><span class="hl opt">(</span>promises<span class="hl opt">,</span> fn<span class="hl opt">,</span> limit<span class="hl opt">,</span> _filter<span class="hl opt">) {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>constructor<span class="hl opt">$(</span>promises<span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_promise<span class="hl opt">.</span><span class="hl kwd">_captureStackTrace</span><span class="hl opt">();</span>
    <span class="hl kwa">var</span> domain <span class="hl opt">=</span> <span class="hl kwd">getDomain</span><span class="hl opt">();</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_callback <span class="hl opt">=</span> domain <span class="hl opt">===</span> <span class="hl kwa">null</span> <span class="hl opt">?</span> fn <span class="hl opt">:</span> domain<span class="hl opt">.</span><span class="hl kwd">bind</span><span class="hl opt">(</span>fn<span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_preservedValues <span class="hl opt">=</span> _filter <span class="hl opt">===</span> INTERNAL
        <span class="hl opt">?</span> <span class="hl kwa">new</span> <span class="hl kwd">Array</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">())</span>
        <span class="hl opt">:</span> <span class="hl kwa">null</span><span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_limit <span class="hl opt">=</span> limit<span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_inFlight <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_queue <span class="hl opt">=</span> limit <span class="hl opt">&gt;=</span> <span class="hl num">1</span> <span class="hl opt">? [] :</span> EMPTY_ARRAY<span class="hl opt">;</span>
    async<span class="hl opt">.</span><span class="hl kwd">invoke</span><span class="hl opt">(</span>init<span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">,</span> undefined<span class="hl opt">);</span>
<span class="hl opt">}</span>
util<span class="hl opt">.</span><span class="hl kwd">inherits</span><span class="hl opt">(</span>MappingPromiseArray<span class="hl opt">,</span> PromiseArray<span class="hl opt">);</span>
<span class="hl kwa">function</span> <span class="hl kwd">init</span><span class="hl opt">() {</span><span class="hl kwa">this</span><span class="hl opt">.</span>_init<span class="hl opt">$(</span>undefined<span class="hl opt">, -</span><span class="hl num">2</span><span class="hl opt">);}</span>

MappingPromiseArray<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_init</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {};</span>

MappingPromiseArray<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_promiseFulfilled</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>value<span class="hl opt">,</span> index<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> values <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_values<span class="hl opt">;</span>
    <span class="hl kwa">var</span> length <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">();</span>
    <span class="hl kwa">var</span> preservedValues <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_preservedValues<span class="hl opt">;</span>
    <span class="hl kwa">var</span> limit <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_limit<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>values<span class="hl opt">[</span>index<span class="hl opt">] ===</span> PENDING<span class="hl opt">) {</span>
        values<span class="hl opt">[</span>index<span class="hl opt">] =</span> value<span class="hl opt">;</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>limit <span class="hl opt">&gt;=</span> <span class="hl num">1</span><span class="hl opt">) {</span>
            <span class="hl kwa">this</span><span class="hl opt">.</span>_inFlight<span class="hl opt">--;</span>
            <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_drainQueue</span><span class="hl opt">();</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_isResolved</span><span class="hl opt">())</span> <span class="hl kwa">return</span><span class="hl opt">;</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>limit <span class="hl opt">&gt;=</span> <span class="hl num">1</span> <span class="hl opt">&amp;&amp;</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_inFlight <span class="hl opt">&gt;=</span> limit<span class="hl opt">) {</span>
            values<span class="hl opt">[</span>index<span class="hl opt">] =</span> value<span class="hl opt">;</span>
            <span class="hl kwa">this</span><span class="hl opt">.</span>_queue<span class="hl opt">.</span><span class="hl kwd">push</span><span class="hl opt">(</span>index<span class="hl opt">);</span>
            <span class="hl kwa">return</span><span class="hl opt">;</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>preservedValues <span class="hl opt">!==</span> <span class="hl kwa">null</span><span class="hl opt">)</span> preservedValues<span class="hl opt">[</span>index<span class="hl opt">] =</span> value<span class="hl opt">;</span>

        <span class="hl kwa">var</span> callback <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_callback<span class="hl opt">;</span>
        <span class="hl kwa">var</span> receiver <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_promise<span class="hl opt">.</span><span class="hl kwd">_boundValue</span><span class="hl opt">();</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>_promise<span class="hl opt">.</span><span class="hl kwd">_pushContext</span><span class="hl opt">();</span>
        <span class="hl kwa">var</span> ret <span class="hl opt">=</span> <span class="hl kwd">tryCatch</span><span class="hl opt">(</span>callback<span class="hl opt">).</span><span class="hl kwd">call</span><span class="hl opt">(</span>receiver<span class="hl opt">,</span> value<span class="hl opt">,</span> index<span class="hl opt">,</span> length<span class="hl opt">);</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>_promise<span class="hl opt">.</span><span class="hl kwd">_popContext</span><span class="hl opt">();</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>ret <span class="hl opt">===</span> errorObj<span class="hl opt">)</span> <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_reject</span><span class="hl opt">(</span>ret<span class="hl opt">.</span>e<span class="hl opt">);</span>

        <span class="hl kwa">var</span> maybePromise <span class="hl opt">=</span> <span class="hl kwd">tryConvertToPromise</span><span class="hl opt">(</span>ret<span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_promise<span class="hl opt">);</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>maybePromise <span class="hl kwa">instanceof</span> Promise<span class="hl opt">) {</span>
            maybePromise <span class="hl opt">=</span> maybePromise<span class="hl opt">.</span><span class="hl kwd">_target</span><span class="hl opt">();</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>maybePromise<span class="hl opt">.</span><span class="hl kwd">_isPending</span><span class="hl opt">()) {</span>
                <span class="hl kwa">if</span> <span class="hl opt">(</span>limit <span class="hl opt">&gt;=</span> <span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_inFlight<span class="hl opt">++;</span>
                values<span class="hl opt">[</span>index<span class="hl opt">] =</span> PENDING<span class="hl opt">;</span>
                <span class="hl kwa">return</span> maybePromise<span class="hl opt">.</span><span class="hl kwd">_proxyPromiseArray</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> index<span class="hl opt">);</span>
            <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>maybePromise<span class="hl opt">.</span><span class="hl kwd">_isFulfilled</span><span class="hl opt">()) {</span>
                ret <span class="hl opt">=</span> maybePromise<span class="hl opt">.</span><span class="hl kwd">_value</span><span class="hl opt">();</span>
            <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
                <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_reject</span><span class="hl opt">(</span>maybePromise<span class="hl opt">.</span><span class="hl kwd">_reason</span><span class="hl opt">());</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span>
        values<span class="hl opt">[</span>index<span class="hl opt">] =</span> ret<span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">var</span> totalResolved <span class="hl opt">= ++</span><span class="hl kwa">this</span><span class="hl opt">.</span>_totalResolved<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>totalResolved <span class="hl opt">&gt;=</span> length<span class="hl opt">) {</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>preservedValues <span class="hl opt">!==</span> <span class="hl kwa">null</span><span class="hl opt">) {</span>
            <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_filter</span><span class="hl opt">(</span>values<span class="hl opt">,</span> preservedValues<span class="hl opt">);</span>
        <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
            <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_resolve</span><span class="hl opt">(</span>values<span class="hl opt">);</span>
        <span class="hl opt">}</span>

    <span class="hl opt">}</span>
<span class="hl opt">};</span>

MappingPromiseArray<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_drainQueue</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">var</span> queue <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_queue<span class="hl opt">;</span>
    <span class="hl kwa">var</span> limit <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_limit<span class="hl opt">;</span>
    <span class="hl kwa">var</span> values <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_values<span class="hl opt">;</span>
    <span class="hl kwa">while</span> <span class="hl opt">(</span>queue<span class="hl opt">.</span>length <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_inFlight <span class="hl opt">&lt;</span> limit<span class="hl opt">) {</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_isResolved</span><span class="hl opt">())</span> <span class="hl kwa">return</span><span class="hl opt">;</span>
        <span class="hl kwa">var</span> index <span class="hl opt">=</span> queue<span class="hl opt">.</span><span class="hl kwd">pop</span><span class="hl opt">();</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_promiseFulfilled</span><span class="hl opt">(</span>values<span class="hl opt">[</span>index<span class="hl opt">],</span> index<span class="hl opt">);</span>
    <span class="hl opt">}</span>
<span class="hl opt">};</span>

MappingPromiseArray<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_filter</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>booleans<span class="hl opt">,</span> values<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> len <span class="hl opt">=</span> values<span class="hl opt">.</span>length<span class="hl opt">;</span>
    <span class="hl kwa">var</span> ret <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Array</span><span class="hl opt">(</span>len<span class="hl opt">);</span>
    <span class="hl kwa">var</span> j <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> len<span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>booleans<span class="hl opt">[</span>i<span class="hl opt">])</span> ret<span class="hl opt">[</span>j<span class="hl opt">++] =</span> values<span class="hl opt">[</span>i<span class="hl opt">];</span>
    <span class="hl opt">}</span>
    ret<span class="hl opt">.</span>length <span class="hl opt">=</span> j<span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_resolve</span><span class="hl opt">(</span>ret<span class="hl opt">);</span>
<span class="hl opt">};</span>

MappingPromiseArray<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">preservedValues</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span>_preservedValues<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl kwa">function</span> <span class="hl kwd">map</span><span class="hl opt">(</span>promises<span class="hl opt">,</span> fn<span class="hl opt">,</span> options<span class="hl opt">,</span> _filter<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> limit <span class="hl opt">=</span> <span class="hl kwa">typeof</span> options <span class="hl opt">===</span> <span class="hl str">&quot;object&quot;</span> <span class="hl opt">&amp;&amp;</span> options <span class="hl opt">!==</span> <span class="hl kwa">null</span>
        <span class="hl opt">?</span> options<span class="hl opt">.</span>concurrency
        <span class="hl opt">:</span> <span class="hl num">0</span><span class="hl opt">;</span>
    limit <span class="hl opt">=</span> <span class="hl kwa">typeof</span> limit <span class="hl opt">===</span> <span class="hl str">&quot;number&quot;</span> <span class="hl opt">&amp;&amp;</span>
        <span class="hl kwd">isFinite</span><span class="hl opt">(</span>limit<span class="hl opt">) &amp;&amp;</span> limit <span class="hl opt">&gt;=</span> <span class="hl num">1</span> <span class="hl opt">?</span> limit <span class="hl opt">:</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">return new</span> <span class="hl kwd">MappingPromiseArray</span><span class="hl opt">(</span>promises<span class="hl opt">,</span> fn<span class="hl opt">,</span> limit<span class="hl opt">,</span> _filter<span class="hl opt">);</span>
<span class="hl opt">}</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">map</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>fn<span class="hl opt">,</span> options<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> fn <span class="hl opt">!==</span> <span class="hl str">&quot;function&quot;</span><span class="hl opt">)</span> <span class="hl kwa">return</span> <span class="hl kwd">apiRejection</span><span class="hl opt">(</span><span class="hl str">&quot;fn must be a function</span><span class="hl esc">\u000a\u000a</span>    <span class="hl str">See http://goo.gl/916lJJ</span><span class="hl esc">\u000a</span><span class="hl str">&quot;</span><span class="hl opt">);</span>

    <span class="hl kwa">return</span> <span class="hl kwd">map</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> fn<span class="hl opt">,</span> options<span class="hl opt">,</span> <span class="hl kwa">null</span><span class="hl opt">).</span><span class="hl kwd">promise</span><span class="hl opt">();</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwd">map</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>promises<span class="hl opt">,</span> fn<span class="hl opt">,</span> options<span class="hl opt">,</span> _filter<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> fn <span class="hl opt">!==</span> <span class="hl str">&quot;function&quot;</span><span class="hl opt">)</span> <span class="hl kwa">return</span> <span class="hl kwd">apiRejection</span><span class="hl opt">(</span><span class="hl str">&quot;fn must be a function</span><span class="hl esc">\u000a\u000a</span>    <span class="hl str">See http://goo.gl/916lJJ</span><span class="hl esc">\u000a</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
    <span class="hl kwa">return</span> <span class="hl kwd">map</span><span class="hl opt">(</span>promises<span class="hl opt">,</span> fn<span class="hl opt">,</span> options<span class="hl opt">,</span> _filter<span class="hl opt">).</span><span class="hl kwd">promise</span><span class="hl opt">();</span>
<span class="hl opt">};</span>


<span class="hl opt">};</span>

<span class="hl opt">},{</span><span class="hl str">&quot;./async.js&quot;</span><span class="hl opt">:</span><span class="hl num">2</span><span class="hl opt">,</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">:</span><span class="hl num">38</span><span class="hl opt">}],</span><span class="hl num">20</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>_dereq_<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl str">&quot;use strict&quot;</span><span class="hl opt">;</span>
module<span class="hl opt">.</span>exports <span class="hl opt">=</span>
<span class="hl kwa">function</span><span class="hl opt">(</span>Promise<span class="hl opt">,</span> INTERNAL<span class="hl opt">,</span> tryConvertToPromise<span class="hl opt">,</span> apiRejection<span class="hl opt">) {</span>
<span class="hl kwa">var</span> util <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> tryCatch <span class="hl opt">=</span> util<span class="hl opt">.</span>tryCatch<span class="hl opt">;</span>

Promise<span class="hl opt">.</span><span class="hl kwd">method</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>fn<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> fn <span class="hl opt">!==</span> <span class="hl str">&quot;function&quot;</span><span class="hl opt">) {</span>
        <span class="hl kwa">throw new</span> Promise<span class="hl opt">.</span><span class="hl kwd">TypeError</span><span class="hl opt">(</span><span class="hl str">&quot;fn must be a function</span><span class="hl esc">\u000a\u000a</span>    <span class="hl str">See http://goo.gl/916lJJ</span><span class="hl esc">\u000a</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return function</span> <span class="hl opt">() {</span>
        <span class="hl kwa">var</span> ret <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Promise</span><span class="hl opt">(</span>INTERNAL<span class="hl opt">);</span>
        ret<span class="hl opt">.</span><span class="hl kwd">_captureStackTrace</span><span class="hl opt">();</span>
        ret<span class="hl opt">.</span><span class="hl kwd">_pushContext</span><span class="hl opt">();</span>
        <span class="hl kwa">var</span> value <span class="hl opt">=</span> <span class="hl kwd">tryCatch</span><span class="hl opt">(</span>fn<span class="hl opt">).</span><span class="hl kwd">apply</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> arguments<span class="hl opt">);</span>
        ret<span class="hl opt">.</span><span class="hl kwd">_popContext</span><span class="hl opt">();</span>
        ret<span class="hl opt">.</span><span class="hl kwd">_resolveFromSyncValue</span><span class="hl opt">(</span>value<span class="hl opt">);</span>
        <span class="hl kwa">return</span> ret<span class="hl opt">;</span>
    <span class="hl opt">};</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span>attempt <span class="hl opt">=</span> Promise<span class="hl opt">[</span><span class="hl str">&quot;try&quot;</span><span class="hl opt">] =</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>fn<span class="hl opt">,</span> args<span class="hl opt">,</span> ctx<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> fn <span class="hl opt">!==</span> <span class="hl str">&quot;function&quot;</span><span class="hl opt">) {</span>
        <span class="hl kwa">return</span> <span class="hl kwd">apiRejection</span><span class="hl opt">(</span><span class="hl str">&quot;fn must be a function</span><span class="hl esc">\u000a\u000a</span>    <span class="hl str">See http://goo.gl/916lJJ</span><span class="hl esc">\u000a</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">var</span> ret <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Promise</span><span class="hl opt">(</span>INTERNAL<span class="hl opt">);</span>
    ret<span class="hl opt">.</span><span class="hl kwd">_captureStackTrace</span><span class="hl opt">();</span>
    ret<span class="hl opt">.</span><span class="hl kwd">_pushContext</span><span class="hl opt">();</span>
    <span class="hl kwa">var</span> value <span class="hl opt">=</span> util<span class="hl opt">.</span><span class="hl kwd">isArray</span><span class="hl opt">(</span>args<span class="hl opt">)</span>
        <span class="hl opt">?</span> <span class="hl kwd">tryCatch</span><span class="hl opt">(</span>fn<span class="hl opt">).</span><span class="hl kwd">apply</span><span class="hl opt">(</span>ctx<span class="hl opt">,</span> args<span class="hl opt">)</span>
        <span class="hl opt">:</span> <span class="hl kwd">tryCatch</span><span class="hl opt">(</span>fn<span class="hl opt">).</span><span class="hl kwd">call</span><span class="hl opt">(</span>ctx<span class="hl opt">,</span> args<span class="hl opt">);</span>
    ret<span class="hl opt">.</span><span class="hl kwd">_popContext</span><span class="hl opt">();</span>
    ret<span class="hl opt">.</span><span class="hl kwd">_resolveFromSyncValue</span><span class="hl opt">(</span>value<span class="hl opt">);</span>
    <span class="hl kwa">return</span> ret<span class="hl opt">;</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_resolveFromSyncValue</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>value<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>value <span class="hl opt">===</span> util<span class="hl opt">.</span>errorObj<span class="hl opt">) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_rejectCallback</span><span class="hl opt">(</span>value<span class="hl opt">.</span>e<span class="hl opt">,</span> <span class="hl kwa">false</span><span class="hl opt">,</span> <span class="hl kwa">true</span><span class="hl opt">);</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_resolveCallback</span><span class="hl opt">(</span>value<span class="hl opt">,</span> <span class="hl kwa">true</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
<span class="hl opt">};</span>
<span class="hl opt">};</span>

<span class="hl opt">},{</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">:</span><span class="hl num">38</span><span class="hl opt">}],</span><span class="hl num">21</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>_dereq_<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl str">&quot;use strict&quot;</span><span class="hl opt">;</span>
module<span class="hl opt">.</span><span class="hl kwd">exports</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>Promise<span class="hl opt">) {</span>
<span class="hl kwa">var</span> util <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> async <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./async.js&quot;</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> tryCatch <span class="hl opt">=</span> util<span class="hl opt">.</span>tryCatch<span class="hl opt">;</span>
<span class="hl kwa">var</span> errorObj <span class="hl opt">=</span> util<span class="hl opt">.</span>errorObj<span class="hl opt">;</span>

<span class="hl kwa">function</span> <span class="hl kwd">spreadAdapter</span><span class="hl opt">(</span>val<span class="hl opt">,</span> nodeback<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> promise <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!</span>util<span class="hl opt">.</span><span class="hl kwd">isArray</span><span class="hl opt">(</span>val<span class="hl opt">))</span> <span class="hl kwa">return</span> successAdapter<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span>promise<span class="hl opt">,</span> val<span class="hl opt">,</span> nodeback<span class="hl opt">);</span>
    <span class="hl kwa">var</span> ret <span class="hl opt">=</span>
        <span class="hl kwd">tryCatch</span><span class="hl opt">(</span>nodeback<span class="hl opt">).</span><span class="hl kwd">apply</span><span class="hl opt">(</span>promise<span class="hl opt">.</span><span class="hl kwd">_boundValue</span><span class="hl opt">(), [</span><span class="hl kwa">null</span><span class="hl opt">].</span><span class="hl kwd">concat</span><span class="hl opt">(</span>val<span class="hl opt">));</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>ret <span class="hl opt">===</span> errorObj<span class="hl opt">) {</span>
        async<span class="hl opt">.</span><span class="hl kwd">throwLater</span><span class="hl opt">(</span>ret<span class="hl opt">.</span>e<span class="hl opt">);</span>
    <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">successAdapter</span><span class="hl opt">(</span>val<span class="hl opt">,</span> nodeback<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> promise <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> receiver <span class="hl opt">=</span> promise<span class="hl opt">.</span><span class="hl kwd">_boundValue</span><span class="hl opt">();</span>
    <span class="hl kwa">var</span> ret <span class="hl opt">=</span> val <span class="hl opt">===</span> undefined
        <span class="hl opt">?</span> <span class="hl kwd">tryCatch</span><span class="hl opt">(</span>nodeback<span class="hl opt">).</span><span class="hl kwd">call</span><span class="hl opt">(</span>receiver<span class="hl opt">,</span> <span class="hl kwa">null</span><span class="hl opt">)</span>
        <span class="hl opt">:</span> <span class="hl kwd">tryCatch</span><span class="hl opt">(</span>nodeback<span class="hl opt">).</span><span class="hl kwd">call</span><span class="hl opt">(</span>receiver<span class="hl opt">,</span> <span class="hl kwa">null</span><span class="hl opt">,</span> val<span class="hl opt">);</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>ret <span class="hl opt">===</span> errorObj<span class="hl opt">) {</span>
        async<span class="hl opt">.</span><span class="hl kwd">throwLater</span><span class="hl opt">(</span>ret<span class="hl opt">.</span>e<span class="hl opt">);</span>
    <span class="hl opt">}</span>
<span class="hl opt">}</span>
<span class="hl kwa">function</span> <span class="hl kwd">errorAdapter</span><span class="hl opt">(</span>reason<span class="hl opt">,</span> nodeback<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> promise <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!</span>reason<span class="hl opt">) {</span>
        <span class="hl kwa">var</span> target <span class="hl opt">=</span> promise<span class="hl opt">.</span><span class="hl kwd">_target</span><span class="hl opt">();</span>
        <span class="hl kwa">var</span> newReason <span class="hl opt">=</span> target<span class="hl opt">.</span><span class="hl kwd">_getCarriedStackTrace</span><span class="hl opt">();</span>
        newReason<span class="hl opt">.</span>cause <span class="hl opt">=</span> reason<span class="hl opt">;</span>
        reason <span class="hl opt">=</span> newReason<span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">var</span> ret <span class="hl opt">=</span> <span class="hl kwd">tryCatch</span><span class="hl opt">(</span>nodeback<span class="hl opt">).</span><span class="hl kwd">call</span><span class="hl opt">(</span>promise<span class="hl opt">.</span><span class="hl kwd">_boundValue</span><span class="hl opt">(),</span> reason<span class="hl opt">);</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>ret <span class="hl opt">===</span> errorObj<span class="hl opt">) {</span>
        async<span class="hl opt">.</span><span class="hl kwd">throwLater</span><span class="hl opt">(</span>ret<span class="hl opt">.</span>e<span class="hl opt">);</span>
    <span class="hl opt">}</span>
<span class="hl opt">}</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>asCallback <span class="hl opt">=</span>
Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">nodeify</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>nodeback<span class="hl opt">,</span> options<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> nodeback <span class="hl opt">==</span> <span class="hl str">&quot;function&quot;</span><span class="hl opt">) {</span>
        <span class="hl kwa">var</span> adapter <span class="hl opt">=</span> successAdapter<span class="hl opt">;</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>options <span class="hl opt">!==</span> undefined <span class="hl opt">&amp;&amp;</span> <span class="hl kwd">Object</span><span class="hl opt">(</span>options<span class="hl opt">).</span>spread<span class="hl opt">) {</span>
            adapter <span class="hl opt">=</span> spreadAdapter<span class="hl opt">;</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_then</span><span class="hl opt">(</span>
            adapter<span class="hl opt">,</span>
            errorAdapter<span class="hl opt">,</span>
            undefined<span class="hl opt">,</span>
            <span class="hl kwa">this</span><span class="hl opt">,</span>
            nodeback
        <span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return this</span><span class="hl opt">;</span>
<span class="hl opt">};</span>
<span class="hl opt">};</span>

<span class="hl opt">},{</span><span class="hl str">&quot;./async.js&quot;</span><span class="hl opt">:</span><span class="hl num">2</span><span class="hl opt">,</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">:</span><span class="hl num">38</span><span class="hl opt">}],</span><span class="hl num">22</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>_dereq_<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl str">&quot;use strict&quot;</span><span class="hl opt">;</span>
module<span class="hl opt">.</span><span class="hl kwd">exports</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>Promise<span class="hl opt">,</span> PromiseArray<span class="hl opt">) {</span>
<span class="hl kwa">var</span> util <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> async <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./async.js&quot;</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> tryCatch <span class="hl opt">=</span> util<span class="hl opt">.</span>tryCatch<span class="hl opt">;</span>
<span class="hl kwa">var</span> errorObj <span class="hl opt">=</span> util<span class="hl opt">.</span>errorObj<span class="hl opt">;</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">progressed</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>handler<span class="hl opt">) {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_then</span><span class="hl opt">(</span>undefined<span class="hl opt">,</span> undefined<span class="hl opt">,</span> handler<span class="hl opt">,</span> undefined<span class="hl opt">,</span> undefined<span class="hl opt">);</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_progress</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>progressValue<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_isFollowingOrFulfilledOrRejected</span><span class="hl opt">())</span> <span class="hl kwa">return</span><span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_target</span><span class="hl opt">().</span><span class="hl kwd">_progressUnchecked</span><span class="hl opt">(</span>progressValue<span class="hl opt">);</span>

<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_progressHandlerAt</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>index<span class="hl opt">) {</span>
    <span class="hl kwa">return</span> index <span class="hl opt">===</span> <span class="hl num">0</span>
        <span class="hl opt">?</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_progressHandler0
        <span class="hl opt">:</span> <span class="hl kwa">this</span><span class="hl opt">[(</span>index <span class="hl opt">&lt;&lt;</span> <span class="hl num">2</span><span class="hl opt">) +</span> index <span class="hl opt">-</span> <span class="hl num">5</span> <span class="hl opt">+</span> <span class="hl num">2</span><span class="hl opt">];</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_doProgressWith</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>progression<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> progressValue <span class="hl opt">=</span> progression<span class="hl opt">.</span>value<span class="hl opt">;</span>
    <span class="hl kwa">var</span> handler <span class="hl opt">=</span> progression<span class="hl opt">.</span>handler<span class="hl opt">;</span>
    <span class="hl kwa">var</span> promise <span class="hl opt">=</span> progression<span class="hl opt">.</span>promise<span class="hl opt">;</span>
    <span class="hl kwa">var</span> receiver <span class="hl opt">=</span> progression<span class="hl opt">.</span>receiver<span class="hl opt">;</span>

    <span class="hl kwa">var</span> ret <span class="hl opt">=</span> <span class="hl kwd">tryCatch</span><span class="hl opt">(</span>handler<span class="hl opt">).</span><span class="hl kwd">call</span><span class="hl opt">(</span>receiver<span class="hl opt">,</span> progressValue<span class="hl opt">);</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>ret <span class="hl opt">===</span> errorObj<span class="hl opt">) {</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>ret<span class="hl opt">.</span>e <span class="hl opt">!=</span> <span class="hl kwa">null</span> <span class="hl opt">&amp;&amp;</span>
            ret<span class="hl opt">.</span>e<span class="hl opt">.</span>name <span class="hl opt">!==</span> <span class="hl str">&quot;StopProgressPropagation&quot;</span><span class="hl opt">) {</span>
            <span class="hl kwa">var</span> trace <span class="hl opt">=</span> util<span class="hl opt">.</span><span class="hl kwd">canAttachTrace</span><span class="hl opt">(</span>ret<span class="hl opt">.</span>e<span class="hl opt">)</span>
                <span class="hl opt">?</span> ret<span class="hl opt">.</span>e <span class="hl opt">:</span> <span class="hl kwa">new</span> <span class="hl kwd">Error</span><span class="hl opt">(</span>util<span class="hl opt">.</span><span class="hl kwd">toString</span><span class="hl opt">(</span>ret<span class="hl opt">.</span>e<span class="hl opt">));</span>
            promise<span class="hl opt">.</span><span class="hl kwd">_attachExtraTrace</span><span class="hl opt">(</span>trace<span class="hl opt">);</span>
            promise<span class="hl opt">.</span><span class="hl kwd">_progress</span><span class="hl opt">(</span>ret<span class="hl opt">.</span>e<span class="hl opt">);</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>ret <span class="hl kwa">instanceof</span> Promise<span class="hl opt">) {</span>
        ret<span class="hl opt">.</span><span class="hl kwd">_then</span><span class="hl opt">(</span>promise<span class="hl opt">.</span>_progress<span class="hl opt">,</span> <span class="hl kwa">null</span><span class="hl opt">,</span> <span class="hl kwa">null</span><span class="hl opt">,</span> promise<span class="hl opt">,</span> undefined<span class="hl opt">);</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
        promise<span class="hl opt">.</span><span class="hl kwd">_progress</span><span class="hl opt">(</span>ret<span class="hl opt">);</span>
    <span class="hl opt">}</span>
<span class="hl opt">};</span>


Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_progressUnchecked</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>progressValue<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> len <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_length</span><span class="hl opt">();</span>
    <span class="hl kwa">var</span> progress <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_progress<span class="hl opt">;</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> len<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
        <span class="hl kwa">var</span> handler <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_progressHandlerAt</span><span class="hl opt">(</span>i<span class="hl opt">);</span>
        <span class="hl kwa">var</span> promise <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_promiseAt</span><span class="hl opt">(</span>i<span class="hl opt">);</span>
        <span class="hl kwa">if</span> <span class="hl opt">(!(</span>promise <span class="hl kwa">instanceof</span> Promise<span class="hl opt">)) {</span>
            <span class="hl kwa">var</span> receiver <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_receiverAt</span><span class="hl opt">(</span>i<span class="hl opt">);</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> handler <span class="hl opt">===</span> <span class="hl str">&quot;function&quot;</span><span class="hl opt">) {</span>
                handler<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span>receiver<span class="hl opt">,</span> progressValue<span class="hl opt">,</span> promise<span class="hl opt">);</span>
            <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>receiver <span class="hl kwa">instanceof</span> PromiseArray <span class="hl opt">&amp;&amp;</span>
                       <span class="hl opt">!</span>receiver<span class="hl opt">.</span><span class="hl kwd">_isResolved</span><span class="hl opt">()) {</span>
                receiver<span class="hl opt">.</span><span class="hl kwd">_promiseProgressed</span><span class="hl opt">(</span>progressValue<span class="hl opt">,</span> promise<span class="hl opt">);</span>
            <span class="hl opt">}</span>
            <span class="hl kwa">continue</span><span class="hl opt">;</span>
        <span class="hl opt">}</span>

        <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> handler <span class="hl opt">===</span> <span class="hl str">&quot;function&quot;</span><span class="hl opt">) {</span>
            async<span class="hl opt">.</span><span class="hl kwd">invoke</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>_doProgressWith<span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">, {</span>
                handler<span class="hl opt">:</span> handler<span class="hl opt">,</span>
                promise<span class="hl opt">:</span> promise<span class="hl opt">,</span>
                receiver<span class="hl opt">:</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_receiverAt</span><span class="hl opt">(</span>i<span class="hl opt">),</span>
                value<span class="hl opt">:</span> progressValue
            <span class="hl opt">});</span>
        <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
            async<span class="hl opt">.</span><span class="hl kwd">invoke</span><span class="hl opt">(</span>progress<span class="hl opt">,</span> promise<span class="hl opt">,</span> progressValue<span class="hl opt">);</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>
<span class="hl opt">};</span>
<span class="hl opt">};</span>

<span class="hl opt">},{</span><span class="hl str">&quot;./async.js&quot;</span><span class="hl opt">:</span><span class="hl num">2</span><span class="hl opt">,</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">:</span><span class="hl num">38</span><span class="hl opt">}],</span><span class="hl num">23</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>_dereq_<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl str">&quot;use strict&quot;</span><span class="hl opt">;</span>
module<span class="hl opt">.</span><span class="hl kwd">exports</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
<span class="hl kwa">var</span> <span class="hl kwd">makeSelfResolutionError</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return new</span> <span class="hl kwd">TypeError</span><span class="hl opt">(</span><span class="hl str">&quot;circular promise resolution chain</span><span class="hl esc">\u000a\u000a</span>    <span class="hl str">See http://goo.gl/LhFpo0</span><span class="hl esc">\u000a</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
<span class="hl opt">};</span>
<span class="hl kwa">var</span> <span class="hl kwd">reflect</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
    <span class="hl kwa">return new</span> Promise<span class="hl opt">.</span><span class="hl kwd">PromiseInspection</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_target</span><span class="hl opt">());</span>
<span class="hl opt">};</span>
<span class="hl kwa">var</span> <span class="hl kwd">apiRejection</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>msg<span class="hl opt">) {</span>
    <span class="hl kwa">return</span> Promise<span class="hl opt">.</span><span class="hl kwd">reject</span><span class="hl opt">(</span><span class="hl kwa">new</span> <span class="hl kwd">TypeError</span><span class="hl opt">(</span>msg<span class="hl opt">));</span>
<span class="hl opt">};</span>

<span class="hl kwa">var</span> util <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">);</span>

<span class="hl kwa">var</span> getDomain<span class="hl opt">;</span>
<span class="hl kwa">if</span> <span class="hl opt">(</span>util<span class="hl opt">.</span>isNode<span class="hl opt">) {</span>
    <span class="hl kwd">getDomain</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
        <span class="hl kwa">var</span> ret <span class="hl opt">=</span> process<span class="hl opt">.</span>domain<span class="hl opt">;</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>ret <span class="hl opt">===</span> undefined<span class="hl opt">)</span> ret <span class="hl opt">=</span> <span class="hl kwa">null</span><span class="hl opt">;</span>
        <span class="hl kwa">return</span> ret<span class="hl opt">;</span>
    <span class="hl opt">};</span>
<span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
    <span class="hl kwd">getDomain</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
        <span class="hl kwa">return null</span><span class="hl opt">;</span>
    <span class="hl opt">};</span>
<span class="hl opt">}</span>
util<span class="hl opt">.</span><span class="hl kwd">notEnumerableProp</span><span class="hl opt">(</span>Promise<span class="hl opt">,</span> <span class="hl str">&quot;_getDomain&quot;</span><span class="hl opt">,</span> getDomain<span class="hl opt">);</span>

<span class="hl kwa">var</span> async <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./async.js&quot;</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> errors <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./errors.js&quot;</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> TypeError <span class="hl opt">=</span> Promise<span class="hl opt">.</span>TypeError <span class="hl opt">=</span> errors<span class="hl opt">.</span>TypeError<span class="hl opt">;</span>
Promise<span class="hl opt">.</span>RangeError <span class="hl opt">=</span> errors<span class="hl opt">.</span>RangeError<span class="hl opt">;</span>
Promise<span class="hl opt">.</span>CancellationError <span class="hl opt">=</span> errors<span class="hl opt">.</span>CancellationError<span class="hl opt">;</span>
Promise<span class="hl opt">.</span>TimeoutError <span class="hl opt">=</span> errors<span class="hl opt">.</span>TimeoutError<span class="hl opt">;</span>
Promise<span class="hl opt">.</span>OperationalError <span class="hl opt">=</span> errors<span class="hl opt">.</span>OperationalError<span class="hl opt">;</span>
Promise<span class="hl opt">.</span>RejectionError <span class="hl opt">=</span> errors<span class="hl opt">.</span>OperationalError<span class="hl opt">;</span>
Promise<span class="hl opt">.</span>AggregateError <span class="hl opt">=</span> errors<span class="hl opt">.</span>AggregateError<span class="hl opt">;</span>
<span class="hl kwa">var</span> <span class="hl kwd">INTERNAL</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(){};</span>
<span class="hl kwa">var</span> APPLY <span class="hl opt">= {};</span>
<span class="hl kwa">var</span> NEXT_FILTER <span class="hl opt">= {</span>e<span class="hl opt">:</span> <span class="hl kwa">null</span><span class="hl opt">};</span>
<span class="hl kwa">var</span> tryConvertToPromise <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./thenables.js&quot;</span><span class="hl opt">)(</span>Promise<span class="hl opt">,</span> INTERNAL<span class="hl opt">);</span>
<span class="hl kwa">var</span> PromiseArray <span class="hl opt">=</span>
    <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./promise_array.js&quot;</span><span class="hl opt">)(</span>Promise<span class="hl opt">,</span> INTERNAL<span class="hl opt">,</span>
                                    tryConvertToPromise<span class="hl opt">,</span> apiRejection<span class="hl opt">);</span>
<span class="hl kwa">var</span> CapturedTrace <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./captured_trace.js&quot;</span><span class="hl opt">)();</span>
<span class="hl kwa">var</span> isDebugging <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./debuggability.js&quot;</span><span class="hl opt">)(</span>Promise<span class="hl opt">,</span> CapturedTrace<span class="hl opt">);</span>
 <span class="hl com">/*jshint unused:false*/</span>
<span class="hl kwa">var</span> createContext <span class="hl opt">=</span>
    <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./context.js&quot;</span><span class="hl opt">)(</span>Promise<span class="hl opt">,</span> CapturedTrace<span class="hl opt">,</span> isDebugging<span class="hl opt">);</span>
<span class="hl kwa">var</span> CatchFilter <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./catch_filter.js&quot;</span><span class="hl opt">)(</span>NEXT_FILTER<span class="hl opt">);</span>
<span class="hl kwa">var</span> PromiseResolver <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./promise_resolver.js&quot;</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> nodebackForPromise <span class="hl opt">=</span> PromiseResolver<span class="hl opt">.</span>_nodebackForPromise<span class="hl opt">;</span>
<span class="hl kwa">var</span> errorObj <span class="hl opt">=</span> util<span class="hl opt">.</span>errorObj<span class="hl opt">;</span>
<span class="hl kwa">var</span> tryCatch <span class="hl opt">=</span> util<span class="hl opt">.</span>tryCatch<span class="hl opt">;</span>
<span class="hl kwa">function</span> <span class="hl kwd">Promise</span><span class="hl opt">(</span>resolver<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> resolver <span class="hl opt">!==</span> <span class="hl str">&quot;function&quot;</span><span class="hl opt">) {</span>
        <span class="hl kwa">throw new</span> <span class="hl kwd">TypeError</span><span class="hl opt">(</span><span class="hl str">&quot;the promise constructor requires a resolver function</span><span class="hl esc">\u000a\u000a</span>    <span class="hl str">See http://goo.gl/EC22Yn</span><span class="hl esc">\u000a</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>constructor <span class="hl opt">!==</span> Promise<span class="hl opt">) {</span>
        <span class="hl kwa">throw new</span> <span class="hl kwd">TypeError</span><span class="hl opt">(</span><span class="hl str">&quot;the promise constructor cannot be invoked directly</span><span class="hl esc">\u000a\u000a</span>    <span class="hl str">See http://goo.gl/KsIlge</span><span class="hl esc">\u000a</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_fulfillmentHandler0 <span class="hl opt">=</span> undefined<span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_rejectionHandler0 <span class="hl opt">=</span> undefined<span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_progressHandler0 <span class="hl opt">=</span> undefined<span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_promise0 <span class="hl opt">=</span> undefined<span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_receiver0 <span class="hl opt">=</span> undefined<span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_settledValue <span class="hl opt">=</span> undefined<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>resolver <span class="hl opt">!==</span> INTERNAL<span class="hl opt">)</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_resolveFromResolver</span><span class="hl opt">(</span>resolver<span class="hl opt">);</span>
<span class="hl opt">}</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">toString</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return</span> <span class="hl str">&quot;[object Promise]&quot;</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>caught <span class="hl opt">=</span> Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">[</span><span class="hl str">&quot;catch&quot;</span><span class="hl opt">] =</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>fn<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> len <span class="hl opt">=</span> arguments<span class="hl opt">.</span>length<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>len <span class="hl opt">&gt;</span> <span class="hl num">1</span><span class="hl opt">) {</span>
        <span class="hl kwa">var</span> catchInstances <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Array</span><span class="hl opt">(</span>len <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">),</span>
            j <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> i<span class="hl opt">;</span>
        <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> len <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
            <span class="hl kwa">var</span> item <span class="hl opt">=</span> arguments<span class="hl opt">[</span>i<span class="hl opt">];</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> item <span class="hl opt">===</span> <span class="hl str">&quot;function&quot;</span><span class="hl opt">) {</span>
                catchInstances<span class="hl opt">[</span>j<span class="hl opt">++] =</span> item<span class="hl opt">;</span>
            <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
                <span class="hl kwa">return</span> Promise<span class="hl opt">.</span><span class="hl kwd">reject</span><span class="hl opt">(</span>
                    <span class="hl kwa">new</span> <span class="hl kwd">TypeError</span><span class="hl opt">(</span><span class="hl str">&quot;Catch filter must inherit from Error or be a simple predicate function</span><span class="hl esc">\u000a\u000a</span>    <span class="hl str">See http://goo.gl/o84o68</span><span class="hl esc">\u000a</span><span class="hl str">&quot;</span><span class="hl opt">));</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span>
        catchInstances<span class="hl opt">.</span>length <span class="hl opt">=</span> j<span class="hl opt">;</span>
        fn <span class="hl opt">=</span> arguments<span class="hl opt">[</span>i<span class="hl opt">];</span>
        <span class="hl kwa">var</span> catchFilter <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">CatchFilter</span><span class="hl opt">(</span>catchInstances<span class="hl opt">,</span> fn<span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">);</span>
        <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_then</span><span class="hl opt">(</span>undefined<span class="hl opt">,</span> catchFilter<span class="hl opt">.</span>doFilter<span class="hl opt">,</span> undefined<span class="hl opt">,</span>
            catchFilter<span class="hl opt">,</span> undefined<span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_then</span><span class="hl opt">(</span>undefined<span class="hl opt">,</span> fn<span class="hl opt">,</span> undefined<span class="hl opt">,</span> undefined<span class="hl opt">,</span> undefined<span class="hl opt">);</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">reflect</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_then</span><span class="hl opt">(</span>reflect<span class="hl opt">,</span> reflect<span class="hl opt">,</span> undefined<span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">,</span> undefined<span class="hl opt">);</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">then</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>didFulfill<span class="hl opt">,</span> didReject<span class="hl opt">,</span> didProgress<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">isDebugging</span><span class="hl opt">() &amp;&amp;</span> arguments<span class="hl opt">.</span>length <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span>
        <span class="hl kwa">typeof</span> didFulfill <span class="hl opt">!==</span> <span class="hl str">&quot;function&quot;</span> <span class="hl opt">&amp;&amp;</span>
        <span class="hl kwa">typeof</span> didReject <span class="hl opt">!==</span> <span class="hl str">&quot;function&quot;</span><span class="hl opt">) {</span>
        <span class="hl kwa">var</span> msg <span class="hl opt">=</span> <span class="hl str">&quot;.then() only accepts functions but was passed: &quot;</span> <span class="hl opt">+</span>
                util<span class="hl opt">.</span><span class="hl kwd">classString</span><span class="hl opt">(</span>didFulfill<span class="hl opt">);</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>arguments<span class="hl opt">.</span>length <span class="hl opt">&gt;</span> <span class="hl num">1</span><span class="hl opt">) {</span>
            msg <span class="hl opt">+=</span> <span class="hl str">&quot;, &quot;</span> <span class="hl opt">+</span> util<span class="hl opt">.</span><span class="hl kwd">classString</span><span class="hl opt">(</span>didReject<span class="hl opt">);</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_warn</span><span class="hl opt">(</span>msg<span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_then</span><span class="hl opt">(</span>didFulfill<span class="hl opt">,</span> didReject<span class="hl opt">,</span> didProgress<span class="hl opt">,</span>
        undefined<span class="hl opt">,</span> undefined<span class="hl opt">);</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">done</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>didFulfill<span class="hl opt">,</span> didReject<span class="hl opt">,</span> didProgress<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> promise <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_then</span><span class="hl opt">(</span>didFulfill<span class="hl opt">,</span> didReject<span class="hl opt">,</span> didProgress<span class="hl opt">,</span>
        undefined<span class="hl opt">,</span> undefined<span class="hl opt">);</span>
    promise<span class="hl opt">.</span><span class="hl kwd">_setIsFinal</span><span class="hl opt">();</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">spread</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>didFulfill<span class="hl opt">,</span> didReject<span class="hl opt">) {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">all</span><span class="hl opt">().</span><span class="hl kwd">_then</span><span class="hl opt">(</span>didFulfill<span class="hl opt">,</span> didReject<span class="hl opt">,</span> undefined<span class="hl opt">,</span> APPLY<span class="hl opt">,</span> undefined<span class="hl opt">);</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">isCancellable</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return</span> <span class="hl opt">!</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">isResolved</span><span class="hl opt">() &amp;&amp;</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_cancellable</span><span class="hl opt">();</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">toJSON</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">var</span> ret <span class="hl opt">= {</span>
        isFulfilled<span class="hl opt">:</span> <span class="hl kwa">false</span><span class="hl opt">,</span>
        isRejected<span class="hl opt">:</span> <span class="hl kwa">false</span><span class="hl opt">,</span>
        fulfillmentValue<span class="hl opt">:</span> undefined<span class="hl opt">,</span>
        rejectionReason<span class="hl opt">:</span> undefined
    <span class="hl opt">};</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">isFulfilled</span><span class="hl opt">()) {</span>
        ret<span class="hl opt">.</span>fulfillmentValue <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">value</span><span class="hl opt">();</span>
        ret<span class="hl opt">.</span>isFulfilled <span class="hl opt">=</span> <span class="hl kwa">true</span><span class="hl opt">;</span>
    <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">isRejected</span><span class="hl opt">()) {</span>
        ret<span class="hl opt">.</span>rejectionReason <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">reason</span><span class="hl opt">();</span>
        ret<span class="hl opt">.</span>isRejected <span class="hl opt">=</span> <span class="hl kwa">true</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return</span> ret<span class="hl opt">;</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">all</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return new</span> <span class="hl kwd">PromiseArray</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">).</span><span class="hl kwd">promise</span><span class="hl opt">();</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">error</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>fn<span class="hl opt">) {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">caught</span><span class="hl opt">(</span>util<span class="hl opt">.</span>originatesFromRejection<span class="hl opt">,</span> fn<span class="hl opt">);</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwd">is</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>val<span class="hl opt">) {</span>
    <span class="hl kwa">return</span> val <span class="hl kwa">instanceof</span> Promise<span class="hl opt">;</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwd">fromNode</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>fn<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> ret <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Promise</span><span class="hl opt">(</span>INTERNAL<span class="hl opt">);</span>
    <span class="hl kwa">var</span> result <span class="hl opt">=</span> <span class="hl kwd">tryCatch</span><span class="hl opt">(</span>fn<span class="hl opt">)(</span><span class="hl kwd">nodebackForPromise</span><span class="hl opt">(</span>ret<span class="hl opt">));</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>result <span class="hl opt">===</span> errorObj<span class="hl opt">) {</span>
        ret<span class="hl opt">.</span><span class="hl kwd">_rejectCallback</span><span class="hl opt">(</span>result<span class="hl opt">.</span>e<span class="hl opt">,</span> <span class="hl kwa">true</span><span class="hl opt">,</span> <span class="hl kwa">true</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return</span> ret<span class="hl opt">;</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwd">all</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>promises<span class="hl opt">) {</span>
    <span class="hl kwa">return new</span> <span class="hl kwd">PromiseArray</span><span class="hl opt">(</span>promises<span class="hl opt">).</span><span class="hl kwd">promise</span><span class="hl opt">();</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span>defer <span class="hl opt">=</span> Promise<span class="hl opt">.</span><span class="hl kwd">pending</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">var</span> promise <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Promise</span><span class="hl opt">(</span>INTERNAL<span class="hl opt">);</span>
    <span class="hl kwa">return new</span> <span class="hl kwd">PromiseResolver</span><span class="hl opt">(</span>promise<span class="hl opt">);</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwd">cast</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>obj<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> ret <span class="hl opt">=</span> <span class="hl kwd">tryConvertToPromise</span><span class="hl opt">(</span>obj<span class="hl opt">);</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!(</span>ret <span class="hl kwa">instanceof</span> Promise<span class="hl opt">)) {</span>
        <span class="hl kwa">var</span> val <span class="hl opt">=</span> ret<span class="hl opt">;</span>
        ret <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Promise</span><span class="hl opt">(</span>INTERNAL<span class="hl opt">);</span>
        ret<span class="hl opt">.</span><span class="hl kwd">_fulfillUnchecked</span><span class="hl opt">(</span>val<span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return</span> ret<span class="hl opt">;</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span>resolve <span class="hl opt">=</span> Promise<span class="hl opt">.</span>fulfilled <span class="hl opt">=</span> Promise<span class="hl opt">.</span>cast<span class="hl opt">;</span>

Promise<span class="hl opt">.</span>reject <span class="hl opt">=</span> Promise<span class="hl opt">.</span><span class="hl kwd">rejected</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>reason<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> ret <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Promise</span><span class="hl opt">(</span>INTERNAL<span class="hl opt">);</span>
    ret<span class="hl opt">.</span><span class="hl kwd">_captureStackTrace</span><span class="hl opt">();</span>
    ret<span class="hl opt">.</span><span class="hl kwd">_rejectCallback</span><span class="hl opt">(</span>reason<span class="hl opt">,</span> <span class="hl kwa">true</span><span class="hl opt">);</span>
    <span class="hl kwa">return</span> ret<span class="hl opt">;</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwd">setScheduler</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>fn<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> fn <span class="hl opt">!==</span> <span class="hl str">&quot;function&quot;</span><span class="hl opt">)</span> <span class="hl kwa">throw new</span> <span class="hl kwd">TypeError</span><span class="hl opt">(</span><span class="hl str">&quot;fn must be a function</span><span class="hl esc">\u000a\u000a</span>    <span class="hl str">See http://goo.gl/916lJJ</span><span class="hl esc">\u000a</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
    <span class="hl kwa">var</span> prev <span class="hl opt">=</span> async<span class="hl opt">.</span>_schedule<span class="hl opt">;</span>
    async<span class="hl opt">.</span>_schedule <span class="hl opt">=</span> fn<span class="hl opt">;</span>
    <span class="hl kwa">return</span> prev<span class="hl opt">;</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_then</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>
    didFulfill<span class="hl opt">,</span>
    didReject<span class="hl opt">,</span>
    didProgress<span class="hl opt">,</span>
    receiver<span class="hl opt">,</span>
    internalData
<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> haveInternalData <span class="hl opt">=</span> internalData <span class="hl opt">!==</span> undefined<span class="hl opt">;</span>
    <span class="hl kwa">var</span> ret <span class="hl opt">=</span> haveInternalData <span class="hl opt">?</span> internalData <span class="hl opt">:</span> <span class="hl kwa">new</span> <span class="hl kwd">Promise</span><span class="hl opt">(</span>INTERNAL<span class="hl opt">);</span>

    <span class="hl kwa">if</span> <span class="hl opt">(!</span>haveInternalData<span class="hl opt">) {</span>
        ret<span class="hl opt">.</span><span class="hl kwd">_propagateFrom</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> <span class="hl num">4</span> <span class="hl opt">|</span> <span class="hl num">1</span><span class="hl opt">);</span>
        ret<span class="hl opt">.</span><span class="hl kwd">_captureStackTrace</span><span class="hl opt">();</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">var</span> target <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_target</span><span class="hl opt">();</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>target <span class="hl opt">!==</span> <span class="hl kwa">this</span><span class="hl opt">) {</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>receiver <span class="hl opt">===</span> undefined<span class="hl opt">)</span> receiver <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_boundTo<span class="hl opt">;</span>
        <span class="hl kwa">if</span> <span class="hl opt">(!</span>haveInternalData<span class="hl opt">)</span> ret<span class="hl opt">.</span><span class="hl kwd">_setIsMigrated</span><span class="hl opt">();</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">var</span> callbackIndex <span class="hl opt">=</span> target<span class="hl opt">.</span><span class="hl kwd">_addCallbacks</span><span class="hl opt">(</span>didFulfill<span class="hl opt">,</span>
                                             didReject<span class="hl opt">,</span>
                                             didProgress<span class="hl opt">,</span>
                                             ret<span class="hl opt">,</span>
                                             receiver<span class="hl opt">,</span>
                                             <span class="hl kwd">getDomain</span><span class="hl opt">());</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>target<span class="hl opt">.</span><span class="hl kwd">_isResolved</span><span class="hl opt">() &amp;&amp; !</span>target<span class="hl opt">.</span><span class="hl kwd">_isSettlePromisesQueued</span><span class="hl opt">()) {</span>
        async<span class="hl opt">.</span><span class="hl kwd">invoke</span><span class="hl opt">(</span>
            target<span class="hl opt">.</span>_settlePromiseAtPostResolution<span class="hl opt">,</span> target<span class="hl opt">,</span> callbackIndex<span class="hl opt">);</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">return</span> ret<span class="hl opt">;</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_settlePromiseAtPostResolution</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>index<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_isRejectionUnhandled</span><span class="hl opt">())</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_unsetRejectionIsUnhandled</span><span class="hl opt">();</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_settlePromiseAt</span><span class="hl opt">(</span>index<span class="hl opt">);</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_length</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span>_bitField <span class="hl opt">&amp;</span> <span class="hl num">131071</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_isFollowingOrFulfilledOrRejected</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">&amp;</span> <span class="hl num">939524096</span><span class="hl opt">) &gt;</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_isFollowing</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">&amp;</span> <span class="hl num">536870912</span><span class="hl opt">) ===</span> <span class="hl num">536870912</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_setLength</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>len<span class="hl opt">) {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">= (</span><span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">&amp; -</span><span class="hl num">131072</span><span class="hl opt">) |</span>
        <span class="hl opt">(</span>len <span class="hl opt">&amp;</span> <span class="hl num">131071</span><span class="hl opt">);</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_setFulfilled</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">|</span> <span class="hl num">268435456</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_setRejected</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">|</span> <span class="hl num">134217728</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_setFollowing</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">|</span> <span class="hl num">536870912</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_setIsFinal</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">|</span> <span class="hl num">33554432</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_isFinal</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">&amp;</span> <span class="hl num">33554432</span><span class="hl opt">) &gt;</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_cancellable</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">&amp;</span> <span class="hl num">67108864</span><span class="hl opt">) &gt;</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_setCancellable</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">|</span> <span class="hl num">67108864</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_unsetCancellable</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">&amp; (~</span><span class="hl num">67108864</span><span class="hl opt">);</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_setIsMigrated</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">|</span> <span class="hl num">4194304</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_unsetIsMigrated</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">&amp; (~</span><span class="hl num">4194304</span><span class="hl opt">);</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_isMigrated</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">&amp;</span> <span class="hl num">4194304</span><span class="hl opt">) &gt;</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_receiverAt</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>index<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> ret <span class="hl opt">=</span> index <span class="hl opt">===</span> <span class="hl num">0</span>
        <span class="hl opt">?</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_receiver0
        <span class="hl opt">:</span> <span class="hl kwa">this</span><span class="hl opt">[</span>
            index <span class="hl opt">*</span> <span class="hl num">5</span> <span class="hl opt">-</span> <span class="hl num">5</span> <span class="hl opt">+</span> <span class="hl num">4</span><span class="hl opt">];</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>ret <span class="hl opt">===</span> undefined <span class="hl opt">&amp;&amp;</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_isBound</span><span class="hl opt">()) {</span>
        <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_boundValue</span><span class="hl opt">();</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return</span> ret<span class="hl opt">;</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_promiseAt</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>index<span class="hl opt">) {</span>
    <span class="hl kwa">return</span> index <span class="hl opt">===</span> <span class="hl num">0</span>
        <span class="hl opt">?</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_promise0
        <span class="hl opt">:</span> <span class="hl kwa">this</span><span class="hl opt">[</span>index <span class="hl opt">*</span> <span class="hl num">5</span> <span class="hl opt">-</span> <span class="hl num">5</span> <span class="hl opt">+</span> <span class="hl num">3</span><span class="hl opt">];</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_fulfillmentHandlerAt</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>index<span class="hl opt">) {</span>
    <span class="hl kwa">return</span> index <span class="hl opt">===</span> <span class="hl num">0</span>
        <span class="hl opt">?</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_fulfillmentHandler0
        <span class="hl opt">:</span> <span class="hl kwa">this</span><span class="hl opt">[</span>index <span class="hl opt">*</span> <span class="hl num">5</span> <span class="hl opt">-</span> <span class="hl num">5</span> <span class="hl opt">+</span> <span class="hl num">0</span><span class="hl opt">];</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_rejectionHandlerAt</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>index<span class="hl opt">) {</span>
    <span class="hl kwa">return</span> index <span class="hl opt">===</span> <span class="hl num">0</span>
        <span class="hl opt">?</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_rejectionHandler0
        <span class="hl opt">:</span> <span class="hl kwa">this</span><span class="hl opt">[</span>index <span class="hl opt">*</span> <span class="hl num">5</span> <span class="hl opt">-</span> <span class="hl num">5</span> <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">];</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_boundValue</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
    <span class="hl kwa">var</span> ret <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_boundTo<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>ret <span class="hl opt">!==</span> undefined<span class="hl opt">) {</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>ret <span class="hl kwa">instanceof</span> Promise<span class="hl opt">) {</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>ret<span class="hl opt">.</span><span class="hl kwd">isFulfilled</span><span class="hl opt">()) {</span>
                <span class="hl kwa">return</span> ret<span class="hl opt">.</span><span class="hl kwd">value</span><span class="hl opt">();</span>
            <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
                <span class="hl kwa">return</span> undefined<span class="hl opt">;</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return</span> ret<span class="hl opt">;</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_migrateCallbacks</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>follower<span class="hl opt">,</span> index<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> fulfill <span class="hl opt">=</span> follower<span class="hl opt">.</span><span class="hl kwd">_fulfillmentHandlerAt</span><span class="hl opt">(</span>index<span class="hl opt">);</span>
    <span class="hl kwa">var</span> reject <span class="hl opt">=</span> follower<span class="hl opt">.</span><span class="hl kwd">_rejectionHandlerAt</span><span class="hl opt">(</span>index<span class="hl opt">);</span>
    <span class="hl kwa">var</span> progress <span class="hl opt">=</span> follower<span class="hl opt">.</span><span class="hl kwd">_progressHandlerAt</span><span class="hl opt">(</span>index<span class="hl opt">);</span>
    <span class="hl kwa">var</span> promise <span class="hl opt">=</span> follower<span class="hl opt">.</span><span class="hl kwd">_promiseAt</span><span class="hl opt">(</span>index<span class="hl opt">);</span>
    <span class="hl kwa">var</span> receiver <span class="hl opt">=</span> follower<span class="hl opt">.</span><span class="hl kwd">_receiverAt</span><span class="hl opt">(</span>index<span class="hl opt">);</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>promise <span class="hl kwa">instanceof</span> Promise<span class="hl opt">)</span> promise<span class="hl opt">.</span><span class="hl kwd">_setIsMigrated</span><span class="hl opt">();</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_addCallbacks</span><span class="hl opt">(</span>fulfill<span class="hl opt">,</span> reject<span class="hl opt">,</span> progress<span class="hl opt">,</span> promise<span class="hl opt">,</span> receiver<span class="hl opt">,</span> <span class="hl kwa">null</span><span class="hl opt">);</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_addCallbacks</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>
    fulfill<span class="hl opt">,</span>
    reject<span class="hl opt">,</span>
    progress<span class="hl opt">,</span>
    promise<span class="hl opt">,</span>
    receiver<span class="hl opt">,</span>
    domain
<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> index <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_length</span><span class="hl opt">();</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>index <span class="hl opt">&gt;=</span> <span class="hl num">131071</span> <span class="hl opt">-</span> <span class="hl num">5</span><span class="hl opt">) {</span>
        index <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_setLength</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>index <span class="hl opt">===</span> <span class="hl num">0</span><span class="hl opt">) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>_promise0 <span class="hl opt">=</span> promise<span class="hl opt">;</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>receiver <span class="hl opt">!==</span> undefined<span class="hl opt">)</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_receiver0 <span class="hl opt">=</span> receiver<span class="hl opt">;</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> fulfill <span class="hl opt">===</span> <span class="hl str">&quot;function&quot;</span> <span class="hl opt">&amp;&amp; !</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_isCarryingStackTrace</span><span class="hl opt">()) {</span>
            <span class="hl kwa">this</span><span class="hl opt">.</span>_fulfillmentHandler0 <span class="hl opt">=</span>
                domain <span class="hl opt">===</span> <span class="hl kwa">null</span> <span class="hl opt">?</span> fulfill <span class="hl opt">:</span> domain<span class="hl opt">.</span><span class="hl kwd">bind</span><span class="hl opt">(</span>fulfill<span class="hl opt">);</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> reject <span class="hl opt">===</span> <span class="hl str">&quot;function&quot;</span><span class="hl opt">) {</span>
            <span class="hl kwa">this</span><span class="hl opt">.</span>_rejectionHandler0 <span class="hl opt">=</span>
                domain <span class="hl opt">===</span> <span class="hl kwa">null</span> <span class="hl opt">?</span> reject <span class="hl opt">:</span> domain<span class="hl opt">.</span><span class="hl kwd">bind</span><span class="hl opt">(</span>reject<span class="hl opt">);</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> progress <span class="hl opt">===</span> <span class="hl str">&quot;function&quot;</span><span class="hl opt">) {</span>
            <span class="hl kwa">this</span><span class="hl opt">.</span>_progressHandler0 <span class="hl opt">=</span>
                domain <span class="hl opt">===</span> <span class="hl kwa">null</span> <span class="hl opt">?</span> progress <span class="hl opt">:</span> domain<span class="hl opt">.</span><span class="hl kwd">bind</span><span class="hl opt">(</span>progress<span class="hl opt">);</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
        <span class="hl kwa">var</span> base <span class="hl opt">=</span> index <span class="hl opt">*</span> <span class="hl num">5</span> <span class="hl opt">-</span> <span class="hl num">5</span><span class="hl opt">;</span>
        <span class="hl kwa">this</span><span class="hl opt">[</span>base <span class="hl opt">+</span> <span class="hl num">3</span><span class="hl opt">] =</span> promise<span class="hl opt">;</span>
        <span class="hl kwa">this</span><span class="hl opt">[</span>base <span class="hl opt">+</span> <span class="hl num">4</span><span class="hl opt">] =</span> receiver<span class="hl opt">;</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> fulfill <span class="hl opt">===</span> <span class="hl str">&quot;function&quot;</span><span class="hl opt">) {</span>
            <span class="hl kwa">this</span><span class="hl opt">[</span>base <span class="hl opt">+</span> <span class="hl num">0</span><span class="hl opt">] =</span>
                domain <span class="hl opt">===</span> <span class="hl kwa">null</span> <span class="hl opt">?</span> fulfill <span class="hl opt">:</span> domain<span class="hl opt">.</span><span class="hl kwd">bind</span><span class="hl opt">(</span>fulfill<span class="hl opt">);</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> reject <span class="hl opt">===</span> <span class="hl str">&quot;function&quot;</span><span class="hl opt">) {</span>
            <span class="hl kwa">this</span><span class="hl opt">[</span>base <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">] =</span>
                domain <span class="hl opt">===</span> <span class="hl kwa">null</span> <span class="hl opt">?</span> reject <span class="hl opt">:</span> domain<span class="hl opt">.</span><span class="hl kwd">bind</span><span class="hl opt">(</span>reject<span class="hl opt">);</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> progress <span class="hl opt">===</span> <span class="hl str">&quot;function&quot;</span><span class="hl opt">) {</span>
            <span class="hl kwa">this</span><span class="hl opt">[</span>base <span class="hl opt">+</span> <span class="hl num">2</span><span class="hl opt">] =</span>
                domain <span class="hl opt">===</span> <span class="hl kwa">null</span> <span class="hl opt">?</span> progress <span class="hl opt">:</span> domain<span class="hl opt">.</span><span class="hl kwd">bind</span><span class="hl opt">(</span>progress<span class="hl opt">);</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_setLength</span><span class="hl opt">(</span>index <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">);</span>
    <span class="hl kwa">return</span> index<span class="hl opt">;</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_setProxyHandlers</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>receiver<span class="hl opt">,</span> promiseSlotValue<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> index <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_length</span><span class="hl opt">();</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>index <span class="hl opt">&gt;=</span> <span class="hl num">131071</span> <span class="hl opt">-</span> <span class="hl num">5</span><span class="hl opt">) {</span>
        index <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_setLength</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>index <span class="hl opt">===</span> <span class="hl num">0</span><span class="hl opt">) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>_promise0 <span class="hl opt">=</span> promiseSlotValue<span class="hl opt">;</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>_receiver0 <span class="hl opt">=</span> receiver<span class="hl opt">;</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
        <span class="hl kwa">var</span> base <span class="hl opt">=</span> index <span class="hl opt">*</span> <span class="hl num">5</span> <span class="hl opt">-</span> <span class="hl num">5</span><span class="hl opt">;</span>
        <span class="hl kwa">this</span><span class="hl opt">[</span>base <span class="hl opt">+</span> <span class="hl num">3</span><span class="hl opt">] =</span> promiseSlotValue<span class="hl opt">;</span>
        <span class="hl kwa">this</span><span class="hl opt">[</span>base <span class="hl opt">+</span> <span class="hl num">4</span><span class="hl opt">] =</span> receiver<span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_setLength</span><span class="hl opt">(</span>index <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">);</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_proxyPromiseArray</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>promiseArray<span class="hl opt">,</span> index<span class="hl opt">) {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_setProxyHandlers</span><span class="hl opt">(</span>promiseArray<span class="hl opt">,</span> index<span class="hl opt">);</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_resolveCallback</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>value<span class="hl opt">,</span> shouldBind<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_isFollowingOrFulfilledOrRejected</span><span class="hl opt">())</span> <span class="hl kwa">return</span><span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>value <span class="hl opt">===</span> <span class="hl kwa">this</span><span class="hl opt">)</span>
        <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_rejectCallback</span><span class="hl opt">(</span><span class="hl kwd">makeSelfResolutionError</span><span class="hl opt">(),</span> <span class="hl kwa">false</span><span class="hl opt">,</span> <span class="hl kwa">true</span><span class="hl opt">);</span>
    <span class="hl kwa">var</span> maybePromise <span class="hl opt">=</span> <span class="hl kwd">tryConvertToPromise</span><span class="hl opt">(</span>value<span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">);</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!(</span>maybePromise <span class="hl kwa">instanceof</span> Promise<span class="hl opt">))</span> <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_fulfill</span><span class="hl opt">(</span>value<span class="hl opt">);</span>

    <span class="hl kwa">var</span> propagationFlags <span class="hl opt">=</span> <span class="hl num">1</span> <span class="hl opt">| (</span>shouldBind <span class="hl opt">?</span> <span class="hl num">4</span> <span class="hl opt">:</span> <span class="hl num">0</span><span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_propagateFrom</span><span class="hl opt">(</span>maybePromise<span class="hl opt">,</span> propagationFlags<span class="hl opt">);</span>
    <span class="hl kwa">var</span> promise <span class="hl opt">=</span> maybePromise<span class="hl opt">.</span><span class="hl kwd">_target</span><span class="hl opt">();</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>promise<span class="hl opt">.</span><span class="hl kwd">_isPending</span><span class="hl opt">()) {</span>
        <span class="hl kwa">var</span> len <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_length</span><span class="hl opt">();</span>
        <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> len<span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
            promise<span class="hl opt">.</span><span class="hl kwd">_migrateCallbacks</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> i<span class="hl opt">);</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_setFollowing</span><span class="hl opt">();</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_setLength</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">);</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_setFollowee</span><span class="hl opt">(</span>promise<span class="hl opt">);</span>
    <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>promise<span class="hl opt">.</span><span class="hl kwd">_isFulfilled</span><span class="hl opt">()) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_fulfillUnchecked</span><span class="hl opt">(</span>promise<span class="hl opt">.</span><span class="hl kwd">_value</span><span class="hl opt">());</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_rejectUnchecked</span><span class="hl opt">(</span>promise<span class="hl opt">.</span><span class="hl kwd">_reason</span><span class="hl opt">(),</span>
            promise<span class="hl opt">.</span><span class="hl kwd">_getCarriedStackTrace</span><span class="hl opt">());</span>
    <span class="hl opt">}</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_rejectCallback <span class="hl opt">=</span>
<span class="hl kwa">function</span><span class="hl opt">(</span>reason<span class="hl opt">,</span> synchronous<span class="hl opt">,</span> shouldNotMarkOriginatingFromRejection<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!</span>shouldNotMarkOriginatingFromRejection<span class="hl opt">) {</span>
        util<span class="hl opt">.</span><span class="hl kwd">markAsOriginatingFromRejection</span><span class="hl opt">(</span>reason<span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">var</span> trace <span class="hl opt">=</span> util<span class="hl opt">.</span><span class="hl kwd">ensureErrorObject</span><span class="hl opt">(</span>reason<span class="hl opt">);</span>
    <span class="hl kwa">var</span> hasStack <span class="hl opt">=</span> trace <span class="hl opt">===</span> reason<span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_attachExtraTrace</span><span class="hl opt">(</span>trace<span class="hl opt">,</span> synchronous <span class="hl opt">?</span> hasStack <span class="hl opt">:</span> <span class="hl kwa">false</span><span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_reject</span><span class="hl opt">(</span>reason<span class="hl opt">,</span> hasStack <span class="hl opt">?</span> undefined <span class="hl opt">:</span> trace<span class="hl opt">);</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_resolveFromResolver</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>resolver<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> promise <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_captureStackTrace</span><span class="hl opt">();</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_pushContext</span><span class="hl opt">();</span>
    <span class="hl kwa">var</span> synchronous <span class="hl opt">=</span> <span class="hl kwa">true</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> r <span class="hl opt">=</span> <span class="hl kwd">tryCatch</span><span class="hl opt">(</span>resolver<span class="hl opt">)(</span><span class="hl kwa">function</span><span class="hl opt">(</span>value<span class="hl opt">) {</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>promise <span class="hl opt">===</span> <span class="hl kwa">null</span><span class="hl opt">)</span> <span class="hl kwa">return</span><span class="hl opt">;</span>
        promise<span class="hl opt">.</span><span class="hl kwd">_resolveCallback</span><span class="hl opt">(</span>value<span class="hl opt">);</span>
        promise <span class="hl opt">=</span> <span class="hl kwa">null</span><span class="hl opt">;</span>
    <span class="hl opt">},</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>reason<span class="hl opt">) {</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>promise <span class="hl opt">===</span> <span class="hl kwa">null</span><span class="hl opt">)</span> <span class="hl kwa">return</span><span class="hl opt">;</span>
        promise<span class="hl opt">.</span><span class="hl kwd">_rejectCallback</span><span class="hl opt">(</span>reason<span class="hl opt">,</span> synchronous<span class="hl opt">);</span>
        promise <span class="hl opt">=</span> <span class="hl kwa">null</span><span class="hl opt">;</span>
    <span class="hl opt">});</span>
    synchronous <span class="hl opt">=</span> <span class="hl kwa">false</span><span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_popContext</span><span class="hl opt">();</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>r <span class="hl opt">!==</span> undefined <span class="hl opt">&amp;&amp;</span> r <span class="hl opt">===</span> errorObj <span class="hl opt">&amp;&amp;</span> promise <span class="hl opt">!==</span> <span class="hl kwa">null</span><span class="hl opt">) {</span>
        promise<span class="hl opt">.</span><span class="hl kwd">_rejectCallback</span><span class="hl opt">(</span>r<span class="hl opt">.</span>e<span class="hl opt">,</span> <span class="hl kwa">true</span><span class="hl opt">,</span> <span class="hl kwa">true</span><span class="hl opt">);</span>
        promise <span class="hl opt">=</span> <span class="hl kwa">null</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_settlePromiseFromHandler</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>
    handler<span class="hl opt">,</span> receiver<span class="hl opt">,</span> value<span class="hl opt">,</span> promise
<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>promise<span class="hl opt">.</span><span class="hl kwd">_isRejected</span><span class="hl opt">())</span> <span class="hl kwa">return</span><span class="hl opt">;</span>
    promise<span class="hl opt">.</span><span class="hl kwd">_pushContext</span><span class="hl opt">();</span>
    <span class="hl kwa">var</span> x<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>receiver <span class="hl opt">===</span> APPLY <span class="hl opt">&amp;&amp; !</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_isRejected</span><span class="hl opt">()) {</span>
        x <span class="hl opt">=</span> <span class="hl kwd">tryCatch</span><span class="hl opt">(</span>handler<span class="hl opt">).</span><span class="hl kwd">apply</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_boundValue</span><span class="hl opt">(),</span> value<span class="hl opt">);</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
        x <span class="hl opt">=</span> <span class="hl kwd">tryCatch</span><span class="hl opt">(</span>handler<span class="hl opt">).</span><span class="hl kwd">call</span><span class="hl opt">(</span>receiver<span class="hl opt">,</span> value<span class="hl opt">);</span>
    <span class="hl opt">}</span>
    promise<span class="hl opt">.</span><span class="hl kwd">_popContext</span><span class="hl opt">();</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>x <span class="hl opt">===</span> errorObj <span class="hl opt">||</span> x <span class="hl opt">===</span> promise <span class="hl opt">||</span> x <span class="hl opt">===</span> NEXT_FILTER<span class="hl opt">) {</span>
        <span class="hl kwa">var</span> err <span class="hl opt">=</span> x <span class="hl opt">===</span> promise <span class="hl opt">?</span> <span class="hl kwd">makeSelfResolutionError</span><span class="hl opt">() :</span> x<span class="hl opt">.</span>e<span class="hl opt">;</span>
        promise<span class="hl opt">.</span><span class="hl kwd">_rejectCallback</span><span class="hl opt">(</span>err<span class="hl opt">,</span> <span class="hl kwa">false</span><span class="hl opt">,</span> <span class="hl kwa">true</span><span class="hl opt">);</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
        promise<span class="hl opt">.</span><span class="hl kwd">_resolveCallback</span><span class="hl opt">(</span>x<span class="hl opt">);</span>
    <span class="hl opt">}</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_target</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
    <span class="hl kwa">var</span> ret <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">;</span>
    <span class="hl kwa">while</span> <span class="hl opt">(</span>ret<span class="hl opt">.</span><span class="hl kwd">_isFollowing</span><span class="hl opt">())</span> ret <span class="hl opt">=</span> ret<span class="hl opt">.</span><span class="hl kwd">_followee</span><span class="hl opt">();</span>
    <span class="hl kwa">return</span> ret<span class="hl opt">;</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_followee</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span>_rejectionHandler0<span class="hl opt">;</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_setFollowee</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>promise<span class="hl opt">) {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_rejectionHandler0 <span class="hl opt">=</span> promise<span class="hl opt">;</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_cleanValues</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_cancellable</span><span class="hl opt">()) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>_cancellationParent <span class="hl opt">=</span> undefined<span class="hl opt">;</span>
    <span class="hl opt">}</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_propagateFrom</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>parent<span class="hl opt">,</span> flags<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">((</span>flags <span class="hl opt">&amp;</span> <span class="hl num">1</span><span class="hl opt">) &gt;</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span> parent<span class="hl opt">.</span><span class="hl kwd">_cancellable</span><span class="hl opt">()) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_setCancellable</span><span class="hl opt">();</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>_cancellationParent <span class="hl opt">=</span> parent<span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">if</span> <span class="hl opt">((</span>flags <span class="hl opt">&amp;</span> <span class="hl num">4</span><span class="hl opt">) &gt;</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span> parent<span class="hl opt">.</span><span class="hl kwd">_isBound</span><span class="hl opt">()) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_setBoundTo</span><span class="hl opt">(</span>parent<span class="hl opt">.</span>_boundTo<span class="hl opt">);</span>
    <span class="hl opt">}</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_fulfill</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>value<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_isFollowingOrFulfilledOrRejected</span><span class="hl opt">())</span> <span class="hl kwa">return</span><span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_fulfillUnchecked</span><span class="hl opt">(</span>value<span class="hl opt">);</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_reject</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>reason<span class="hl opt">,</span> carriedStackTrace<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_isFollowingOrFulfilledOrRejected</span><span class="hl opt">())</span> <span class="hl kwa">return</span><span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_rejectUnchecked</span><span class="hl opt">(</span>reason<span class="hl opt">,</span> carriedStackTrace<span class="hl opt">);</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_settlePromiseAt</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>index<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> promise <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_promiseAt</span><span class="hl opt">(</span>index<span class="hl opt">);</span>
    <span class="hl kwa">var</span> isPromise <span class="hl opt">=</span> promise <span class="hl kwa">instanceof</span> Promise<span class="hl opt">;</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>isPromise <span class="hl opt">&amp;&amp;</span> promise<span class="hl opt">.</span><span class="hl kwd">_isMigrated</span><span class="hl opt">()) {</span>
        promise<span class="hl opt">.</span><span class="hl kwd">_unsetIsMigrated</span><span class="hl opt">();</span>
        <span class="hl kwa">return</span> async<span class="hl opt">.</span><span class="hl kwd">invoke</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>_settlePromiseAt<span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">,</span> index<span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">var</span> handler <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_isFulfilled</span><span class="hl opt">()</span>
        <span class="hl opt">?</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_fulfillmentHandlerAt</span><span class="hl opt">(</span>index<span class="hl opt">)</span>
        <span class="hl opt">:</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_rejectionHandlerAt</span><span class="hl opt">(</span>index<span class="hl opt">);</span>

    <span class="hl kwa">var</span> carriedStackTrace <span class="hl opt">=</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_isCarryingStackTrace</span><span class="hl opt">() ?</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_getCarriedStackTrace</span><span class="hl opt">() :</span> undefined<span class="hl opt">;</span>
    <span class="hl kwa">var</span> value <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_settledValue<span class="hl opt">;</span>
    <span class="hl kwa">var</span> receiver <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_receiverAt</span><span class="hl opt">(</span>index<span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_clearCallbackDataAtIndex</span><span class="hl opt">(</span>index<span class="hl opt">);</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> handler <span class="hl opt">===</span> <span class="hl str">&quot;function&quot;</span><span class="hl opt">) {</span>
        <span class="hl kwa">if</span> <span class="hl opt">(!</span>isPromise<span class="hl opt">) {</span>
            handler<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span>receiver<span class="hl opt">,</span> value<span class="hl opt">,</span> promise<span class="hl opt">);</span>
        <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
            <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_settlePromiseFromHandler</span><span class="hl opt">(</span>handler<span class="hl opt">,</span> receiver<span class="hl opt">,</span> value<span class="hl opt">,</span> promise<span class="hl opt">);</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>receiver <span class="hl kwa">instanceof</span> PromiseArray<span class="hl opt">) {</span>
        <span class="hl kwa">if</span> <span class="hl opt">(!</span>receiver<span class="hl opt">.</span><span class="hl kwd">_isResolved</span><span class="hl opt">()) {</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_isFulfilled</span><span class="hl opt">()) {</span>
                receiver<span class="hl opt">.</span><span class="hl kwd">_promiseFulfilled</span><span class="hl opt">(</span>value<span class="hl opt">,</span> promise<span class="hl opt">);</span>
            <span class="hl opt">}</span>
            <span class="hl kwa">else</span> <span class="hl opt">{</span>
                receiver<span class="hl opt">.</span><span class="hl kwd">_promiseRejected</span><span class="hl opt">(</span>value<span class="hl opt">,</span> promise<span class="hl opt">);</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>isPromise<span class="hl opt">) {</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_isFulfilled</span><span class="hl opt">()) {</span>
            promise<span class="hl opt">.</span><span class="hl kwd">_fulfill</span><span class="hl opt">(</span>value<span class="hl opt">);</span>
        <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
            promise<span class="hl opt">.</span><span class="hl kwd">_reject</span><span class="hl opt">(</span>value<span class="hl opt">,</span> carriedStackTrace<span class="hl opt">);</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>index <span class="hl opt">&gt;=</span> <span class="hl num">4</span> <span class="hl opt">&amp;&amp; (</span>index <span class="hl opt">&amp;</span> <span class="hl num">31</span><span class="hl opt">) ===</span> <span class="hl num">4</span><span class="hl opt">)</span>
        async<span class="hl opt">.</span><span class="hl kwd">invokeLater</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>_setLength<span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">);</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_clearCallbackDataAtIndex</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>index<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>index <span class="hl opt">===</span> <span class="hl num">0</span><span class="hl opt">) {</span>
        <span class="hl kwa">if</span> <span class="hl opt">(!</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_isCarryingStackTrace</span><span class="hl opt">()) {</span>
            <span class="hl kwa">this</span><span class="hl opt">.</span>_fulfillmentHandler0 <span class="hl opt">=</span> undefined<span class="hl opt">;</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>_rejectionHandler0 <span class="hl opt">=</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>_progressHandler0 <span class="hl opt">=</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>_receiver0 <span class="hl opt">=</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>_promise0 <span class="hl opt">=</span> undefined<span class="hl opt">;</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
        <span class="hl kwa">var</span> base <span class="hl opt">=</span> index <span class="hl opt">*</span> <span class="hl num">5</span> <span class="hl opt">-</span> <span class="hl num">5</span><span class="hl opt">;</span>
        <span class="hl kwa">this</span><span class="hl opt">[</span>base <span class="hl opt">+</span> <span class="hl num">3</span><span class="hl opt">] =</span>
        <span class="hl kwa">this</span><span class="hl opt">[</span>base <span class="hl opt">+</span> <span class="hl num">4</span><span class="hl opt">] =</span>
        <span class="hl kwa">this</span><span class="hl opt">[</span>base <span class="hl opt">+</span> <span class="hl num">0</span><span class="hl opt">] =</span>
        <span class="hl kwa">this</span><span class="hl opt">[</span>base <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">] =</span>
        <span class="hl kwa">this</span><span class="hl opt">[</span>base <span class="hl opt">+</span> <span class="hl num">2</span><span class="hl opt">] =</span> undefined<span class="hl opt">;</span>
    <span class="hl opt">}</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_isSettlePromisesQueued</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">&amp;</span>
            <span class="hl opt">-</span><span class="hl num">1073741824</span><span class="hl opt">) === -</span><span class="hl num">1073741824</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_setSettlePromisesQueued</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">| -</span><span class="hl num">1073741824</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_unsetSettlePromisesQueued</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">&amp; (~-</span><span class="hl num">1073741824</span><span class="hl opt">);</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_queueSettlePromises</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
    async<span class="hl opt">.</span><span class="hl kwd">settlePromises</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_setSettlePromisesQueued</span><span class="hl opt">();</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_fulfillUnchecked</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>value<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>value <span class="hl opt">===</span> <span class="hl kwa">this</span><span class="hl opt">) {</span>
        <span class="hl kwa">var</span> err <span class="hl opt">=</span> <span class="hl kwd">makeSelfResolutionError</span><span class="hl opt">();</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_attachExtraTrace</span><span class="hl opt">(</span>err<span class="hl opt">);</span>
        <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_rejectUnchecked</span><span class="hl opt">(</span>err<span class="hl opt">,</span> undefined<span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_setFulfilled</span><span class="hl opt">();</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_settledValue <span class="hl opt">=</span> value<span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_cleanValues</span><span class="hl opt">();</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_length</span><span class="hl opt">() &gt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_queueSettlePromises</span><span class="hl opt">();</span>
    <span class="hl opt">}</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_rejectUncheckedCheckError</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>reason<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> trace <span class="hl opt">=</span> util<span class="hl opt">.</span><span class="hl kwd">ensureErrorObject</span><span class="hl opt">(</span>reason<span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_rejectUnchecked</span><span class="hl opt">(</span>reason<span class="hl opt">,</span> trace <span class="hl opt">===</span> reason <span class="hl opt">?</span> undefined <span class="hl opt">:</span> trace<span class="hl opt">);</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_rejectUnchecked</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>reason<span class="hl opt">,</span> trace<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>reason <span class="hl opt">===</span> <span class="hl kwa">this</span><span class="hl opt">) {</span>
        <span class="hl kwa">var</span> err <span class="hl opt">=</span> <span class="hl kwd">makeSelfResolutionError</span><span class="hl opt">();</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_attachExtraTrace</span><span class="hl opt">(</span>err<span class="hl opt">);</span>
        <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_rejectUnchecked</span><span class="hl opt">(</span>err<span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_setRejected</span><span class="hl opt">();</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_settledValue <span class="hl opt">=</span> reason<span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_cleanValues</span><span class="hl opt">();</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_isFinal</span><span class="hl opt">()) {</span>
        async<span class="hl opt">.</span><span class="hl kwd">throwLater</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">(</span>e<span class="hl opt">) {</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl str">&quot;stack&quot;</span> <span class="hl kwa">in</span> e<span class="hl opt">) {</span>
                async<span class="hl opt">.</span><span class="hl kwd">invokeFirst</span><span class="hl opt">(</span>
                    CapturedTrace<span class="hl opt">.</span>unhandledRejection<span class="hl opt">,</span> undefined<span class="hl opt">,</span> e<span class="hl opt">);</span>
            <span class="hl opt">}</span>
            <span class="hl kwa">throw</span> e<span class="hl opt">;</span>
        <span class="hl opt">},</span> trace <span class="hl opt">===</span> undefined <span class="hl opt">?</span> reason <span class="hl opt">:</span> trace<span class="hl opt">);</span>
        <span class="hl kwa">return</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>trace <span class="hl opt">!==</span> undefined <span class="hl opt">&amp;&amp;</span> trace <span class="hl opt">!==</span> reason<span class="hl opt">) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_setCarriedStackTrace</span><span class="hl opt">(</span>trace<span class="hl opt">);</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_length</span><span class="hl opt">() &gt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_queueSettlePromises</span><span class="hl opt">();</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_ensurePossibleRejectionHandled</span><span class="hl opt">();</span>
    <span class="hl opt">}</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_settlePromises</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_unsetSettlePromisesQueued</span><span class="hl opt">();</span>
    <span class="hl kwa">var</span> len <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_length</span><span class="hl opt">();</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> len<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_settlePromiseAt</span><span class="hl opt">(</span>i<span class="hl opt">);</span>
    <span class="hl opt">}</span>
<span class="hl opt">};</span>

util<span class="hl opt">.</span><span class="hl kwd">notEnumerableProp</span><span class="hl opt">(</span>Promise<span class="hl opt">,</span>
                       <span class="hl str">&quot;_makeSelfResolutionError&quot;</span><span class="hl opt">,</span>
                       makeSelfResolutionError<span class="hl opt">);</span>

<span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./progress.js&quot;</span><span class="hl opt">)(</span>Promise<span class="hl opt">,</span> PromiseArray<span class="hl opt">);</span>
<span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./method.js&quot;</span><span class="hl opt">)(</span>Promise<span class="hl opt">,</span> INTERNAL<span class="hl opt">,</span> tryConvertToPromise<span class="hl opt">,</span> apiRejection<span class="hl opt">);</span>
<span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./bind.js&quot;</span><span class="hl opt">)(</span>Promise<span class="hl opt">,</span> INTERNAL<span class="hl opt">,</span> tryConvertToPromise<span class="hl opt">);</span>
<span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./finally.js&quot;</span><span class="hl opt">)(</span>Promise<span class="hl opt">,</span> NEXT_FILTER<span class="hl opt">,</span> tryConvertToPromise<span class="hl opt">);</span>
<span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./direct_resolve.js&quot;</span><span class="hl opt">)(</span>Promise<span class="hl opt">);</span>
<span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./synchronous_inspection.js&quot;</span><span class="hl opt">)(</span>Promise<span class="hl opt">);</span>
<span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./join.js&quot;</span><span class="hl opt">)(</span>Promise<span class="hl opt">,</span> PromiseArray<span class="hl opt">,</span> tryConvertToPromise<span class="hl opt">,</span> INTERNAL<span class="hl opt">);</span>
Promise<span class="hl opt">.</span>Promise <span class="hl opt">=</span> Promise<span class="hl opt">;</span>
<span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">'./map.js'</span><span class="hl opt">)(</span>Promise<span class="hl opt">,</span> PromiseArray<span class="hl opt">,</span> apiRejection<span class="hl opt">,</span> tryConvertToPromise<span class="hl opt">,</span> INTERNAL<span class="hl opt">);</span>
<span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">'./cancel.js'</span><span class="hl opt">)(</span>Promise<span class="hl opt">);</span>
<span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">'./using.js'</span><span class="hl opt">)(</span>Promise<span class="hl opt">,</span> apiRejection<span class="hl opt">,</span> tryConvertToPromise<span class="hl opt">,</span> createContext<span class="hl opt">);</span>
<span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">'./generators.js'</span><span class="hl opt">)(</span>Promise<span class="hl opt">,</span> apiRejection<span class="hl opt">,</span> INTERNAL<span class="hl opt">,</span> tryConvertToPromise<span class="hl opt">);</span>
<span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">'./nodeify.js'</span><span class="hl opt">)(</span>Promise<span class="hl opt">);</span>
<span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">'./call_get.js'</span><span class="hl opt">)(</span>Promise<span class="hl opt">);</span>
<span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">'./props.js'</span><span class="hl opt">)(</span>Promise<span class="hl opt">,</span> PromiseArray<span class="hl opt">,</span> tryConvertToPromise<span class="hl opt">,</span> apiRejection<span class="hl opt">);</span>
<span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">'./race.js'</span><span class="hl opt">)(</span>Promise<span class="hl opt">,</span> INTERNAL<span class="hl opt">,</span> tryConvertToPromise<span class="hl opt">,</span> apiRejection<span class="hl opt">);</span>
<span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">'./reduce.js'</span><span class="hl opt">)(</span>Promise<span class="hl opt">,</span> PromiseArray<span class="hl opt">,</span> apiRejection<span class="hl opt">,</span> tryConvertToPromise<span class="hl opt">,</span> INTERNAL<span class="hl opt">);</span>
<span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">'./settle.js'</span><span class="hl opt">)(</span>Promise<span class="hl opt">,</span> PromiseArray<span class="hl opt">);</span>
<span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">'./some.js'</span><span class="hl opt">)(</span>Promise<span class="hl opt">,</span> PromiseArray<span class="hl opt">,</span> apiRejection<span class="hl opt">);</span>
<span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">'./promisify.js'</span><span class="hl opt">)(</span>Promise<span class="hl opt">,</span> INTERNAL<span class="hl opt">);</span>
<span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">'./any.js'</span><span class="hl opt">)(</span>Promise<span class="hl opt">);</span>
<span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">'./each.js'</span><span class="hl opt">)(</span>Promise<span class="hl opt">,</span> INTERNAL<span class="hl opt">);</span>
<span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">'./timers.js'</span><span class="hl opt">)(</span>Promise<span class="hl opt">,</span> INTERNAL<span class="hl opt">);</span>
<span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">'./filter.js'</span><span class="hl opt">)(</span>Promise<span class="hl opt">,</span> INTERNAL<span class="hl opt">);</span>
                                                         
    util<span class="hl opt">.</span><span class="hl kwd">toFastProperties</span><span class="hl opt">(</span>Promise<span class="hl opt">);</span>                                          
    util<span class="hl opt">.</span><span class="hl kwd">toFastProperties</span><span class="hl opt">(</span>Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">);</span>                                
    <span class="hl kwa">function</span> <span class="hl kwd">fillTypes</span><span class="hl opt">(</span>value<span class="hl opt">) {</span>                                              
        <span class="hl kwa">var</span> p <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Promise</span><span class="hl opt">(</span>INTERNAL<span class="hl opt">);</span>                                       
        p<span class="hl opt">.</span>_fulfillmentHandler0 <span class="hl opt">=</span> value<span class="hl opt">;</span>                                      
        p<span class="hl opt">.</span>_rejectionHandler0 <span class="hl opt">=</span> value<span class="hl opt">;</span>                                        
        p<span class="hl opt">.</span>_progressHandler0 <span class="hl opt">=</span> value<span class="hl opt">;</span>                                         
        p<span class="hl opt">.</span>_promise0 <span class="hl opt">=</span> value<span class="hl opt">;</span>                                                 
        p<span class="hl opt">.</span>_receiver0 <span class="hl opt">=</span> value<span class="hl opt">;</span>                                                
        p<span class="hl opt">.</span>_settledValue <span class="hl opt">=</span> value<span class="hl opt">;</span>                                             
    <span class="hl opt">}</span>                                                                        
    <span class="hl slc">// Complete slack tracking, opt out of field-type tracking and           </span>
    <span class="hl slc">// stabilize map                                                         </span>
    <span class="hl kwd">fillTypes</span><span class="hl opt">({</span>a<span class="hl opt">:</span> <span class="hl num">1</span><span class="hl opt">});</span>                                                       
    <span class="hl kwd">fillTypes</span><span class="hl opt">({</span>b<span class="hl opt">:</span> <span class="hl num">2</span><span class="hl opt">});</span>                                                       
    <span class="hl kwd">fillTypes</span><span class="hl opt">({</span>c<span class="hl opt">:</span> <span class="hl num">3</span><span class="hl opt">});</span>                                                       
    <span class="hl kwd">fillTypes</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">);</span>                                                            
    <span class="hl kwd">fillTypes</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">(){});</span>                                                 
    <span class="hl kwd">fillTypes</span><span class="hl opt">(</span>undefined<span class="hl opt">);</span>                                                    
    <span class="hl kwd">fillTypes</span><span class="hl opt">(</span><span class="hl kwa">false</span><span class="hl opt">);</span>                                                        
    <span class="hl kwd">fillTypes</span><span class="hl opt">(</span><span class="hl kwa">new</span> <span class="hl kwd">Promise</span><span class="hl opt">(</span>INTERNAL<span class="hl opt">));</span>                                        
    CapturedTrace<span class="hl opt">.</span><span class="hl kwd">setBounds</span><span class="hl opt">(</span>async<span class="hl opt">.</span>firstLineError<span class="hl opt">,</span> util<span class="hl opt">.</span>lastLineError<span class="hl opt">);</span>       
    <span class="hl kwa">return</span> Promise<span class="hl opt">;</span>                                                          

<span class="hl opt">};</span>

<span class="hl opt">},{</span><span class="hl str">&quot;./any.js&quot;</span><span class="hl opt">:</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl str">&quot;./async.js&quot;</span><span class="hl opt">:</span><span class="hl num">2</span><span class="hl opt">,</span><span class="hl str">&quot;./bind.js&quot;</span><span class="hl opt">:</span><span class="hl num">3</span><span class="hl opt">,</span><span class="hl str">&quot;./call_get.js&quot;</span><span class="hl opt">:</span><span class="hl num">5</span><span class="hl opt">,</span><span class="hl str">&quot;./cancel.js&quot;</span><span class="hl opt">:</span><span class="hl num">6</span><span class="hl opt">,</span><span class="hl str">&quot;./captured_trace.js&quot;</span><span class="hl opt">:</span><span class="hl num">7</span><span class="hl opt">,</span><span class="hl str">&quot;./catch_filter.js&quot;</span><span class="hl opt">:</span><span class="hl num">8</span><span class="hl opt">,</span><span class="hl str">&quot;./context.js&quot;</span><span class="hl opt">:</span><span class="hl num">9</span><span class="hl opt">,</span><span class="hl str">&quot;./debuggability.js&quot;</span><span class="hl opt">:</span><span class="hl num">10</span><span class="hl opt">,</span><span class="hl str">&quot;./direct_resolve.js&quot;</span><span class="hl opt">:</span><span class="hl num">11</span><span class="hl opt">,</span><span class="hl str">&quot;./each.js&quot;</span><span class="hl opt">:</span><span class="hl num">12</span><span class="hl opt">,</span><span class="hl str">&quot;./errors.js&quot;</span><span class="hl opt">:</span><span class="hl num">13</span><span class="hl opt">,</span><span class="hl str">&quot;./filter.js&quot;</span><span class="hl opt">:</span><span class="hl num">15</span><span class="hl opt">,</span><span class="hl str">&quot;./finally.js&quot;</span><span class="hl opt">:</span><span class="hl num">16</span><span class="hl opt">,</span><span class="hl str">&quot;./generators.js&quot;</span><span class="hl opt">:</span><span class="hl num">17</span><span class="hl opt">,</span><span class="hl str">&quot;./join.js&quot;</span><span class="hl opt">:</span><span class="hl num">18</span><span class="hl opt">,</span><span class="hl str">&quot;./map.js&quot;</span><span class="hl opt">:</span><span class="hl num">19</span><span class="hl opt">,</span><span class="hl str">&quot;./method.js&quot;</span><span class="hl opt">:</span><span class="hl num">20</span><span class="hl opt">,</span><span class="hl str">&quot;./nodeify.js&quot;</span><span class="hl opt">:</span><span class="hl num">21</span><span class="hl opt">,</span><span class="hl str">&quot;./progress.js&quot;</span><span class="hl opt">:</span><span class="hl num">22</span><span class="hl opt">,</span><span class="hl str">&quot;./promise_array.js&quot;</span><span class="hl opt">:</span><span class="hl num">24</span><span class="hl opt">,</span><span class="hl str">&quot;./promise_resolver.js&quot;</span><span class="hl opt">:</span><span class="hl num">25</span><span class="hl opt">,</span><span class="hl str">&quot;./promisify.js&quot;</span><span class="hl opt">:</span><span class="hl num">26</span><span class="hl opt">,</span><span class="hl str">&quot;./props.js&quot;</span><span class="hl opt">:</span><span class="hl num">27</span><span class="hl opt">,</span><span class="hl str">&quot;./race.js&quot;</span><span class="hl opt">:</span><span class="hl num">29</span><span class="hl opt">,</span><span class="hl str">&quot;./reduce.js&quot;</span><span class="hl opt">:</span><span class="hl num">30</span><span class="hl opt">,</span><span class="hl str">&quot;./settle.js&quot;</span><span class="hl opt">:</span><span class="hl num">32</span><span class="hl opt">,</span><span class="hl str">&quot;./some.js&quot;</span><span class="hl opt">:</span><span class="hl num">33</span><span class="hl opt">,</span><span class="hl str">&quot;./synchronous_inspection.js&quot;</span><span class="hl opt">:</span><span class="hl num">34</span><span class="hl opt">,</span><span class="hl str">&quot;./thenables.js&quot;</span><span class="hl opt">:</span><span class="hl num">35</span><span class="hl opt">,</span><span class="hl str">&quot;./timers.js&quot;</span><span class="hl opt">:</span><span class="hl num">36</span><span class="hl opt">,</span><span class="hl str">&quot;./using.js&quot;</span><span class="hl opt">:</span><span class="hl num">37</span><span class="hl opt">,</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">:</span><span class="hl num">38</span><span class="hl opt">}],</span><span class="hl num">24</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>_dereq_<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl str">&quot;use strict&quot;</span><span class="hl opt">;</span>
module<span class="hl opt">.</span><span class="hl kwd">exports</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>Promise<span class="hl opt">,</span> INTERNAL<span class="hl opt">,</span> tryConvertToPromise<span class="hl opt">,</span>
    apiRejection<span class="hl opt">) {</span>
<span class="hl kwa">var</span> util <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> isArray <span class="hl opt">=</span> util<span class="hl opt">.</span>isArray<span class="hl opt">;</span>

<span class="hl kwa">function</span> <span class="hl kwd">toResolutionValue</span><span class="hl opt">(</span>val<span class="hl opt">) {</span>
    <span class="hl kwa">switch</span><span class="hl opt">(</span>val<span class="hl opt">) {</span>
    <span class="hl kwa">case</span> <span class="hl opt">-</span><span class="hl num">2</span><span class="hl opt">:</span> <span class="hl kwa">return</span> <span class="hl opt">[];</span>
    <span class="hl kwa">case</span> <span class="hl opt">-</span><span class="hl num">3</span><span class="hl opt">:</span> <span class="hl kwa">return</span> <span class="hl opt">{};</span>
    <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">PromiseArray</span><span class="hl opt">(</span>values<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> promise <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_promise <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Promise</span><span class="hl opt">(</span>INTERNAL<span class="hl opt">);</span>
    <span class="hl kwa">var</span> parent<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>values <span class="hl kwa">instanceof</span> Promise<span class="hl opt">) {</span>
        parent <span class="hl opt">=</span> values<span class="hl opt">;</span>
        promise<span class="hl opt">.</span><span class="hl kwd">_propagateFrom</span><span class="hl opt">(</span>parent<span class="hl opt">,</span> <span class="hl num">1</span> <span class="hl opt">|</span> <span class="hl num">4</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_values <span class="hl opt">=</span> values<span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_length <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_totalResolved <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_init</span><span class="hl opt">(</span>undefined<span class="hl opt">, -</span><span class="hl num">2</span><span class="hl opt">);</span>
<span class="hl opt">}</span>
PromiseArray<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">length</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span>_length<span class="hl opt">;</span>
<span class="hl opt">};</span>

PromiseArray<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">promise</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span>_promise<span class="hl opt">;</span>
<span class="hl opt">};</span>

PromiseArray<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_init <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">init</span><span class="hl opt">(</span>_<span class="hl opt">,</span> resolveValueIfEmpty<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> values <span class="hl opt">=</span> <span class="hl kwd">tryConvertToPromise</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>_values<span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_promise<span class="hl opt">);</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>values <span class="hl kwa">instanceof</span> Promise<span class="hl opt">) {</span>
        values <span class="hl opt">=</span> values<span class="hl opt">.</span><span class="hl kwd">_target</span><span class="hl opt">();</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>_values <span class="hl opt">=</span> values<span class="hl opt">;</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>values<span class="hl opt">.</span><span class="hl kwd">_isFulfilled</span><span class="hl opt">()) {</span>
            values <span class="hl opt">=</span> values<span class="hl opt">.</span><span class="hl kwd">_value</span><span class="hl opt">();</span>
            <span class="hl kwa">if</span> <span class="hl opt">(!</span><span class="hl kwd">isArray</span><span class="hl opt">(</span>values<span class="hl opt">)) {</span>
                <span class="hl kwa">var</span> err <span class="hl opt">=</span> <span class="hl kwa">new</span> Promise<span class="hl opt">.</span><span class="hl kwd">TypeError</span><span class="hl opt">(</span><span class="hl str">&quot;expecting an array, a promise or a thenable</span><span class="hl esc">\u000a\u000a</span>    <span class="hl str">See http://goo.gl/s8MMhc</span><span class="hl esc">\u000a</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
                <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">__hardReject__</span><span class="hl opt">(</span>err<span class="hl opt">);</span>
                <span class="hl kwa">return</span><span class="hl opt">;</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>values<span class="hl opt">.</span><span class="hl kwd">_isPending</span><span class="hl opt">()) {</span>
            values<span class="hl opt">.</span><span class="hl kwd">_then</span><span class="hl opt">(</span>
                init<span class="hl opt">,</span>
                <span class="hl kwa">this</span><span class="hl opt">.</span>_reject<span class="hl opt">,</span>
                undefined<span class="hl opt">,</span>
                <span class="hl kwa">this</span><span class="hl opt">,</span>
                resolveValueIfEmpty
           <span class="hl opt">);</span>
            <span class="hl kwa">return</span><span class="hl opt">;</span>
        <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
            <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_reject</span><span class="hl opt">(</span>values<span class="hl opt">.</span><span class="hl kwd">_reason</span><span class="hl opt">());</span>
            <span class="hl kwa">return</span><span class="hl opt">;</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(!</span><span class="hl kwd">isArray</span><span class="hl opt">(</span>values<span class="hl opt">)) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>_promise<span class="hl opt">.</span><span class="hl kwd">_reject</span><span class="hl opt">(</span><span class="hl kwd">apiRejection</span><span class="hl opt">(</span><span class="hl str">&quot;expecting an array, a promise or a thenable</span><span class="hl esc">\u000a\u000a</span>    <span class="hl str">See http://goo.gl/s8MMhc</span><span class="hl esc">\u000a</span><span class="hl str">&quot;</span><span class="hl opt">).</span><span class="hl kwd">_reason</span><span class="hl opt">());</span>
        <span class="hl kwa">return</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>values<span class="hl opt">.</span>length <span class="hl opt">===</span> <span class="hl num">0</span><span class="hl opt">) {</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>resolveValueIfEmpty <span class="hl opt">=== -</span><span class="hl num">5</span><span class="hl opt">) {</span>
            <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_resolveEmptyArray</span><span class="hl opt">();</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">else</span> <span class="hl opt">{</span>
            <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_resolve</span><span class="hl opt">(</span><span class="hl kwd">toResolutionValue</span><span class="hl opt">(</span>resolveValueIfEmpty<span class="hl opt">));</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">return</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">var</span> len <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">getActualLength</span><span class="hl opt">(</span>values<span class="hl opt">.</span>length<span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_length <span class="hl opt">=</span> len<span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_values <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">shouldCopyValues</span><span class="hl opt">() ?</span> <span class="hl kwa">new</span> <span class="hl kwd">Array</span><span class="hl opt">(</span>len<span class="hl opt">) :</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_values<span class="hl opt">;</span>
    <span class="hl kwa">var</span> promise <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_promise<span class="hl opt">;</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> len<span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
        <span class="hl kwa">var</span> isResolved <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_isResolved</span><span class="hl opt">();</span>
        <span class="hl kwa">var</span> maybePromise <span class="hl opt">=</span> <span class="hl kwd">tryConvertToPromise</span><span class="hl opt">(</span>values<span class="hl opt">[</span>i<span class="hl opt">],</span> promise<span class="hl opt">);</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>maybePromise <span class="hl kwa">instanceof</span> Promise<span class="hl opt">) {</span>
            maybePromise <span class="hl opt">=</span> maybePromise<span class="hl opt">.</span><span class="hl kwd">_target</span><span class="hl opt">();</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>isResolved<span class="hl opt">) {</span>
                maybePromise<span class="hl opt">.</span><span class="hl kwd">_ignoreRejections</span><span class="hl opt">();</span>
            <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>maybePromise<span class="hl opt">.</span><span class="hl kwd">_isPending</span><span class="hl opt">()) {</span>
                maybePromise<span class="hl opt">.</span><span class="hl kwd">_proxyPromiseArray</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> i<span class="hl opt">);</span>
            <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>maybePromise<span class="hl opt">.</span><span class="hl kwd">_isFulfilled</span><span class="hl opt">()) {</span>
                <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_promiseFulfilled</span><span class="hl opt">(</span>maybePromise<span class="hl opt">.</span><span class="hl kwd">_value</span><span class="hl opt">(),</span> i<span class="hl opt">);</span>
            <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
                <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_promiseRejected</span><span class="hl opt">(</span>maybePromise<span class="hl opt">.</span><span class="hl kwd">_reason</span><span class="hl opt">(),</span> i<span class="hl opt">);</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(!</span>isResolved<span class="hl opt">) {</span>
            <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_promiseFulfilled</span><span class="hl opt">(</span>maybePromise<span class="hl opt">,</span> i<span class="hl opt">);</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>
<span class="hl opt">};</span>

PromiseArray<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_isResolved</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span>_values <span class="hl opt">===</span> <span class="hl kwa">null</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

PromiseArray<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_resolve</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>value<span class="hl opt">) {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_values <span class="hl opt">=</span> <span class="hl kwa">null</span><span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_promise<span class="hl opt">.</span><span class="hl kwd">_fulfill</span><span class="hl opt">(</span>value<span class="hl opt">);</span>
<span class="hl opt">};</span>

PromiseArray<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>__hardReject__ <span class="hl opt">=</span>
PromiseArray<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_reject</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>reason<span class="hl opt">) {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_values <span class="hl opt">=</span> <span class="hl kwa">null</span><span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_promise<span class="hl opt">.</span><span class="hl kwd">_rejectCallback</span><span class="hl opt">(</span>reason<span class="hl opt">,</span> <span class="hl kwa">false</span><span class="hl opt">,</span> <span class="hl kwa">true</span><span class="hl opt">);</span>
<span class="hl opt">};</span>

PromiseArray<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_promiseProgressed</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>progressValue<span class="hl opt">,</span> index<span class="hl opt">) {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_promise<span class="hl opt">.</span><span class="hl kwd">_progress</span><span class="hl opt">({</span>
        index<span class="hl opt">:</span> index<span class="hl opt">,</span>
        value<span class="hl opt">:</span> progressValue
    <span class="hl opt">});</span>
<span class="hl opt">};</span>


PromiseArray<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_promiseFulfilled</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>value<span class="hl opt">,</span> index<span class="hl opt">) {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_values<span class="hl opt">[</span>index<span class="hl opt">] =</span> value<span class="hl opt">;</span>
    <span class="hl kwa">var</span> totalResolved <span class="hl opt">= ++</span><span class="hl kwa">this</span><span class="hl opt">.</span>_totalResolved<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>totalResolved <span class="hl opt">&gt;=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_length<span class="hl opt">) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_resolve</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>_values<span class="hl opt">);</span>
    <span class="hl opt">}</span>
<span class="hl opt">};</span>

PromiseArray<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_promiseRejected</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>reason<span class="hl opt">,</span> index<span class="hl opt">) {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_totalResolved<span class="hl opt">++;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_reject</span><span class="hl opt">(</span>reason<span class="hl opt">);</span>
<span class="hl opt">};</span>

PromiseArray<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">shouldCopyValues</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return true</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

PromiseArray<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">getActualLength</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>len<span class="hl opt">) {</span>
    <span class="hl kwa">return</span> len<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl kwa">return</span> PromiseArray<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl opt">},{</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">:</span><span class="hl num">38</span><span class="hl opt">}],</span><span class="hl num">25</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>_dereq_<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl str">&quot;use strict&quot;</span><span class="hl opt">;</span>
<span class="hl kwa">var</span> util <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> maybeWrapAsError <span class="hl opt">=</span> util<span class="hl opt">.</span>maybeWrapAsError<span class="hl opt">;</span>
<span class="hl kwa">var</span> errors <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./errors.js&quot;</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> TimeoutError <span class="hl opt">=</span> errors<span class="hl opt">.</span>TimeoutError<span class="hl opt">;</span>
<span class="hl kwa">var</span> OperationalError <span class="hl opt">=</span> errors<span class="hl opt">.</span>OperationalError<span class="hl opt">;</span>
<span class="hl kwa">var</span> haveGetters <span class="hl opt">=</span> util<span class="hl opt">.</span>haveGetters<span class="hl opt">;</span>
<span class="hl kwa">var</span> es5 <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./es5.js&quot;</span><span class="hl opt">);</span>

<span class="hl kwa">function</span> <span class="hl kwd">isUntypedError</span><span class="hl opt">(</span>obj<span class="hl opt">) {</span>
    <span class="hl kwa">return</span> obj <span class="hl kwa">instanceof</span> Error <span class="hl opt">&amp;&amp;</span>
        es5<span class="hl opt">.</span><span class="hl kwd">getPrototypeOf</span><span class="hl opt">(</span>obj<span class="hl opt">) ===</span> Error<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwa">var</span> rErrorKey <span class="hl opt">=</span> <span class="hl kwc">/^(?:name|message|stack|cause)$/</span><span class="hl opt">;</span>
<span class="hl kwa">function</span> <span class="hl kwd">wrapAsOperationalError</span><span class="hl opt">(</span>obj<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> ret<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">isUntypedError</span><span class="hl opt">(</span>obj<span class="hl opt">)) {</span>
        ret <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">OperationalError</span><span class="hl opt">(</span>obj<span class="hl opt">);</span>
        ret<span class="hl opt">.</span>name <span class="hl opt">=</span> obj<span class="hl opt">.</span>name<span class="hl opt">;</span>
        ret<span class="hl opt">.</span>message <span class="hl opt">=</span> obj<span class="hl opt">.</span>message<span class="hl opt">;</span>
        ret<span class="hl opt">.</span>stack <span class="hl opt">=</span> obj<span class="hl opt">.</span>stack<span class="hl opt">;</span>
        <span class="hl kwa">var</span> keys <span class="hl opt">=</span> es5<span class="hl opt">.</span><span class="hl kwd">keys</span><span class="hl opt">(</span>obj<span class="hl opt">);</span>
        <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> keys<span class="hl opt">.</span>length<span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
            <span class="hl kwa">var</span> key <span class="hl opt">=</span> keys<span class="hl opt">[</span>i<span class="hl opt">];</span>
            <span class="hl kwa">if</span> <span class="hl opt">(!</span>rErrorKey<span class="hl opt">.</span><span class="hl kwd">test</span><span class="hl opt">(</span>key<span class="hl opt">)) {</span>
                ret<span class="hl opt">[</span>key<span class="hl opt">] =</span> obj<span class="hl opt">[</span>key<span class="hl opt">];</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">return</span> ret<span class="hl opt">;</span>
    <span class="hl opt">}</span>
    util<span class="hl opt">.</span><span class="hl kwd">markAsOriginatingFromRejection</span><span class="hl opt">(</span>obj<span class="hl opt">);</span>
    <span class="hl kwa">return</span> obj<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">nodebackForPromise</span><span class="hl opt">(</span>promise<span class="hl opt">) {</span>
    <span class="hl kwa">return function</span><span class="hl opt">(</span>err<span class="hl opt">,</span> value<span class="hl opt">) {</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>promise <span class="hl opt">===</span> <span class="hl kwa">null</span><span class="hl opt">)</span> <span class="hl kwa">return</span><span class="hl opt">;</span>

        <span class="hl kwa">if</span> <span class="hl opt">(</span>err<span class="hl opt">) {</span>
            <span class="hl kwa">var</span> wrapped <span class="hl opt">=</span> <span class="hl kwd">wrapAsOperationalError</span><span class="hl opt">(</span><span class="hl kwd">maybeWrapAsError</span><span class="hl opt">(</span>err<span class="hl opt">));</span>
            promise<span class="hl opt">.</span><span class="hl kwd">_attachExtraTrace</span><span class="hl opt">(</span>wrapped<span class="hl opt">);</span>
            promise<span class="hl opt">.</span><span class="hl kwd">_reject</span><span class="hl opt">(</span>wrapped<span class="hl opt">);</span>
        <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>arguments<span class="hl opt">.</span>length <span class="hl opt">&gt;</span> <span class="hl num">2</span><span class="hl opt">) {</span>
            <span class="hl kwa">var</span> <span class="hl opt">$</span>_len <span class="hl opt">=</span> arguments<span class="hl opt">.</span>length<span class="hl opt">;</span><span class="hl kwa">var</span> args <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Array</span><span class="hl opt">($</span>_len <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">);</span> <span class="hl kwa">for</span><span class="hl opt">(</span><span class="hl kwa">var</span> <span class="hl opt">$</span>_i <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">; $</span>_i <span class="hl opt">&lt; $</span>_len<span class="hl opt">; ++$</span>_i<span class="hl opt">) {</span>args<span class="hl opt">[$</span>_i <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">] =</span> arguments<span class="hl opt">[$</span>_i<span class="hl opt">];}</span>
            promise<span class="hl opt">.</span><span class="hl kwd">_fulfill</span><span class="hl opt">(</span>args<span class="hl opt">);</span>
        <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
            promise<span class="hl opt">.</span><span class="hl kwd">_fulfill</span><span class="hl opt">(</span>value<span class="hl opt">);</span>
        <span class="hl opt">}</span>

        promise <span class="hl opt">=</span> <span class="hl kwa">null</span><span class="hl opt">;</span>
    <span class="hl opt">};</span>
<span class="hl opt">}</span>


<span class="hl kwa">var</span> PromiseResolver<span class="hl opt">;</span>
<span class="hl kwa">if</span> <span class="hl opt">(!</span>haveGetters<span class="hl opt">) {</span>
    <span class="hl kwd">PromiseResolver</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>promise<span class="hl opt">) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>promise <span class="hl opt">=</span> promise<span class="hl opt">;</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>asCallback <span class="hl opt">=</span> <span class="hl kwd">nodebackForPromise</span><span class="hl opt">(</span>promise<span class="hl opt">);</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>callback <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>asCallback<span class="hl opt">;</span>
    <span class="hl opt">};</span>
<span class="hl opt">}</span>
<span class="hl kwa">else</span> <span class="hl opt">{</span>
    <span class="hl kwd">PromiseResolver</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>promise<span class="hl opt">) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>promise <span class="hl opt">=</span> promise<span class="hl opt">;</span>
    <span class="hl opt">};</span>
<span class="hl opt">}</span>
<span class="hl kwa">if</span> <span class="hl opt">(</span>haveGetters<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> prop <span class="hl opt">= {</span>
        <span class="hl kwa">get</span><span class="hl opt">:</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
            <span class="hl kwa">return</span> <span class="hl kwd">nodebackForPromise</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>promise<span class="hl opt">);</span>
        <span class="hl opt">}</span>
    <span class="hl opt">};</span>
    es5<span class="hl opt">.</span><span class="hl kwd">defineProperty</span><span class="hl opt">(</span>PromiseResolver<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">,</span> <span class="hl str">&quot;asCallback&quot;</span><span class="hl opt">,</span> prop<span class="hl opt">);</span>
    es5<span class="hl opt">.</span><span class="hl kwd">defineProperty</span><span class="hl opt">(</span>PromiseResolver<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">,</span> <span class="hl str">&quot;callback&quot;</span><span class="hl opt">,</span> prop<span class="hl opt">);</span>
<span class="hl opt">}</span>

PromiseResolver<span class="hl opt">.</span>_nodebackForPromise <span class="hl opt">=</span> nodebackForPromise<span class="hl opt">;</span>

PromiseResolver<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">toString</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return</span> <span class="hl str">&quot;[object PromiseResolver]&quot;</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

PromiseResolver<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>resolve <span class="hl opt">=</span>
PromiseResolver<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">fulfill</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>value<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!(</span><span class="hl kwa">this instanceof</span> PromiseResolver<span class="hl opt">)) {</span>
        <span class="hl kwa">throw new</span> <span class="hl kwd">TypeError</span><span class="hl opt">(</span><span class="hl str">&quot;Illegal invocation, resolver resolve/reject must be called within a resolver context. Consider using the promise constructor instead.</span><span class="hl esc">\u000a\u000a</span>    <span class="hl str">See http://goo.gl/sdkXL9</span><span class="hl esc">\u000a</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>promise<span class="hl opt">.</span><span class="hl kwd">_resolveCallback</span><span class="hl opt">(</span>value<span class="hl opt">);</span>
<span class="hl opt">};</span>

PromiseResolver<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">reject</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>reason<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!(</span><span class="hl kwa">this instanceof</span> PromiseResolver<span class="hl opt">)) {</span>
        <span class="hl kwa">throw new</span> <span class="hl kwd">TypeError</span><span class="hl opt">(</span><span class="hl str">&quot;Illegal invocation, resolver resolve/reject must be called within a resolver context. Consider using the promise constructor instead.</span><span class="hl esc">\u000a\u000a</span>    <span class="hl str">See http://goo.gl/sdkXL9</span><span class="hl esc">\u000a</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>promise<span class="hl opt">.</span><span class="hl kwd">_rejectCallback</span><span class="hl opt">(</span>reason<span class="hl opt">);</span>
<span class="hl opt">};</span>

PromiseResolver<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">progress</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>value<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!(</span><span class="hl kwa">this instanceof</span> PromiseResolver<span class="hl opt">)) {</span>
        <span class="hl kwa">throw new</span> <span class="hl kwd">TypeError</span><span class="hl opt">(</span><span class="hl str">&quot;Illegal invocation, resolver resolve/reject must be called within a resolver context. Consider using the promise constructor instead.</span><span class="hl esc">\u000a\u000a</span>    <span class="hl str">See http://goo.gl/sdkXL9</span><span class="hl esc">\u000a</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>promise<span class="hl opt">.</span><span class="hl kwd">_progress</span><span class="hl opt">(</span>value<span class="hl opt">);</span>
<span class="hl opt">};</span>

PromiseResolver<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">cancel</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>err<span class="hl opt">) {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>promise<span class="hl opt">.</span><span class="hl kwd">cancel</span><span class="hl opt">(</span>err<span class="hl opt">);</span>
<span class="hl opt">};</span>

PromiseResolver<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">timeout</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">reject</span><span class="hl opt">(</span><span class="hl kwa">new</span> <span class="hl kwd">TimeoutError</span><span class="hl opt">(</span><span class="hl str">&quot;timeout&quot;</span><span class="hl opt">));</span>
<span class="hl opt">};</span>

PromiseResolver<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">isResolved</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span>promise<span class="hl opt">.</span><span class="hl kwd">isResolved</span><span class="hl opt">();</span>
<span class="hl opt">};</span>

PromiseResolver<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">toJSON</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span>promise<span class="hl opt">.</span><span class="hl kwd">toJSON</span><span class="hl opt">();</span>
<span class="hl opt">};</span>

module<span class="hl opt">.</span>exports <span class="hl opt">=</span> PromiseResolver<span class="hl opt">;</span>

<span class="hl opt">},{</span><span class="hl str">&quot;./errors.js&quot;</span><span class="hl opt">:</span><span class="hl num">13</span><span class="hl opt">,</span><span class="hl str">&quot;./es5.js&quot;</span><span class="hl opt">:</span><span class="hl num">14</span><span class="hl opt">,</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">:</span><span class="hl num">38</span><span class="hl opt">}],</span><span class="hl num">26</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>_dereq_<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl str">&quot;use strict&quot;</span><span class="hl opt">;</span>
module<span class="hl opt">.</span><span class="hl kwd">exports</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>Promise<span class="hl opt">,</span> INTERNAL<span class="hl opt">) {</span>
<span class="hl kwa">var</span> THIS <span class="hl opt">= {};</span>
<span class="hl kwa">var</span> util <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> nodebackForPromise <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./promise_resolver.js&quot;</span><span class="hl opt">)</span>
    <span class="hl opt">.</span>_nodebackForPromise<span class="hl opt">;</span>
<span class="hl kwa">var</span> withAppended <span class="hl opt">=</span> util<span class="hl opt">.</span>withAppended<span class="hl opt">;</span>
<span class="hl kwa">var</span> maybeWrapAsError <span class="hl opt">=</span> util<span class="hl opt">.</span>maybeWrapAsError<span class="hl opt">;</span>
<span class="hl kwa">var</span> canEvaluate <span class="hl opt">=</span> util<span class="hl opt">.</span>canEvaluate<span class="hl opt">;</span>
<span class="hl kwa">var</span> TypeError <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./errors&quot;</span><span class="hl opt">).</span>TypeError<span class="hl opt">;</span>
<span class="hl kwa">var</span> defaultSuffix <span class="hl opt">=</span> <span class="hl str">&quot;Async&quot;</span><span class="hl opt">;</span>
<span class="hl kwa">var</span> defaultPromisified <span class="hl opt">= {</span>__isPromisified__<span class="hl opt">:</span> <span class="hl kwa">true</span><span class="hl opt">};</span>
<span class="hl kwa">var</span> noCopyProps <span class="hl opt">= [</span>
    <span class="hl str">&quot;arity&quot;</span><span class="hl opt">,</span>    <span class="hl str">&quot;length&quot;</span><span class="hl opt">,</span>
    <span class="hl str">&quot;name&quot;</span><span class="hl opt">,</span>
    <span class="hl str">&quot;arguments&quot;</span><span class="hl opt">,</span>
    <span class="hl str">&quot;caller&quot;</span><span class="hl opt">,</span>
    <span class="hl str">&quot;callee&quot;</span><span class="hl opt">,</span>
    <span class="hl str">&quot;prototype&quot;</span><span class="hl opt">,</span>
    <span class="hl str">&quot;__isPromisified__&quot;</span>
<span class="hl opt">];</span>
<span class="hl kwa">var</span> noCopyPropsPattern <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">RegExp</span><span class="hl opt">(</span><span class="hl str">&quot;^(?:&quot;</span> <span class="hl opt">+</span> noCopyProps<span class="hl opt">.</span><span class="hl kwd">join</span><span class="hl opt">(</span><span class="hl str">&quot;|&quot;</span><span class="hl opt">) +</span> <span class="hl str">&quot;)$&quot;</span><span class="hl opt">);</span>

<span class="hl kwa">var</span> <span class="hl kwd">defaultFilter</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>name<span class="hl opt">) {</span>
    <span class="hl kwa">return</span> util<span class="hl opt">.</span><span class="hl kwd">isIdentifier</span><span class="hl opt">(</span>name<span class="hl opt">) &amp;&amp;</span>
        name<span class="hl opt">.</span><span class="hl kwd">charAt</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">) !==</span> <span class="hl str">&quot;_&quot;</span> <span class="hl opt">&amp;&amp;</span>
        name <span class="hl opt">!==</span> <span class="hl str">&quot;constructor&quot;</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl kwa">function</span> <span class="hl kwd">propsFilter</span><span class="hl opt">(</span>key<span class="hl opt">) {</span>
    <span class="hl kwa">return</span> <span class="hl opt">!</span>noCopyPropsPattern<span class="hl opt">.</span><span class="hl kwd">test</span><span class="hl opt">(</span>key<span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">isPromisified</span><span class="hl opt">(</span>fn<span class="hl opt">) {</span>
    <span class="hl kwa">try</span> <span class="hl opt">{</span>
        <span class="hl kwa">return</span> fn<span class="hl opt">.</span>__isPromisified__ <span class="hl opt">===</span> <span class="hl kwa">true</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">catch</span> <span class="hl opt">(</span>e<span class="hl opt">) {</span>
        <span class="hl kwa">return false</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">hasPromisified</span><span class="hl opt">(</span>obj<span class="hl opt">,</span> key<span class="hl opt">,</span> suffix<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> val <span class="hl opt">=</span> util<span class="hl opt">.</span><span class="hl kwd">getDataPropertyOrDefault</span><span class="hl opt">(</span>obj<span class="hl opt">,</span> key <span class="hl opt">+</span> suffix<span class="hl opt">,</span>
                                            defaultPromisified<span class="hl opt">);</span>
    <span class="hl kwa">return</span> val <span class="hl opt">?</span> <span class="hl kwd">isPromisified</span><span class="hl opt">(</span>val<span class="hl opt">) :</span> <span class="hl kwa">false</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
<span class="hl kwa">function</span> <span class="hl kwd">checkValid</span><span class="hl opt">(</span>ret<span class="hl opt">,</span> suffix<span class="hl opt">,</span> suffixRegexp<span class="hl opt">) {</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> ret<span class="hl opt">.</span>length<span class="hl opt">;</span> i <span class="hl opt">+=</span> <span class="hl num">2</span><span class="hl opt">) {</span>
        <span class="hl kwa">var</span> key <span class="hl opt">=</span> ret<span class="hl opt">[</span>i<span class="hl opt">];</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>suffixRegexp<span class="hl opt">.</span><span class="hl kwd">test</span><span class="hl opt">(</span>key<span class="hl opt">)) {</span>
            <span class="hl kwa">var</span> keyWithoutAsyncSuffix <span class="hl opt">=</span> key<span class="hl opt">.</span><span class="hl kwd">replace</span><span class="hl opt">(</span>suffixRegexp<span class="hl opt">,</span> <span class="hl str">&quot;&quot;</span><span class="hl opt">);</span>
            <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> j <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> j <span class="hl opt">&lt;</span> ret<span class="hl opt">.</span>length<span class="hl opt">;</span> j <span class="hl opt">+=</span> <span class="hl num">2</span><span class="hl opt">) {</span>
                <span class="hl kwa">if</span> <span class="hl opt">(</span>ret<span class="hl opt">[</span>j<span class="hl opt">] ===</span> keyWithoutAsyncSuffix<span class="hl opt">) {</span>
                    <span class="hl kwa">throw new</span> <span class="hl kwd">TypeError</span><span class="hl opt">(</span><span class="hl str">&quot;Cannot promisify an API that has normal methods with '%s'-suffix</span><span class="hl esc">\u000a\u000a</span>    <span class="hl str">See http://goo.gl/iWrZbw</span><span class="hl esc">\u000a</span><span class="hl str">&quot;</span>
                        <span class="hl opt">.</span><span class="hl kwd">replace</span><span class="hl opt">(</span><span class="hl str">&quot;%s&quot;</span><span class="hl opt">,</span> suffix<span class="hl opt">));</span>
                <span class="hl opt">}</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">promisifiableMethods</span><span class="hl opt">(</span>obj<span class="hl opt">,</span> suffix<span class="hl opt">,</span> suffixRegexp<span class="hl opt">,</span> filter<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> keys <span class="hl opt">=</span> util<span class="hl opt">.</span><span class="hl kwd">inheritedDataKeys</span><span class="hl opt">(</span>obj<span class="hl opt">);</span>
    <span class="hl kwa">var</span> ret <span class="hl opt">= [];</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> keys<span class="hl opt">.</span>length<span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
        <span class="hl kwa">var</span> key <span class="hl opt">=</span> keys<span class="hl opt">[</span>i<span class="hl opt">];</span>
        <span class="hl kwa">var</span> value <span class="hl opt">=</span> obj<span class="hl opt">[</span>key<span class="hl opt">];</span>
        <span class="hl kwa">var</span> passesDefaultFilter <span class="hl opt">=</span> filter <span class="hl opt">===</span> defaultFilter
            <span class="hl opt">?</span> <span class="hl kwa">true</span> <span class="hl opt">:</span> <span class="hl kwd">defaultFilter</span><span class="hl opt">(</span>key<span class="hl opt">,</span> value<span class="hl opt">,</span> obj<span class="hl opt">);</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> value <span class="hl opt">===</span> <span class="hl str">&quot;function&quot;</span> <span class="hl opt">&amp;&amp;</span>
            <span class="hl opt">!</span><span class="hl kwd">isPromisified</span><span class="hl opt">(</span>value<span class="hl opt">) &amp;&amp;</span>
            <span class="hl opt">!</span><span class="hl kwd">hasPromisified</span><span class="hl opt">(</span>obj<span class="hl opt">,</span> key<span class="hl opt">,</span> suffix<span class="hl opt">) &amp;&amp;</span>
            <span class="hl kwd">filter</span><span class="hl opt">(</span>key<span class="hl opt">,</span> value<span class="hl opt">,</span> obj<span class="hl opt">,</span> passesDefaultFilter<span class="hl opt">)) {</span>
            ret<span class="hl opt">.</span><span class="hl kwd">push</span><span class="hl opt">(</span>key<span class="hl opt">,</span> value<span class="hl opt">);</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>
    <span class="hl kwd">checkValid</span><span class="hl opt">(</span>ret<span class="hl opt">,</span> suffix<span class="hl opt">,</span> suffixRegexp<span class="hl opt">);</span>
    <span class="hl kwa">return</span> ret<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwa">var</span> <span class="hl kwd">escapeIdentRegex</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>str<span class="hl opt">) {</span>
    <span class="hl kwa">return</span> str<span class="hl opt">.</span><span class="hl kwd">replace</span><span class="hl opt">(</span><span class="hl kwc">/([$])/</span><span class="hl opt">,</span> <span class="hl str">&quot;</span><span class="hl esc">\\</span><span class="hl str">$&quot;</span><span class="hl opt">);</span>
<span class="hl opt">};</span>

<span class="hl kwa">var</span> makeNodePromisifiedEval<span class="hl opt">;</span>
<span class="hl kwa">if</span> <span class="hl opt">(!</span><span class="hl kwa">true</span><span class="hl opt">) {</span>
<span class="hl kwa">var</span> <span class="hl kwd">switchCaseArgumentOrder</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>likelyArgumentCount<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> ret <span class="hl opt">= [</span>likelyArgumentCount<span class="hl opt">];</span>
    <span class="hl kwa">var</span> min <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">max</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> likelyArgumentCount <span class="hl opt">-</span> <span class="hl num">1</span> <span class="hl opt">-</span> <span class="hl num">3</span><span class="hl opt">);</span>
    <span class="hl kwa">for</span><span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> likelyArgumentCount <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span> i <span class="hl opt">&gt;=</span> min<span class="hl opt">; --</span>i<span class="hl opt">) {</span>
        ret<span class="hl opt">.</span><span class="hl kwd">push</span><span class="hl opt">(</span>i<span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">for</span><span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> likelyArgumentCount <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span> i <span class="hl opt">&lt;=</span> <span class="hl num">3</span><span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
        ret<span class="hl opt">.</span><span class="hl kwd">push</span><span class="hl opt">(</span>i<span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return</span> ret<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl kwa">var</span> <span class="hl kwd">argumentSequence</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>argumentCount<span class="hl opt">) {</span>
    <span class="hl kwa">return</span> util<span class="hl opt">.</span><span class="hl kwd">filledRange</span><span class="hl opt">(</span>argumentCount<span class="hl opt">,</span> <span class="hl str">&quot;_arg&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;&quot;</span><span class="hl opt">);</span>
<span class="hl opt">};</span>

<span class="hl kwa">var</span> <span class="hl kwd">parameterDeclaration</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>parameterCount<span class="hl opt">) {</span>
    <span class="hl kwa">return</span> util<span class="hl opt">.</span><span class="hl kwd">filledRange</span><span class="hl opt">(</span>
        Math<span class="hl opt">.</span><span class="hl kwd">max</span><span class="hl opt">(</span>parameterCount<span class="hl opt">,</span> <span class="hl num">3</span><span class="hl opt">),</span> <span class="hl str">&quot;_arg&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;&quot;</span><span class="hl opt">);</span>
<span class="hl opt">};</span>

<span class="hl kwa">var</span> <span class="hl kwd">parameterCount</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>fn<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> fn<span class="hl opt">.</span>length <span class="hl opt">===</span> <span class="hl str">&quot;number&quot;</span><span class="hl opt">) {</span>
        <span class="hl kwa">return</span> Math<span class="hl opt">.</span><span class="hl kwd">max</span><span class="hl opt">(</span>Math<span class="hl opt">.</span><span class="hl kwd">min</span><span class="hl opt">(</span>fn<span class="hl opt">.</span>length<span class="hl opt">,</span> <span class="hl num">1023</span> <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">),</span> <span class="hl num">0</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

makeNodePromisifiedEval <span class="hl opt">=</span>
<span class="hl kwa">function</span><span class="hl opt">(</span>callback<span class="hl opt">,</span> receiver<span class="hl opt">,</span> originalName<span class="hl opt">,</span> fn<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> newParameterCount <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">max</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl kwd">parameterCount</span><span class="hl opt">(</span>fn<span class="hl opt">) -</span> <span class="hl num">1</span><span class="hl opt">);</span>
    <span class="hl kwa">var</span> argumentOrder <span class="hl opt">=</span> <span class="hl kwd">switchCaseArgumentOrder</span><span class="hl opt">(</span>newParameterCount<span class="hl opt">);</span>
    <span class="hl kwa">var</span> shouldProxyThis <span class="hl opt">=</span> <span class="hl kwa">typeof</span> callback <span class="hl opt">===</span> <span class="hl str">&quot;string&quot;</span> <span class="hl opt">||</span> receiver <span class="hl opt">===</span> THIS<span class="hl opt">;</span>

    <span class="hl kwa">function</span> <span class="hl kwd">generateCallForArgumentCount</span><span class="hl opt">(</span>count<span class="hl opt">) {</span>
        <span class="hl kwa">var</span> args <span class="hl opt">=</span> <span class="hl kwd">argumentSequence</span><span class="hl opt">(</span>count<span class="hl opt">).</span><span class="hl kwd">join</span><span class="hl opt">(</span><span class="hl str">&quot;, &quot;</span><span class="hl opt">);</span>
        <span class="hl kwa">var</span> comma <span class="hl opt">=</span> count <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl opt">?</span> <span class="hl str">&quot;, &quot;</span> <span class="hl opt">:</span> <span class="hl str">&quot;&quot;</span><span class="hl opt">;</span>
        <span class="hl kwa">var</span> ret<span class="hl opt">;</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>shouldProxyThis<span class="hl opt">) {</span>
            ret <span class="hl opt">=</span> <span class="hl str">&quot;ret = callback.call(this, {{args}}, nodeback); break;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">;</span>
        <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
            ret <span class="hl opt">=</span> receiver <span class="hl opt">===</span> undefined
                <span class="hl opt">?</span> <span class="hl str">&quot;ret = callback({{args}}, nodeback); break;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>
                <span class="hl opt">:</span> <span class="hl str">&quot;ret = callback.call(receiver, {{args}}, nodeback); break;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">;</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">return</span> ret<span class="hl opt">.</span><span class="hl kwd">replace</span><span class="hl opt">(</span><span class="hl str">&quot;{{args}}&quot;</span><span class="hl opt">,</span> args<span class="hl opt">).</span><span class="hl kwd">replace</span><span class="hl opt">(</span><span class="hl str">&quot;, &quot;</span><span class="hl opt">,</span> comma<span class="hl opt">);</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">function</span> <span class="hl kwd">generateArgumentSwitchCase</span><span class="hl opt">() {</span>
        <span class="hl kwa">var</span> ret <span class="hl opt">=</span> <span class="hl str">&quot;&quot;</span><span class="hl opt">;</span>
        <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> argumentOrder<span class="hl opt">.</span>length<span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
            ret <span class="hl opt">+=</span> <span class="hl str">&quot;case &quot;</span> <span class="hl opt">+</span> argumentOrder<span class="hl opt">[</span>i<span class="hl opt">] +</span><span class="hl str">&quot;:&quot;</span> <span class="hl opt">+</span>
                <span class="hl kwd">generateCallForArgumentCount</span><span class="hl opt">(</span>argumentOrder<span class="hl opt">[</span>i<span class="hl opt">]);</span>
        <span class="hl opt">}</span>

        ret <span class="hl opt">+=</span> <span class="hl str">&quot;</span>                                                             <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">        default:</span>                                                             <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">            var args = new Array(len + 1);</span>                                   <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">            var i = 0;</span>                                                       <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">            for (var i = 0; i &lt; len; ++i) {</span>                                  <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">               args[i] = arguments[i];</span>                                       <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">            }</span>                                                                <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">            args[i] = nodeback;</span>                                              <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">            [CodeForCall]</span>                                                    <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">            break;</span>                                                           <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">        &quot;</span><span class="hl opt">.</span><span class="hl kwd">replace</span><span class="hl opt">(</span><span class="hl str">&quot;[CodeForCall]&quot;</span><span class="hl opt">, (</span>shouldProxyThis
                                <span class="hl opt">?</span> <span class="hl str">&quot;ret = callback.apply(this, args);</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>
                                <span class="hl opt">:</span> <span class="hl str">&quot;ret = callback.apply(receiver, args);</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">));</span>
        <span class="hl kwa">return</span> ret<span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">var</span> getFunctionCode <span class="hl opt">=</span> <span class="hl kwa">typeof</span> callback <span class="hl opt">===</span> <span class="hl str">&quot;string&quot;</span>
                                <span class="hl opt">? (</span><span class="hl str">&quot;this != null ? this['&quot;</span><span class="hl opt">+</span>callback<span class="hl opt">+</span><span class="hl str">&quot;'] : fn&quot;</span><span class="hl opt">)</span>
                                <span class="hl opt">:</span> <span class="hl str">&quot;fn&quot;</span><span class="hl opt">;</span>

    <span class="hl kwa">return new</span> <span class="hl kwd">Function</span><span class="hl opt">(</span><span class="hl str">&quot;Promise&quot;</span><span class="hl opt">,</span>
                        <span class="hl str">&quot;fn&quot;</span><span class="hl opt">,</span>
                        <span class="hl str">&quot;receiver&quot;</span><span class="hl opt">,</span>
                        <span class="hl str">&quot;withAppended&quot;</span><span class="hl opt">,</span>
                        <span class="hl str">&quot;maybeWrapAsError&quot;</span><span class="hl opt">,</span>
                        <span class="hl str">&quot;nodebackForPromise&quot;</span><span class="hl opt">,</span>
                        <span class="hl str">&quot;tryCatch&quot;</span><span class="hl opt">,</span>
                        <span class="hl str">&quot;errorObj&quot;</span><span class="hl opt">,</span>
                        <span class="hl str">&quot;notEnumerableProp&quot;</span><span class="hl opt">,</span>
                        <span class="hl str">&quot;INTERNAL&quot;</span><span class="hl opt">,</span><span class="hl str">&quot;'use strict';</span>                            <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">        var ret = function (Parameters) {</span>                                    <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">            'use strict';</span>                                                    <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">            var len = arguments.length;</span>                                      <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">            var promise = new Promise(INTERNAL);</span>                             <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">            promise._captureStackTrace();</span>                                    <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">            var nodeback = nodebackForPromise(promise);</span>                      <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">            var ret;</span>                                                         <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">            var callback = tryCatch([GetFunctionCode]);</span>                      <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">            switch(len) {</span>                                                    <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">                [CodeForSwitchCase]</span>                                          <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">            }</span>                                                                <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">            if (ret === errorObj) {</span>                                          <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">                promise._rejectCallback(maybeWrapAsError(ret.e), true, true);</span><span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">            }</span>                                                                <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">            return promise;</span>                                                  <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">        };</span>                                                                   <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">        notEnumerableProp(ret, '__isPromisified__', true);</span>                   <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">        return ret;</span>                                                          <span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">        &quot;</span>
        <span class="hl opt">.</span><span class="hl kwd">replace</span><span class="hl opt">(</span><span class="hl str">&quot;Parameters&quot;</span><span class="hl opt">,</span> <span class="hl kwd">parameterDeclaration</span><span class="hl opt">(</span>newParameterCount<span class="hl opt">))</span>
        <span class="hl opt">.</span><span class="hl kwd">replace</span><span class="hl opt">(</span><span class="hl str">&quot;[CodeForSwitchCase]&quot;</span><span class="hl opt">,</span> <span class="hl kwd">generateArgumentSwitchCase</span><span class="hl opt">())</span>
        <span class="hl opt">.</span><span class="hl kwd">replace</span><span class="hl opt">(</span><span class="hl str">&quot;[GetFunctionCode]&quot;</span><span class="hl opt">,</span> getFunctionCode<span class="hl opt">))(</span>
            Promise<span class="hl opt">,</span>
            fn<span class="hl opt">,</span>
            receiver<span class="hl opt">,</span>
            withAppended<span class="hl opt">,</span>
            maybeWrapAsError<span class="hl opt">,</span>
            nodebackForPromise<span class="hl opt">,</span>
            util<span class="hl opt">.</span>tryCatch<span class="hl opt">,</span>
            util<span class="hl opt">.</span>errorObj<span class="hl opt">,</span>
            util<span class="hl opt">.</span>notEnumerableProp<span class="hl opt">,</span>
            INTERNAL
        <span class="hl opt">);</span>
<span class="hl opt">};</span>
<span class="hl opt">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">makeNodePromisifiedClosure</span><span class="hl opt">(</span>callback<span class="hl opt">,</span> receiver<span class="hl opt">,</span> _<span class="hl opt">,</span> fn<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> defaultThis <span class="hl opt">= (</span><span class="hl kwa">function</span><span class="hl opt">() {</span><span class="hl kwa">return this</span><span class="hl opt">;})();</span>
    <span class="hl kwa">var</span> method <span class="hl opt">=</span> callback<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> method <span class="hl opt">===</span> <span class="hl str">&quot;string&quot;</span><span class="hl opt">) {</span>
        callback <span class="hl opt">=</span> fn<span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">function</span> <span class="hl kwd">promisified</span><span class="hl opt">() {</span>
        <span class="hl kwa">var</span> _receiver <span class="hl opt">=</span> receiver<span class="hl opt">;</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>receiver <span class="hl opt">===</span> THIS<span class="hl opt">)</span> _receiver <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">;</span>
        <span class="hl kwa">var</span> promise <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Promise</span><span class="hl opt">(</span>INTERNAL<span class="hl opt">);</span>
        promise<span class="hl opt">.</span><span class="hl kwd">_captureStackTrace</span><span class="hl opt">();</span>
        <span class="hl kwa">var</span> cb <span class="hl opt">=</span> <span class="hl kwa">typeof</span> method <span class="hl opt">===</span> <span class="hl str">&quot;string&quot;</span> <span class="hl opt">&amp;&amp;</span> <span class="hl kwa">this</span> <span class="hl opt">!==</span> defaultThis
            <span class="hl opt">?</span> <span class="hl kwa">this</span><span class="hl opt">[</span>method<span class="hl opt">] :</span> callback<span class="hl opt">;</span>
        <span class="hl kwa">var</span> fn <span class="hl opt">=</span> <span class="hl kwd">nodebackForPromise</span><span class="hl opt">(</span>promise<span class="hl opt">);</span>
        <span class="hl kwa">try</span> <span class="hl opt">{</span>
            cb<span class="hl opt">.</span><span class="hl kwd">apply</span><span class="hl opt">(</span>_receiver<span class="hl opt">,</span> <span class="hl kwd">withAppended</span><span class="hl opt">(</span>arguments<span class="hl opt">,</span> fn<span class="hl opt">));</span>
        <span class="hl opt">}</span> <span class="hl kwa">catch</span><span class="hl opt">(</span>e<span class="hl opt">) {</span>
            promise<span class="hl opt">.</span><span class="hl kwd">_rejectCallback</span><span class="hl opt">(</span><span class="hl kwd">maybeWrapAsError</span><span class="hl opt">(</span>e<span class="hl opt">),</span> <span class="hl kwa">true</span><span class="hl opt">,</span> <span class="hl kwa">true</span><span class="hl opt">);</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">return</span> promise<span class="hl opt">;</span>
    <span class="hl opt">}</span>
    util<span class="hl opt">.</span><span class="hl kwd">notEnumerableProp</span><span class="hl opt">(</span>promisified<span class="hl opt">,</span> <span class="hl str">&quot;__isPromisified__&quot;</span><span class="hl opt">,</span> <span class="hl kwa">true</span><span class="hl opt">);</span>
    <span class="hl kwa">return</span> promisified<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwa">var</span> makeNodePromisified <span class="hl opt">=</span> canEvaluate
    <span class="hl opt">?</span> makeNodePromisifiedEval
    <span class="hl opt">:</span> makeNodePromisifiedClosure<span class="hl opt">;</span>

<span class="hl kwa">function</span> <span class="hl kwd">promisifyAll</span><span class="hl opt">(</span>obj<span class="hl opt">,</span> suffix<span class="hl opt">,</span> filter<span class="hl opt">,</span> promisifier<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> suffixRegexp <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">RegExp</span><span class="hl opt">(</span><span class="hl kwd">escapeIdentRegex</span><span class="hl opt">(</span>suffix<span class="hl opt">) +</span> <span class="hl str">&quot;$&quot;</span><span class="hl opt">);</span>
    <span class="hl kwa">var</span> methods <span class="hl opt">=</span>
        <span class="hl kwd">promisifiableMethods</span><span class="hl opt">(</span>obj<span class="hl opt">,</span> suffix<span class="hl opt">,</span> suffixRegexp<span class="hl opt">,</span> filter<span class="hl opt">);</span>

    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> len <span class="hl opt">=</span> methods<span class="hl opt">.</span>length<span class="hl opt">;</span> i <span class="hl opt">&lt;</span> len<span class="hl opt">;</span> i<span class="hl opt">+=</span> <span class="hl num">2</span><span class="hl opt">) {</span>
        <span class="hl kwa">var</span> key <span class="hl opt">=</span> methods<span class="hl opt">[</span>i<span class="hl opt">];</span>
        <span class="hl kwa">var</span> fn <span class="hl opt">=</span> methods<span class="hl opt">[</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">];</span>
        <span class="hl kwa">var</span> promisifiedKey <span class="hl opt">=</span> key <span class="hl opt">+</span> suffix<span class="hl opt">;</span>
        obj<span class="hl opt">[</span>promisifiedKey<span class="hl opt">] =</span> promisifier <span class="hl opt">===</span> makeNodePromisified
                <span class="hl opt">?</span> <span class="hl kwd">makeNodePromisified</span><span class="hl opt">(</span>key<span class="hl opt">,</span> THIS<span class="hl opt">,</span> key<span class="hl opt">,</span> fn<span class="hl opt">,</span> suffix<span class="hl opt">)</span>
                <span class="hl opt">:</span> <span class="hl kwd">promisifier</span><span class="hl opt">(</span>fn<span class="hl opt">,</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
                    <span class="hl kwa">return</span> <span class="hl kwd">makeNodePromisified</span><span class="hl opt">(</span>key<span class="hl opt">,</span> THIS<span class="hl opt">,</span> key<span class="hl opt">,</span> fn<span class="hl opt">,</span> suffix<span class="hl opt">);</span>
                <span class="hl opt">});</span>
    <span class="hl opt">}</span>
    util<span class="hl opt">.</span><span class="hl kwd">toFastProperties</span><span class="hl opt">(</span>obj<span class="hl opt">);</span>
    <span class="hl kwa">return</span> obj<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">promisify</span><span class="hl opt">(</span>callback<span class="hl opt">,</span> receiver<span class="hl opt">) {</span>
    <span class="hl kwa">return</span> <span class="hl kwd">makeNodePromisified</span><span class="hl opt">(</span>callback<span class="hl opt">,</span> receiver<span class="hl opt">,</span> undefined<span class="hl opt">,</span> callback<span class="hl opt">);</span>
<span class="hl opt">}</span>

Promise<span class="hl opt">.</span><span class="hl kwd">promisify</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>fn<span class="hl opt">,</span> receiver<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> fn <span class="hl opt">!==</span> <span class="hl str">&quot;function&quot;</span><span class="hl opt">) {</span>
        <span class="hl kwa">throw new</span> <span class="hl kwd">TypeError</span><span class="hl opt">(</span><span class="hl str">&quot;fn must be a function</span><span class="hl esc">\u000a\u000a</span>    <span class="hl str">See http://goo.gl/916lJJ</span><span class="hl esc">\u000a</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">isPromisified</span><span class="hl opt">(</span>fn<span class="hl opt">)) {</span>
        <span class="hl kwa">return</span> fn<span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">var</span> ret <span class="hl opt">=</span> <span class="hl kwd">promisify</span><span class="hl opt">(</span>fn<span class="hl opt">,</span> arguments<span class="hl opt">.</span>length <span class="hl opt">&lt;</span> <span class="hl num">2</span> <span class="hl opt">?</span> THIS <span class="hl opt">:</span> receiver<span class="hl opt">);</span>
    util<span class="hl opt">.</span><span class="hl kwd">copyDescriptors</span><span class="hl opt">(</span>fn<span class="hl opt">,</span> ret<span class="hl opt">,</span> propsFilter<span class="hl opt">);</span>
    <span class="hl kwa">return</span> ret<span class="hl opt">;</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwd">promisifyAll</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>target<span class="hl opt">,</span> options<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> target <span class="hl opt">!==</span> <span class="hl str">&quot;function&quot;</span> <span class="hl opt">&amp;&amp;</span> <span class="hl kwa">typeof</span> target <span class="hl opt">!==</span> <span class="hl str">&quot;object&quot;</span><span class="hl opt">) {</span>
        <span class="hl kwa">throw new</span> <span class="hl kwd">TypeError</span><span class="hl opt">(</span><span class="hl str">&quot;the target of promisifyAll must be an object or a function</span><span class="hl esc">\u000a\u000a</span>    <span class="hl str">See http://goo.gl/9ITlV0</span><span class="hl esc">\u000a</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
    options <span class="hl opt">=</span> <span class="hl kwd">Object</span><span class="hl opt">(</span>options<span class="hl opt">);</span>
    <span class="hl kwa">var</span> suffix <span class="hl opt">=</span> options<span class="hl opt">.</span>suffix<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> suffix <span class="hl opt">!==</span> <span class="hl str">&quot;string&quot;</span><span class="hl opt">)</span> suffix <span class="hl opt">=</span> defaultSuffix<span class="hl opt">;</span>
    <span class="hl kwa">var</span> filter <span class="hl opt">=</span> options<span class="hl opt">.</span>filter<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> filter <span class="hl opt">!==</span> <span class="hl str">&quot;function&quot;</span><span class="hl opt">)</span> filter <span class="hl opt">=</span> defaultFilter<span class="hl opt">;</span>
    <span class="hl kwa">var</span> promisifier <span class="hl opt">=</span> options<span class="hl opt">.</span>promisifier<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> promisifier <span class="hl opt">!==</span> <span class="hl str">&quot;function&quot;</span><span class="hl opt">)</span> promisifier <span class="hl opt">=</span> makeNodePromisified<span class="hl opt">;</span>

    <span class="hl kwa">if</span> <span class="hl opt">(!</span>util<span class="hl opt">.</span><span class="hl kwd">isIdentifier</span><span class="hl opt">(</span>suffix<span class="hl opt">)) {</span>
        <span class="hl kwa">throw new</span> <span class="hl kwd">RangeError</span><span class="hl opt">(</span><span class="hl str">&quot;suffix must be a valid identifier</span><span class="hl esc">\u000a\u000a</span>    <span class="hl str">See http://goo.gl/8FZo5V</span><span class="hl esc">\u000a</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">var</span> keys <span class="hl opt">=</span> util<span class="hl opt">.</span><span class="hl kwd">inheritedDataKeys</span><span class="hl opt">(</span>target<span class="hl opt">);</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> keys<span class="hl opt">.</span>length<span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
        <span class="hl kwa">var</span> value <span class="hl opt">=</span> target<span class="hl opt">[</span>keys<span class="hl opt">[</span>i<span class="hl opt">]];</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>keys<span class="hl opt">[</span>i<span class="hl opt">] !==</span> <span class="hl str">&quot;constructor&quot;</span> <span class="hl opt">&amp;&amp;</span>
            util<span class="hl opt">.</span><span class="hl kwd">isClass</span><span class="hl opt">(</span>value<span class="hl opt">)) {</span>
            <span class="hl kwd">promisifyAll</span><span class="hl opt">(</span>value<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">,</span> suffix<span class="hl opt">,</span> filter<span class="hl opt">,</span> promisifier<span class="hl opt">);</span>
            <span class="hl kwd">promisifyAll</span><span class="hl opt">(</span>value<span class="hl opt">,</span> suffix<span class="hl opt">,</span> filter<span class="hl opt">,</span> promisifier<span class="hl opt">);</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">return</span> <span class="hl kwd">promisifyAll</span><span class="hl opt">(</span>target<span class="hl opt">,</span> suffix<span class="hl opt">,</span> filter<span class="hl opt">,</span> promisifier<span class="hl opt">);</span>
<span class="hl opt">};</span>
<span class="hl opt">};</span>


<span class="hl opt">},{</span><span class="hl str">&quot;./errors&quot;</span><span class="hl opt">:</span><span class="hl num">13</span><span class="hl opt">,</span><span class="hl str">&quot;./promise_resolver.js&quot;</span><span class="hl opt">:</span><span class="hl num">25</span><span class="hl opt">,</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">:</span><span class="hl num">38</span><span class="hl opt">}],</span><span class="hl num">27</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>_dereq_<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl str">&quot;use strict&quot;</span><span class="hl opt">;</span>
module<span class="hl opt">.</span><span class="hl kwd">exports</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>
    Promise<span class="hl opt">,</span> PromiseArray<span class="hl opt">,</span> tryConvertToPromise<span class="hl opt">,</span> apiRejection<span class="hl opt">) {</span>
<span class="hl kwa">var</span> util <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> isObject <span class="hl opt">=</span> util<span class="hl opt">.</span>isObject<span class="hl opt">;</span>
<span class="hl kwa">var</span> es5 <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./es5.js&quot;</span><span class="hl opt">);</span>

<span class="hl kwa">function</span> <span class="hl kwd">PropertiesPromiseArray</span><span class="hl opt">(</span>obj<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> keys <span class="hl opt">=</span> es5<span class="hl opt">.</span><span class="hl kwd">keys</span><span class="hl opt">(</span>obj<span class="hl opt">);</span>
    <span class="hl kwa">var</span> len <span class="hl opt">=</span> keys<span class="hl opt">.</span>length<span class="hl opt">;</span>
    <span class="hl kwa">var</span> values <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Array</span><span class="hl opt">(</span>len <span class="hl opt">*</span> <span class="hl num">2</span><span class="hl opt">);</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> len<span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
        <span class="hl kwa">var</span> key <span class="hl opt">=</span> keys<span class="hl opt">[</span>i<span class="hl opt">];</span>
        values<span class="hl opt">[</span>i<span class="hl opt">] =</span> obj<span class="hl opt">[</span>key<span class="hl opt">];</span>
        values<span class="hl opt">[</span>i <span class="hl opt">+</span> len<span class="hl opt">] =</span> key<span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>constructor<span class="hl opt">$(</span>values<span class="hl opt">);</span>
<span class="hl opt">}</span>
util<span class="hl opt">.</span><span class="hl kwd">inherits</span><span class="hl opt">(</span>PropertiesPromiseArray<span class="hl opt">,</span> PromiseArray<span class="hl opt">);</span>

PropertiesPromiseArray<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_init</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_init<span class="hl opt">$(</span>undefined<span class="hl opt">, -</span><span class="hl num">3</span><span class="hl opt">) ;</span>
<span class="hl opt">};</span>

PropertiesPromiseArray<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_promiseFulfilled</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>value<span class="hl opt">,</span> index<span class="hl opt">) {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_values<span class="hl opt">[</span>index<span class="hl opt">] =</span> value<span class="hl opt">;</span>
    <span class="hl kwa">var</span> totalResolved <span class="hl opt">= ++</span><span class="hl kwa">this</span><span class="hl opt">.</span>_totalResolved<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>totalResolved <span class="hl opt">&gt;=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_length<span class="hl opt">) {</span>
        <span class="hl kwa">var</span> val <span class="hl opt">= {};</span>
        <span class="hl kwa">var</span> keyOffset <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">();</span>
        <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> len <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">();</span> i <span class="hl opt">&lt;</span> len<span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
            val<span class="hl opt">[</span><span class="hl kwa">this</span><span class="hl opt">.</span>_values<span class="hl opt">[</span>i <span class="hl opt">+</span> keyOffset<span class="hl opt">]] =</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_values<span class="hl opt">[</span>i<span class="hl opt">];</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_resolve</span><span class="hl opt">(</span>val<span class="hl opt">);</span>
    <span class="hl opt">}</span>
<span class="hl opt">};</span>

PropertiesPromiseArray<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_promiseProgressed</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>value<span class="hl opt">,</span> index<span class="hl opt">) {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_promise<span class="hl opt">.</span><span class="hl kwd">_progress</span><span class="hl opt">({</span>
        key<span class="hl opt">:</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_values<span class="hl opt">[</span>index <span class="hl opt">+</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">()],</span>
        value<span class="hl opt">:</span> value
    <span class="hl opt">});</span>
<span class="hl opt">};</span>

PropertiesPromiseArray<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">shouldCopyValues</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return false</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

PropertiesPromiseArray<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">getActualLength</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>len<span class="hl opt">) {</span>
    <span class="hl kwa">return</span> len <span class="hl opt">&gt;&gt;</span> <span class="hl num">1</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl kwa">function</span> <span class="hl kwd">props</span><span class="hl opt">(</span>promises<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> ret<span class="hl opt">;</span>
    <span class="hl kwa">var</span> castValue <span class="hl opt">=</span> <span class="hl kwd">tryConvertToPromise</span><span class="hl opt">(</span>promises<span class="hl opt">);</span>

    <span class="hl kwa">if</span> <span class="hl opt">(!</span><span class="hl kwd">isObject</span><span class="hl opt">(</span>castValue<span class="hl opt">)) {</span>
        <span class="hl kwa">return</span> <span class="hl kwd">apiRejection</span><span class="hl opt">(</span><span class="hl str">&quot;cannot await properties of a non-object</span><span class="hl esc">\u000a\u000a</span>    <span class="hl str">See http://goo.gl/OsFKC8</span><span class="hl esc">\u000a</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
    <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>castValue <span class="hl kwa">instanceof</span> Promise<span class="hl opt">) {</span>
        ret <span class="hl opt">=</span> castValue<span class="hl opt">.</span><span class="hl kwd">_then</span><span class="hl opt">(</span>
            Promise<span class="hl opt">.</span>props<span class="hl opt">,</span> undefined<span class="hl opt">,</span> undefined<span class="hl opt">,</span> undefined<span class="hl opt">,</span> undefined<span class="hl opt">);</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
        ret <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">PropertiesPromiseArray</span><span class="hl opt">(</span>castValue<span class="hl opt">).</span><span class="hl kwd">promise</span><span class="hl opt">();</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>castValue <span class="hl kwa">instanceof</span> Promise<span class="hl opt">) {</span>
        ret<span class="hl opt">.</span><span class="hl kwd">_propagateFrom</span><span class="hl opt">(</span>castValue<span class="hl opt">,</span> <span class="hl num">4</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return</span> ret<span class="hl opt">;</span>
<span class="hl opt">}</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">props</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return</span> <span class="hl kwd">props</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">);</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwd">props</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>promises<span class="hl opt">) {</span>
    <span class="hl kwa">return</span> <span class="hl kwd">props</span><span class="hl opt">(</span>promises<span class="hl opt">);</span>
<span class="hl opt">};</span>
<span class="hl opt">};</span>

<span class="hl opt">},{</span><span class="hl str">&quot;./es5.js&quot;</span><span class="hl opt">:</span><span class="hl num">14</span><span class="hl opt">,</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">:</span><span class="hl num">38</span><span class="hl opt">}],</span><span class="hl num">28</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>_dereq_<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl str">&quot;use strict&quot;</span><span class="hl opt">;</span>
<span class="hl kwa">function</span> <span class="hl kwd">arrayMove</span><span class="hl opt">(</span>src<span class="hl opt">,</span> srcIndex<span class="hl opt">,</span> dst<span class="hl opt">,</span> dstIndex<span class="hl opt">,</span> len<span class="hl opt">) {</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> j <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> j <span class="hl opt">&lt;</span> len<span class="hl opt">; ++</span>j<span class="hl opt">) {</span>
        dst<span class="hl opt">[</span>j <span class="hl opt">+</span> dstIndex<span class="hl opt">] =</span> src<span class="hl opt">[</span>j <span class="hl opt">+</span> srcIndex<span class="hl opt">];</span>
        src<span class="hl opt">[</span>j <span class="hl opt">+</span> srcIndex<span class="hl opt">] =</span> <span class="hl kwa">void</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">Queue</span><span class="hl opt">(</span>capacity<span class="hl opt">) {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_capacity <span class="hl opt">=</span> capacity<span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_length <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_front <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

Queue<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_willBeOverCapacity</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>size<span class="hl opt">) {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span>_capacity <span class="hl opt">&lt;</span> size<span class="hl opt">;</span>
<span class="hl opt">};</span>

Queue<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_pushOne</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>arg<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> length <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">();</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_checkCapacity</span><span class="hl opt">(</span>length <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">);</span>
    <span class="hl kwa">var</span> i <span class="hl opt">= (</span><span class="hl kwa">this</span><span class="hl opt">.</span>_front <span class="hl opt">+</span> length<span class="hl opt">) &amp; (</span><span class="hl kwa">this</span><span class="hl opt">.</span>_capacity <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">[</span>i<span class="hl opt">] =</span> arg<span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_length <span class="hl opt">=</span> length <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

Queue<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_unshiftOne</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>value<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> capacity <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_capacity<span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_checkCapacity</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">() +</span> <span class="hl num">1</span><span class="hl opt">);</span>
    <span class="hl kwa">var</span> front <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_front<span class="hl opt">;</span>
    <span class="hl kwa">var</span> i <span class="hl opt">= ((((</span> front <span class="hl opt">-</span> <span class="hl num">1</span> <span class="hl opt">) &amp;</span>
                    <span class="hl opt">(</span> capacity <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">) ) ^</span> capacity <span class="hl opt">) -</span> capacity <span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">[</span>i<span class="hl opt">] =</span> value<span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_front <span class="hl opt">=</span> i<span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_length <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">() +</span> <span class="hl num">1</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

Queue<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">unshift</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>fn<span class="hl opt">,</span> receiver<span class="hl opt">,</span> arg<span class="hl opt">) {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_unshiftOne</span><span class="hl opt">(</span>arg<span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_unshiftOne</span><span class="hl opt">(</span>receiver<span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_unshiftOne</span><span class="hl opt">(</span>fn<span class="hl opt">);</span>
<span class="hl opt">};</span>

Queue<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">push</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>fn<span class="hl opt">,</span> receiver<span class="hl opt">,</span> arg<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> length <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">() +</span> <span class="hl num">3</span><span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_willBeOverCapacity</span><span class="hl opt">(</span>length<span class="hl opt">)) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_pushOne</span><span class="hl opt">(</span>fn<span class="hl opt">);</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_pushOne</span><span class="hl opt">(</span>receiver<span class="hl opt">);</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_pushOne</span><span class="hl opt">(</span>arg<span class="hl opt">);</span>
        <span class="hl kwa">return</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">var</span> j <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_front <span class="hl opt">+</span> length <span class="hl opt">-</span> <span class="hl num">3</span><span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_checkCapacity</span><span class="hl opt">(</span>length<span class="hl opt">);</span>
    <span class="hl kwa">var</span> wrapMask <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_capacity <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">[(</span>j <span class="hl opt">+</span> <span class="hl num">0</span><span class="hl opt">) &amp;</span> wrapMask<span class="hl opt">] =</span> fn<span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">[(</span>j <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">) &amp;</span> wrapMask<span class="hl opt">] =</span> receiver<span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">[(</span>j <span class="hl opt">+</span> <span class="hl num">2</span><span class="hl opt">) &amp;</span> wrapMask<span class="hl opt">] =</span> arg<span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_length <span class="hl opt">=</span> length<span class="hl opt">;</span>
<span class="hl opt">};</span>

Queue<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">shift</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">var</span> front <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_front<span class="hl opt">,</span>
        ret <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">[</span>front<span class="hl opt">];</span>

    <span class="hl kwa">this</span><span class="hl opt">[</span>front<span class="hl opt">] =</span> undefined<span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_front <span class="hl opt">= (</span>front <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">) &amp; (</span><span class="hl kwa">this</span><span class="hl opt">.</span>_capacity <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_length<span class="hl opt">--;</span>
    <span class="hl kwa">return</span> ret<span class="hl opt">;</span>
<span class="hl opt">};</span>

Queue<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">length</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span>_length<span class="hl opt">;</span>
<span class="hl opt">};</span>

Queue<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_checkCapacity</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>size<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>_capacity <span class="hl opt">&lt;</span> size<span class="hl opt">) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_resizeTo</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>_capacity <span class="hl opt">&lt;&lt;</span> <span class="hl num">1</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
<span class="hl opt">};</span>

Queue<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_resizeTo</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>capacity<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> oldCapacity <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_capacity<span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_capacity <span class="hl opt">=</span> capacity<span class="hl opt">;</span>
    <span class="hl kwa">var</span> front <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_front<span class="hl opt">;</span>
    <span class="hl kwa">var</span> length <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_length<span class="hl opt">;</span>
    <span class="hl kwa">var</span> moveItemsCount <span class="hl opt">= (</span>front <span class="hl opt">+</span> length<span class="hl opt">) &amp; (</span>oldCapacity <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">);</span>
    <span class="hl kwd">arrayMove</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">,</span> oldCapacity<span class="hl opt">,</span> moveItemsCount<span class="hl opt">);</span>
<span class="hl opt">};</span>

module<span class="hl opt">.</span>exports <span class="hl opt">=</span> Queue<span class="hl opt">;</span>

<span class="hl opt">},{}],</span><span class="hl num">29</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>_dereq_<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl str">&quot;use strict&quot;</span><span class="hl opt">;</span>
module<span class="hl opt">.</span><span class="hl kwd">exports</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>
    Promise<span class="hl opt">,</span> INTERNAL<span class="hl opt">,</span> tryConvertToPromise<span class="hl opt">,</span> apiRejection<span class="hl opt">) {</span>
<span class="hl kwa">var</span> isArray <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">).</span>isArray<span class="hl opt">;</span>

<span class="hl kwa">var</span> <span class="hl kwd">raceLater</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>promise<span class="hl opt">) {</span>
    <span class="hl kwa">return</span> promise<span class="hl opt">.</span><span class="hl kwd">then</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">(</span>array<span class="hl opt">) {</span>
        <span class="hl kwa">return</span> <span class="hl kwd">race</span><span class="hl opt">(</span>array<span class="hl opt">,</span> promise<span class="hl opt">);</span>
    <span class="hl opt">});</span>
<span class="hl opt">};</span>

<span class="hl kwa">function</span> <span class="hl kwd">race</span><span class="hl opt">(</span>promises<span class="hl opt">,</span> parent<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> maybePromise <span class="hl opt">=</span> <span class="hl kwd">tryConvertToPromise</span><span class="hl opt">(</span>promises<span class="hl opt">);</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>maybePromise <span class="hl kwa">instanceof</span> Promise<span class="hl opt">) {</span>
        <span class="hl kwa">return</span> <span class="hl kwd">raceLater</span><span class="hl opt">(</span>maybePromise<span class="hl opt">);</span>
    <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(!</span><span class="hl kwd">isArray</span><span class="hl opt">(</span>promises<span class="hl opt">)) {</span>
        <span class="hl kwa">return</span> <span class="hl kwd">apiRejection</span><span class="hl opt">(</span><span class="hl str">&quot;expecting an array, a promise or a thenable</span><span class="hl esc">\u000a\u000a</span>    <span class="hl str">See http://goo.gl/s8MMhc</span><span class="hl esc">\u000a</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">var</span> ret <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Promise</span><span class="hl opt">(</span>INTERNAL<span class="hl opt">);</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>parent <span class="hl opt">!==</span> undefined<span class="hl opt">) {</span>
        ret<span class="hl opt">.</span><span class="hl kwd">_propagateFrom</span><span class="hl opt">(</span>parent<span class="hl opt">,</span> <span class="hl num">4</span> <span class="hl opt">|</span> <span class="hl num">1</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">var</span> fulfill <span class="hl opt">=</span> ret<span class="hl opt">.</span>_fulfill<span class="hl opt">;</span>
    <span class="hl kwa">var</span> reject <span class="hl opt">=</span> ret<span class="hl opt">.</span>_reject<span class="hl opt">;</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> len <span class="hl opt">=</span> promises<span class="hl opt">.</span>length<span class="hl opt">;</span> i <span class="hl opt">&lt;</span> len<span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
        <span class="hl kwa">var</span> val <span class="hl opt">=</span> promises<span class="hl opt">[</span>i<span class="hl opt">];</span>

        <span class="hl kwa">if</span> <span class="hl opt">(</span>val <span class="hl opt">===</span> undefined <span class="hl opt">&amp;&amp; !(</span>i <span class="hl kwa">in</span> promises<span class="hl opt">)) {</span>
            <span class="hl kwa">continue</span><span class="hl opt">;</span>
        <span class="hl opt">}</span>

        Promise<span class="hl opt">.</span><span class="hl kwd">cast</span><span class="hl opt">(</span>val<span class="hl opt">).</span><span class="hl kwd">_then</span><span class="hl opt">(</span>fulfill<span class="hl opt">,</span> reject<span class="hl opt">,</span> undefined<span class="hl opt">,</span> ret<span class="hl opt">,</span> <span class="hl kwa">null</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return</span> ret<span class="hl opt">;</span>
<span class="hl opt">}</span>

Promise<span class="hl opt">.</span><span class="hl kwd">race</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>promises<span class="hl opt">) {</span>
    <span class="hl kwa">return</span> <span class="hl kwd">race</span><span class="hl opt">(</span>promises<span class="hl opt">,</span> undefined<span class="hl opt">);</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">race</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return</span> <span class="hl kwd">race</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> undefined<span class="hl opt">);</span>
<span class="hl opt">};</span>

<span class="hl opt">};</span>

<span class="hl opt">},{</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">:</span><span class="hl num">38</span><span class="hl opt">}],</span><span class="hl num">30</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>_dereq_<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl str">&quot;use strict&quot;</span><span class="hl opt">;</span>
module<span class="hl opt">.</span><span class="hl kwd">exports</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>Promise<span class="hl opt">,</span>
                          PromiseArray<span class="hl opt">,</span>
                          apiRejection<span class="hl opt">,</span>
                          tryConvertToPromise<span class="hl opt">,</span>
                          INTERNAL<span class="hl opt">) {</span>
<span class="hl kwa">var</span> getDomain <span class="hl opt">=</span> Promise<span class="hl opt">.</span>_getDomain<span class="hl opt">;</span>
<span class="hl kwa">var</span> async <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./async.js&quot;</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> util <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> tryCatch <span class="hl opt">=</span> util<span class="hl opt">.</span>tryCatch<span class="hl opt">;</span>
<span class="hl kwa">var</span> errorObj <span class="hl opt">=</span> util<span class="hl opt">.</span>errorObj<span class="hl opt">;</span>
<span class="hl kwa">function</span> <span class="hl kwd">ReductionPromiseArray</span><span class="hl opt">(</span>promises<span class="hl opt">,</span> fn<span class="hl opt">,</span> accum<span class="hl opt">,</span> _each<span class="hl opt">) {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>constructor<span class="hl opt">$(</span>promises<span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_promise<span class="hl opt">.</span><span class="hl kwd">_captureStackTrace</span><span class="hl opt">();</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_preservedValues <span class="hl opt">=</span> _each <span class="hl opt">===</span> INTERNAL <span class="hl opt">? [] :</span> <span class="hl kwa">null</span><span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_zerothIsAccum <span class="hl opt">= (</span>accum <span class="hl opt">===</span> undefined<span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_gotAccum <span class="hl opt">=</span> <span class="hl kwa">false</span><span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_reducingIndex <span class="hl opt">= (</span><span class="hl kwa">this</span><span class="hl opt">.</span>_zerothIsAccum <span class="hl opt">?</span> <span class="hl num">1</span> <span class="hl opt">:</span> <span class="hl num">0</span><span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_valuesPhase <span class="hl opt">=</span> undefined<span class="hl opt">;</span>
    <span class="hl kwa">var</span> maybePromise <span class="hl opt">=</span> <span class="hl kwd">tryConvertToPromise</span><span class="hl opt">(</span>accum<span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_promise<span class="hl opt">);</span>
    <span class="hl kwa">var</span> rejected <span class="hl opt">=</span> <span class="hl kwa">false</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> isPromise <span class="hl opt">=</span> maybePromise <span class="hl kwa">instanceof</span> Promise<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>isPromise<span class="hl opt">) {</span>
        maybePromise <span class="hl opt">=</span> maybePromise<span class="hl opt">.</span><span class="hl kwd">_target</span><span class="hl opt">();</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>maybePromise<span class="hl opt">.</span><span class="hl kwd">_isPending</span><span class="hl opt">()) {</span>
            maybePromise<span class="hl opt">.</span><span class="hl kwd">_proxyPromiseArray</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">, -</span><span class="hl num">1</span><span class="hl opt">);</span>
        <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>maybePromise<span class="hl opt">.</span><span class="hl kwd">_isFulfilled</span><span class="hl opt">()) {</span>
            accum <span class="hl opt">=</span> maybePromise<span class="hl opt">.</span><span class="hl kwd">_value</span><span class="hl opt">();</span>
            <span class="hl kwa">this</span><span class="hl opt">.</span>_gotAccum <span class="hl opt">=</span> <span class="hl kwa">true</span><span class="hl opt">;</span>
        <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
            <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_reject</span><span class="hl opt">(</span>maybePromise<span class="hl opt">.</span><span class="hl kwd">_reason</span><span class="hl opt">());</span>
            rejected <span class="hl opt">=</span> <span class="hl kwa">true</span><span class="hl opt">;</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!(</span>isPromise <span class="hl opt">||</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_zerothIsAccum<span class="hl opt">))</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_gotAccum <span class="hl opt">=</span> <span class="hl kwa">true</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> domain <span class="hl opt">=</span> <span class="hl kwd">getDomain</span><span class="hl opt">();</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_callback <span class="hl opt">=</span> domain <span class="hl opt">===</span> <span class="hl kwa">null</span> <span class="hl opt">?</span> fn <span class="hl opt">:</span> domain<span class="hl opt">.</span><span class="hl kwd">bind</span><span class="hl opt">(</span>fn<span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_accum <span class="hl opt">=</span> accum<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!</span>rejected<span class="hl opt">)</span> async<span class="hl opt">.</span><span class="hl kwd">invoke</span><span class="hl opt">(</span>init<span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">,</span> undefined<span class="hl opt">);</span>
<span class="hl opt">}</span>
<span class="hl kwa">function</span> <span class="hl kwd">init</span><span class="hl opt">() {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_init<span class="hl opt">$(</span>undefined<span class="hl opt">, -</span><span class="hl num">5</span><span class="hl opt">);</span>
<span class="hl opt">}</span>
util<span class="hl opt">.</span><span class="hl kwd">inherits</span><span class="hl opt">(</span>ReductionPromiseArray<span class="hl opt">,</span> PromiseArray<span class="hl opt">);</span>

ReductionPromiseArray<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_init</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {};</span>

ReductionPromiseArray<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_resolveEmptyArray</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>_gotAccum <span class="hl opt">||</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_zerothIsAccum<span class="hl opt">) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_resolve</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>_preservedValues <span class="hl opt">!==</span> <span class="hl kwa">null</span>
                        <span class="hl opt">? [] :</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_accum<span class="hl opt">);</span>
    <span class="hl opt">}</span>
<span class="hl opt">};</span>

ReductionPromiseArray<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_promiseFulfilled</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>value<span class="hl opt">,</span> index<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> values <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_values<span class="hl opt">;</span>
    values<span class="hl opt">[</span>index<span class="hl opt">] =</span> value<span class="hl opt">;</span>
    <span class="hl kwa">var</span> length <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">();</span>
    <span class="hl kwa">var</span> preservedValues <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_preservedValues<span class="hl opt">;</span>
    <span class="hl kwa">var</span> isEach <span class="hl opt">=</span> preservedValues <span class="hl opt">!==</span> <span class="hl kwa">null</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> gotAccum <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_gotAccum<span class="hl opt">;</span>
    <span class="hl kwa">var</span> valuesPhase <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_valuesPhase<span class="hl opt">;</span>
    <span class="hl kwa">var</span> valuesPhaseIndex<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!</span>valuesPhase<span class="hl opt">) {</span>
        valuesPhase <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_valuesPhase <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Array</span><span class="hl opt">(</span>length<span class="hl opt">);</span>
        <span class="hl kwa">for</span> <span class="hl opt">(</span>valuesPhaseIndex<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> valuesPhaseIndex<span class="hl opt">&lt;</span>length<span class="hl opt">; ++</span>valuesPhaseIndex<span class="hl opt">) {</span>
            valuesPhase<span class="hl opt">[</span>valuesPhaseIndex<span class="hl opt">] =</span> <span class="hl num">0</span><span class="hl opt">;</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>
    valuesPhaseIndex <span class="hl opt">=</span> valuesPhase<span class="hl opt">[</span>index<span class="hl opt">];</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>index <span class="hl opt">===</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_zerothIsAccum<span class="hl opt">) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>_accum <span class="hl opt">=</span> value<span class="hl opt">;</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>_gotAccum <span class="hl opt">=</span> gotAccum <span class="hl opt">=</span> <span class="hl kwa">true</span><span class="hl opt">;</span>
        valuesPhase<span class="hl opt">[</span>index<span class="hl opt">] = ((</span>valuesPhaseIndex <span class="hl opt">===</span> <span class="hl num">0</span><span class="hl opt">)</span>
            <span class="hl opt">?</span> <span class="hl num">1</span> <span class="hl opt">:</span> <span class="hl num">2</span><span class="hl opt">);</span>
    <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>index <span class="hl opt">=== -</span><span class="hl num">1</span><span class="hl opt">) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>_accum <span class="hl opt">=</span> value<span class="hl opt">;</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>_gotAccum <span class="hl opt">=</span> gotAccum <span class="hl opt">=</span> <span class="hl kwa">true</span><span class="hl opt">;</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>valuesPhaseIndex <span class="hl opt">===</span> <span class="hl num">0</span><span class="hl opt">) {</span>
            valuesPhase<span class="hl opt">[</span>index<span class="hl opt">] =</span> <span class="hl num">1</span><span class="hl opt">;</span>
        <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
            valuesPhase<span class="hl opt">[</span>index<span class="hl opt">] =</span> <span class="hl num">2</span><span class="hl opt">;</span>
            <span class="hl kwa">this</span><span class="hl opt">.</span>_accum <span class="hl opt">=</span> value<span class="hl opt">;</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!</span>gotAccum<span class="hl opt">)</span> <span class="hl kwa">return</span><span class="hl opt">;</span>

    <span class="hl kwa">var</span> callback <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_callback<span class="hl opt">;</span>
    <span class="hl kwa">var</span> receiver <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_promise<span class="hl opt">.</span><span class="hl kwd">_boundValue</span><span class="hl opt">();</span>
    <span class="hl kwa">var</span> ret<span class="hl opt">;</span>

    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_reducingIndex<span class="hl opt">;</span> i <span class="hl opt">&lt;</span> length<span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
        valuesPhaseIndex <span class="hl opt">=</span> valuesPhase<span class="hl opt">[</span>i<span class="hl opt">];</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>valuesPhaseIndex <span class="hl opt">===</span> <span class="hl num">2</span><span class="hl opt">) {</span>
            <span class="hl kwa">this</span><span class="hl opt">.</span>_reducingIndex <span class="hl opt">=</span> i <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
            <span class="hl kwa">continue</span><span class="hl opt">;</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>valuesPhaseIndex <span class="hl opt">!==</span> <span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">return</span><span class="hl opt">;</span>
        value <span class="hl opt">=</span> values<span class="hl opt">[</span>i<span class="hl opt">];</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>_promise<span class="hl opt">.</span><span class="hl kwd">_pushContext</span><span class="hl opt">();</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>isEach<span class="hl opt">) {</span>
            preservedValues<span class="hl opt">.</span><span class="hl kwd">push</span><span class="hl opt">(</span>value<span class="hl opt">);</span>
            ret <span class="hl opt">=</span> <span class="hl kwd">tryCatch</span><span class="hl opt">(</span>callback<span class="hl opt">).</span><span class="hl kwd">call</span><span class="hl opt">(</span>receiver<span class="hl opt">,</span> value<span class="hl opt">,</span> i<span class="hl opt">,</span> length<span class="hl opt">);</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">else</span> <span class="hl opt">{</span>
            ret <span class="hl opt">=</span> <span class="hl kwd">tryCatch</span><span class="hl opt">(</span>callback<span class="hl opt">)</span>
                <span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span>receiver<span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_accum<span class="hl opt">,</span> value<span class="hl opt">,</span> i<span class="hl opt">,</span> length<span class="hl opt">);</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>_promise<span class="hl opt">.</span><span class="hl kwd">_popContext</span><span class="hl opt">();</span>

        <span class="hl kwa">if</span> <span class="hl opt">(</span>ret <span class="hl opt">===</span> errorObj<span class="hl opt">)</span> <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_reject</span><span class="hl opt">(</span>ret<span class="hl opt">.</span>e<span class="hl opt">);</span>

        <span class="hl kwa">var</span> maybePromise <span class="hl opt">=</span> <span class="hl kwd">tryConvertToPromise</span><span class="hl opt">(</span>ret<span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_promise<span class="hl opt">);</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>maybePromise <span class="hl kwa">instanceof</span> Promise<span class="hl opt">) {</span>
            maybePromise <span class="hl opt">=</span> maybePromise<span class="hl opt">.</span><span class="hl kwd">_target</span><span class="hl opt">();</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>maybePromise<span class="hl opt">.</span><span class="hl kwd">_isPending</span><span class="hl opt">()) {</span>
                valuesPhase<span class="hl opt">[</span>i<span class="hl opt">] =</span> <span class="hl num">4</span><span class="hl opt">;</span>
                <span class="hl kwa">return</span> maybePromise<span class="hl opt">.</span><span class="hl kwd">_proxyPromiseArray</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> i<span class="hl opt">);</span>
            <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>maybePromise<span class="hl opt">.</span><span class="hl kwd">_isFulfilled</span><span class="hl opt">()) {</span>
                ret <span class="hl opt">=</span> maybePromise<span class="hl opt">.</span><span class="hl kwd">_value</span><span class="hl opt">();</span>
            <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
                <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_reject</span><span class="hl opt">(</span>maybePromise<span class="hl opt">.</span><span class="hl kwd">_reason</span><span class="hl opt">());</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span>

        <span class="hl kwa">this</span><span class="hl opt">.</span>_reducingIndex <span class="hl opt">=</span> i <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>_accum <span class="hl opt">=</span> ret<span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_resolve</span><span class="hl opt">(</span>isEach <span class="hl opt">?</span> preservedValues <span class="hl opt">:</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_accum<span class="hl opt">);</span>
<span class="hl opt">};</span>

<span class="hl kwa">function</span> <span class="hl kwd">reduce</span><span class="hl opt">(</span>promises<span class="hl opt">,</span> fn<span class="hl opt">,</span> initialValue<span class="hl opt">,</span> _each<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> fn <span class="hl opt">!==</span> <span class="hl str">&quot;function&quot;</span><span class="hl opt">)</span> <span class="hl kwa">return</span> <span class="hl kwd">apiRejection</span><span class="hl opt">(</span><span class="hl str">&quot;fn must be a function</span><span class="hl esc">\u000a\u000a</span>    <span class="hl str">See http://goo.gl/916lJJ</span><span class="hl esc">\u000a</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
    <span class="hl kwa">var</span> array <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">ReductionPromiseArray</span><span class="hl opt">(</span>promises<span class="hl opt">,</span> fn<span class="hl opt">,</span> initialValue<span class="hl opt">,</span> _each<span class="hl opt">);</span>
    <span class="hl kwa">return</span> array<span class="hl opt">.</span><span class="hl kwd">promise</span><span class="hl opt">();</span>
<span class="hl opt">}</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">reduce</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>fn<span class="hl opt">,</span> initialValue<span class="hl opt">) {</span>
    <span class="hl kwa">return</span> <span class="hl kwd">reduce</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> fn<span class="hl opt">,</span> initialValue<span class="hl opt">,</span> <span class="hl kwa">null</span><span class="hl opt">);</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwd">reduce</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>promises<span class="hl opt">,</span> fn<span class="hl opt">,</span> initialValue<span class="hl opt">,</span> _each<span class="hl opt">) {</span>
    <span class="hl kwa">return</span> <span class="hl kwd">reduce</span><span class="hl opt">(</span>promises<span class="hl opt">,</span> fn<span class="hl opt">,</span> initialValue<span class="hl opt">,</span> _each<span class="hl opt">);</span>
<span class="hl opt">};</span>
<span class="hl opt">};</span>

<span class="hl opt">},{</span><span class="hl str">&quot;./async.js&quot;</span><span class="hl opt">:</span><span class="hl num">2</span><span class="hl opt">,</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">:</span><span class="hl num">38</span><span class="hl opt">}],</span><span class="hl num">31</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>_dereq_<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl str">&quot;use strict&quot;</span><span class="hl opt">;</span>
<span class="hl kwa">var</span> schedule<span class="hl opt">;</span>
<span class="hl kwa">var</span> util <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./util&quot;</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> <span class="hl kwd">noAsyncScheduler</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
    <span class="hl kwa">throw new</span> <span class="hl kwd">Error</span><span class="hl opt">(</span><span class="hl str">&quot;No async scheduler available</span><span class="hl esc">\u000a\u000a</span>    <span class="hl str">See http://goo.gl/m3OTXk</span><span class="hl esc">\u000a</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
<span class="hl opt">};</span>
<span class="hl kwa">if</span> <span class="hl opt">(</span>util<span class="hl opt">.</span>isNode <span class="hl opt">&amp;&amp;</span> <span class="hl kwa">typeof</span> MutationObserver <span class="hl opt">===</span> <span class="hl str">&quot;undefined&quot;</span><span class="hl opt">) {</span>
    <span class="hl kwa">var</span> GlobalSetImmediate <span class="hl opt">=</span> global<span class="hl opt">.</span>setImmediate<span class="hl opt">;</span>
    <span class="hl kwa">var</span> ProcessNextTick <span class="hl opt">=</span> process<span class="hl opt">.</span>nextTick<span class="hl opt">;</span>
    schedule <span class="hl opt">=</span> util<span class="hl opt">.</span>isRecentNode
                <span class="hl opt">?</span> <span class="hl kwa">function</span><span class="hl opt">(</span>fn<span class="hl opt">) {</span> GlobalSetImmediate<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span>global<span class="hl opt">,</span> fn<span class="hl opt">); }</span>
                <span class="hl opt">:</span> <span class="hl kwa">function</span><span class="hl opt">(</span>fn<span class="hl opt">) {</span> ProcessNextTick<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span>process<span class="hl opt">,</span> fn<span class="hl opt">); };</span>
<span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">((</span><span class="hl kwa">typeof</span> MutationObserver <span class="hl opt">!==</span> <span class="hl str">&quot;undefined&quot;</span><span class="hl opt">) &amp;&amp;</span>
          <span class="hl opt">!(</span><span class="hl kwa">typeof</span> window <span class="hl opt">!==</span> <span class="hl str">&quot;undefined&quot;</span> <span class="hl opt">&amp;&amp;</span>
            window<span class="hl opt">.</span>navigator <span class="hl opt">&amp;&amp;</span>
            window<span class="hl opt">.</span>navigator<span class="hl opt">.</span>standalone<span class="hl opt">)) {</span>
    <span class="hl kwd">schedule</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>fn<span class="hl opt">) {</span>
        <span class="hl kwa">var</span> div <span class="hl opt">=</span> document<span class="hl opt">.</span><span class="hl kwd">createElement</span><span class="hl opt">(</span><span class="hl str">&quot;div&quot;</span><span class="hl opt">);</span>
        <span class="hl kwa">var</span> observer <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">MutationObserver</span><span class="hl opt">(</span>fn<span class="hl opt">);</span>
        observer<span class="hl opt">.</span><span class="hl kwd">observe</span><span class="hl opt">(</span>div<span class="hl opt">, {</span>attributes<span class="hl opt">:</span> <span class="hl kwa">true</span><span class="hl opt">});</span>
        <span class="hl kwa">return function</span><span class="hl opt">() {</span> div<span class="hl opt">.</span>classList<span class="hl opt">.</span><span class="hl kwd">toggle</span><span class="hl opt">(</span><span class="hl str">&quot;foo&quot;</span><span class="hl opt">); };</span>
    <span class="hl opt">};</span>
    schedule<span class="hl opt">.</span>isStatic <span class="hl opt">=</span> <span class="hl kwa">true</span><span class="hl opt">;</span>
<span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> setImmediate <span class="hl opt">!==</span> <span class="hl str">&quot;undefined&quot;</span><span class="hl opt">) {</span>
    <span class="hl kwd">schedule</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>fn<span class="hl opt">) {</span>
        <span class="hl kwd">setImmediate</span><span class="hl opt">(</span>fn<span class="hl opt">);</span>
    <span class="hl opt">};</span>
<span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> setTimeout <span class="hl opt">!==</span> <span class="hl str">&quot;undefined&quot;</span><span class="hl opt">) {</span>
    <span class="hl kwd">schedule</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>fn<span class="hl opt">) {</span>
        <span class="hl kwd">setTimeout</span><span class="hl opt">(</span>fn<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">);</span>
    <span class="hl opt">};</span>
<span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
    schedule <span class="hl opt">=</span> noAsyncScheduler<span class="hl opt">;</span>
<span class="hl opt">}</span>
module<span class="hl opt">.</span>exports <span class="hl opt">=</span> schedule<span class="hl opt">;</span>

<span class="hl opt">},{</span><span class="hl str">&quot;./util&quot;</span><span class="hl opt">:</span><span class="hl num">38</span><span class="hl opt">}],</span><span class="hl num">32</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>_dereq_<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl str">&quot;use strict&quot;</span><span class="hl opt">;</span>
module<span class="hl opt">.</span>exports <span class="hl opt">=</span>
    <span class="hl kwa">function</span><span class="hl opt">(</span>Promise<span class="hl opt">,</span> PromiseArray<span class="hl opt">) {</span>
<span class="hl kwa">var</span> PromiseInspection <span class="hl opt">=</span> Promise<span class="hl opt">.</span>PromiseInspection<span class="hl opt">;</span>
<span class="hl kwa">var</span> util <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">);</span>

<span class="hl kwa">function</span> <span class="hl kwd">SettledPromiseArray</span><span class="hl opt">(</span>values<span class="hl opt">) {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>constructor<span class="hl opt">$(</span>values<span class="hl opt">);</span>
<span class="hl opt">}</span>
util<span class="hl opt">.</span><span class="hl kwd">inherits</span><span class="hl opt">(</span>SettledPromiseArray<span class="hl opt">,</span> PromiseArray<span class="hl opt">);</span>

SettledPromiseArray<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_promiseResolved</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>index<span class="hl opt">,</span> inspection<span class="hl opt">) {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_values<span class="hl opt">[</span>index<span class="hl opt">] =</span> inspection<span class="hl opt">;</span>
    <span class="hl kwa">var</span> totalResolved <span class="hl opt">= ++</span><span class="hl kwa">this</span><span class="hl opt">.</span>_totalResolved<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>totalResolved <span class="hl opt">&gt;=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_length<span class="hl opt">) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_resolve</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>_values<span class="hl opt">);</span>
    <span class="hl opt">}</span>
<span class="hl opt">};</span>

SettledPromiseArray<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_promiseFulfilled</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>value<span class="hl opt">,</span> index<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> ret <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">PromiseInspection</span><span class="hl opt">();</span>
    ret<span class="hl opt">.</span>_bitField <span class="hl opt">=</span> <span class="hl num">268435456</span><span class="hl opt">;</span>
    ret<span class="hl opt">.</span>_settledValue <span class="hl opt">=</span> value<span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_promiseResolved</span><span class="hl opt">(</span>index<span class="hl opt">,</span> ret<span class="hl opt">);</span>
<span class="hl opt">};</span>
SettledPromiseArray<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_promiseRejected</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>reason<span class="hl opt">,</span> index<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> ret <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">PromiseInspection</span><span class="hl opt">();</span>
    ret<span class="hl opt">.</span>_bitField <span class="hl opt">=</span> <span class="hl num">134217728</span><span class="hl opt">;</span>
    ret<span class="hl opt">.</span>_settledValue <span class="hl opt">=</span> reason<span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_promiseResolved</span><span class="hl opt">(</span>index<span class="hl opt">,</span> ret<span class="hl opt">);</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwd">settle</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>promises<span class="hl opt">) {</span>
    <span class="hl kwa">return new</span> <span class="hl kwd">SettledPromiseArray</span><span class="hl opt">(</span>promises<span class="hl opt">).</span><span class="hl kwd">promise</span><span class="hl opt">();</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">settle</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return new</span> <span class="hl kwd">SettledPromiseArray</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">).</span><span class="hl kwd">promise</span><span class="hl opt">();</span>
<span class="hl opt">};</span>
<span class="hl opt">};</span>

<span class="hl opt">},{</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">:</span><span class="hl num">38</span><span class="hl opt">}],</span><span class="hl num">33</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>_dereq_<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl str">&quot;use strict&quot;</span><span class="hl opt">;</span>
module<span class="hl opt">.</span>exports <span class="hl opt">=</span>
<span class="hl kwa">function</span><span class="hl opt">(</span>Promise<span class="hl opt">,</span> PromiseArray<span class="hl opt">,</span> apiRejection<span class="hl opt">) {</span>
<span class="hl kwa">var</span> util <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> RangeError <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./errors.js&quot;</span><span class="hl opt">).</span>RangeError<span class="hl opt">;</span>
<span class="hl kwa">var</span> AggregateError <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./errors.js&quot;</span><span class="hl opt">).</span>AggregateError<span class="hl opt">;</span>
<span class="hl kwa">var</span> isArray <span class="hl opt">=</span> util<span class="hl opt">.</span>isArray<span class="hl opt">;</span>


<span class="hl kwa">function</span> <span class="hl kwd">SomePromiseArray</span><span class="hl opt">(</span>values<span class="hl opt">) {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>constructor<span class="hl opt">$(</span>values<span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_howMany <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_unwrap <span class="hl opt">=</span> <span class="hl kwa">false</span><span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_initialized <span class="hl opt">=</span> <span class="hl kwa">false</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
util<span class="hl opt">.</span><span class="hl kwd">inherits</span><span class="hl opt">(</span>SomePromiseArray<span class="hl opt">,</span> PromiseArray<span class="hl opt">);</span>

SomePromiseArray<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_init</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!</span><span class="hl kwa">this</span><span class="hl opt">.</span>_initialized<span class="hl opt">) {</span>
        <span class="hl kwa">return</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>_howMany <span class="hl opt">===</span> <span class="hl num">0</span><span class="hl opt">) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_resolve</span><span class="hl opt">([]);</span>
        <span class="hl kwa">return</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_init<span class="hl opt">$(</span>undefined<span class="hl opt">, -</span><span class="hl num">5</span><span class="hl opt">);</span>
    <span class="hl kwa">var</span> isArrayResolved <span class="hl opt">=</span> <span class="hl kwd">isArray</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>_values<span class="hl opt">);</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_isResolved</span><span class="hl opt">() &amp;&amp;</span>
        isArrayResolved <span class="hl opt">&amp;&amp;</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>_howMany <span class="hl opt">&gt;</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_canPossiblyFulfill</span><span class="hl opt">()) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_reject</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_getRangeError</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">()));</span>
    <span class="hl opt">}</span>
<span class="hl opt">};</span>

SomePromiseArray<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">init</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_initialized <span class="hl opt">=</span> <span class="hl kwa">true</span><span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_init</span><span class="hl opt">();</span>
<span class="hl opt">};</span>

SomePromiseArray<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">setUnwrap</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_unwrap <span class="hl opt">=</span> <span class="hl kwa">true</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

SomePromiseArray<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">howMany</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span>_howMany<span class="hl opt">;</span>
<span class="hl opt">};</span>

SomePromiseArray<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">setHowMany</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>count<span class="hl opt">) {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_howMany <span class="hl opt">=</span> count<span class="hl opt">;</span>
<span class="hl opt">};</span>

SomePromiseArray<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_promiseFulfilled</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>value<span class="hl opt">) {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_addFulfilled</span><span class="hl opt">(</span>value<span class="hl opt">);</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_fulfilled</span><span class="hl opt">() ===</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">howMany</span><span class="hl opt">()) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>_values<span class="hl opt">.</span>length <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">howMany</span><span class="hl opt">();</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">howMany</span><span class="hl opt">() ===</span> <span class="hl num">1</span> <span class="hl opt">&amp;&amp;</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_unwrap<span class="hl opt">) {</span>
            <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_resolve</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>_values<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]);</span>
        <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
            <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_resolve</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>_values<span class="hl opt">);</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>

<span class="hl opt">};</span>
SomePromiseArray<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_promiseRejected</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>reason<span class="hl opt">) {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_addRejected</span><span class="hl opt">(</span>reason<span class="hl opt">);</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">howMany</span><span class="hl opt">() &gt;</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_canPossiblyFulfill</span><span class="hl opt">()) {</span>
        <span class="hl kwa">var</span> e <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">AggregateError</span><span class="hl opt">();</span>
        <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">();</span> i <span class="hl opt">&lt;</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_values<span class="hl opt">.</span>length<span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
            e<span class="hl opt">.</span><span class="hl kwd">push</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>_values<span class="hl opt">[</span>i<span class="hl opt">]);</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_reject</span><span class="hl opt">(</span>e<span class="hl opt">);</span>
    <span class="hl opt">}</span>
<span class="hl opt">};</span>

SomePromiseArray<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_fulfilled</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span>_totalResolved<span class="hl opt">;</span>
<span class="hl opt">};</span>

SomePromiseArray<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_rejected</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span>_values<span class="hl opt">.</span>length <span class="hl opt">-</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">();</span>
<span class="hl opt">};</span>

SomePromiseArray<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_addRejected</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>reason<span class="hl opt">) {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_values<span class="hl opt">.</span><span class="hl kwd">push</span><span class="hl opt">(</span>reason<span class="hl opt">);</span>
<span class="hl opt">};</span>

SomePromiseArray<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_addFulfilled</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>value<span class="hl opt">) {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>_values<span class="hl opt">[</span><span class="hl kwa">this</span><span class="hl opt">.</span>_totalResolved<span class="hl opt">++] =</span> value<span class="hl opt">;</span>
<span class="hl opt">};</span>

SomePromiseArray<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_canPossiblyFulfill</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">() -</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_rejected</span><span class="hl opt">();</span>
<span class="hl opt">};</span>

SomePromiseArray<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_getRangeError</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>count<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> message <span class="hl opt">=</span> <span class="hl str">&quot;Input array must contain at least &quot;</span> <span class="hl opt">+</span>
            <span class="hl kwa">this</span><span class="hl opt">.</span>_howMany <span class="hl opt">+</span> <span class="hl str">&quot; items but contains only &quot;</span> <span class="hl opt">+</span> count <span class="hl opt">+</span> <span class="hl str">&quot; items&quot;</span><span class="hl opt">;</span>
    <span class="hl kwa">return new</span> <span class="hl kwd">RangeError</span><span class="hl opt">(</span>message<span class="hl opt">);</span>
<span class="hl opt">};</span>

SomePromiseArray<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_resolveEmptyArray</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_reject</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_getRangeError</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">));</span>
<span class="hl opt">};</span>

<span class="hl kwa">function</span> <span class="hl kwd">some</span><span class="hl opt">(</span>promises<span class="hl opt">,</span> howMany<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">((</span>howMany <span class="hl opt">|</span> <span class="hl num">0</span><span class="hl opt">) !==</span> howMany <span class="hl opt">||</span> howMany <span class="hl opt">&lt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
        <span class="hl kwa">return</span> <span class="hl kwd">apiRejection</span><span class="hl opt">(</span><span class="hl str">&quot;expecting a positive integer</span><span class="hl esc">\u000a\u000a</span>    <span class="hl str">See http://goo.gl/1wAmHx</span><span class="hl esc">\u000a</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">var</span> ret <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">SomePromiseArray</span><span class="hl opt">(</span>promises<span class="hl opt">);</span>
    <span class="hl kwa">var</span> promise <span class="hl opt">=</span> ret<span class="hl opt">.</span><span class="hl kwd">promise</span><span class="hl opt">();</span>
    ret<span class="hl opt">.</span><span class="hl kwd">setHowMany</span><span class="hl opt">(</span>howMany<span class="hl opt">);</span>
    ret<span class="hl opt">.</span><span class="hl kwd">init</span><span class="hl opt">();</span>
    <span class="hl kwa">return</span> promise<span class="hl opt">;</span>
<span class="hl opt">}</span>

Promise<span class="hl opt">.</span><span class="hl kwd">some</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>promises<span class="hl opt">,</span> howMany<span class="hl opt">) {</span>
    <span class="hl kwa">return</span> <span class="hl kwd">some</span><span class="hl opt">(</span>promises<span class="hl opt">,</span> howMany<span class="hl opt">);</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">some</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>howMany<span class="hl opt">) {</span>
    <span class="hl kwa">return</span> <span class="hl kwd">some</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> howMany<span class="hl opt">);</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span>_SomePromiseArray <span class="hl opt">=</span> SomePromiseArray<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl opt">},{</span><span class="hl str">&quot;./errors.js&quot;</span><span class="hl opt">:</span><span class="hl num">13</span><span class="hl opt">,</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">:</span><span class="hl num">38</span><span class="hl opt">}],</span><span class="hl num">34</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>_dereq_<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl str">&quot;use strict&quot;</span><span class="hl opt">;</span>
module<span class="hl opt">.</span><span class="hl kwd">exports</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>Promise<span class="hl opt">) {</span>
<span class="hl kwa">function</span> <span class="hl kwd">PromiseInspection</span><span class="hl opt">(</span>promise<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>promise <span class="hl opt">!==</span> undefined<span class="hl opt">) {</span>
        promise <span class="hl opt">=</span> promise<span class="hl opt">.</span><span class="hl kwd">_target</span><span class="hl opt">();</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">=</span> promise<span class="hl opt">.</span>_bitField<span class="hl opt">;</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>_settledValue <span class="hl opt">=</span> promise<span class="hl opt">.</span>_settledValue<span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">else</span> <span class="hl opt">{</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>_settledValue <span class="hl opt">=</span> undefined<span class="hl opt">;</span>
    <span class="hl opt">}</span>
<span class="hl opt">}</span>

PromiseInspection<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">value</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">isFulfilled</span><span class="hl opt">()) {</span>
        <span class="hl kwa">throw new</span> <span class="hl kwd">TypeError</span><span class="hl opt">(</span><span class="hl str">&quot;cannot get fulfillment value of a non-fulfilled promise</span><span class="hl esc">\u000a\u000a</span>    <span class="hl str">See http://goo.gl/hc1DLj</span><span class="hl esc">\u000a</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span>_settledValue<span class="hl opt">;</span>
<span class="hl opt">};</span>

PromiseInspection<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>error <span class="hl opt">=</span>
PromiseInspection<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">reason</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">isRejected</span><span class="hl opt">()) {</span>
        <span class="hl kwa">throw new</span> <span class="hl kwd">TypeError</span><span class="hl opt">(</span><span class="hl str">&quot;cannot get rejection reason of a non-rejected promise</span><span class="hl esc">\u000a\u000a</span>    <span class="hl str">See http://goo.gl/hPuiwB</span><span class="hl esc">\u000a</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span>_settledValue<span class="hl opt">;</span>
<span class="hl opt">};</span>

PromiseInspection<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>isFulfilled <span class="hl opt">=</span>
Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_isFulfilled</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">&amp;</span> <span class="hl num">268435456</span><span class="hl opt">) &gt;</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

PromiseInspection<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>isRejected <span class="hl opt">=</span>
Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_isRejected</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">&amp;</span> <span class="hl num">134217728</span><span class="hl opt">) &gt;</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

PromiseInspection<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>isPending <span class="hl opt">=</span>
Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_isPending</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">&amp;</span> <span class="hl num">402653184</span><span class="hl opt">) ===</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

PromiseInspection<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>isResolved <span class="hl opt">=</span>
Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_isResolved</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">&amp;</span> <span class="hl num">402653184</span><span class="hl opt">) &gt;</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">isPending</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_target</span><span class="hl opt">().</span><span class="hl kwd">_isPending</span><span class="hl opt">();</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">isRejected</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_target</span><span class="hl opt">().</span><span class="hl kwd">_isRejected</span><span class="hl opt">();</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">isFulfilled</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_target</span><span class="hl opt">().</span><span class="hl kwd">_isFulfilled</span><span class="hl opt">();</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">isResolved</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_target</span><span class="hl opt">().</span><span class="hl kwd">_isResolved</span><span class="hl opt">();</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_value</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span>_settledValue<span class="hl opt">;</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_reason</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_unsetRejectionIsUnhandled</span><span class="hl opt">();</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span>_settledValue<span class="hl opt">;</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">value</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
    <span class="hl kwa">var</span> target <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_target</span><span class="hl opt">();</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!</span>target<span class="hl opt">.</span><span class="hl kwd">isFulfilled</span><span class="hl opt">()) {</span>
        <span class="hl kwa">throw new</span> <span class="hl kwd">TypeError</span><span class="hl opt">(</span><span class="hl str">&quot;cannot get fulfillment value of a non-fulfilled promise</span><span class="hl esc">\u000a\u000a</span>    <span class="hl str">See http://goo.gl/hc1DLj</span><span class="hl esc">\u000a</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return</span> target<span class="hl opt">.</span>_settledValue<span class="hl opt">;</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">reason</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">() {</span>
    <span class="hl kwa">var</span> target <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_target</span><span class="hl opt">();</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!</span>target<span class="hl opt">.</span><span class="hl kwd">isRejected</span><span class="hl opt">()) {</span>
        <span class="hl kwa">throw new</span> <span class="hl kwd">TypeError</span><span class="hl opt">(</span><span class="hl str">&quot;cannot get rejection reason of a non-rejected promise</span><span class="hl esc">\u000a\u000a</span>    <span class="hl str">See http://goo.gl/hPuiwB</span><span class="hl esc">\u000a</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
    target<span class="hl opt">.</span><span class="hl kwd">_unsetRejectionIsUnhandled</span><span class="hl opt">();</span>
    <span class="hl kwa">return</span> target<span class="hl opt">.</span>_settledValue<span class="hl opt">;</span>
<span class="hl opt">};</span>


Promise<span class="hl opt">.</span>PromiseInspection <span class="hl opt">=</span> PromiseInspection<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl opt">},{}],</span><span class="hl num">35</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>_dereq_<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl str">&quot;use strict&quot;</span><span class="hl opt">;</span>
module<span class="hl opt">.</span><span class="hl kwd">exports</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>Promise<span class="hl opt">,</span> INTERNAL<span class="hl opt">) {</span>
<span class="hl kwa">var</span> util <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> errorObj <span class="hl opt">=</span> util<span class="hl opt">.</span>errorObj<span class="hl opt">;</span>
<span class="hl kwa">var</span> isObject <span class="hl opt">=</span> util<span class="hl opt">.</span>isObject<span class="hl opt">;</span>

<span class="hl kwa">function</span> <span class="hl kwd">tryConvertToPromise</span><span class="hl opt">(</span>obj<span class="hl opt">,</span> context<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">isObject</span><span class="hl opt">(</span>obj<span class="hl opt">)) {</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>obj <span class="hl kwa">instanceof</span> Promise<span class="hl opt">) {</span>
            <span class="hl kwa">return</span> obj<span class="hl opt">;</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">else if</span> <span class="hl opt">(</span><span class="hl kwd">isAnyBluebirdPromise</span><span class="hl opt">(</span>obj<span class="hl opt">)) {</span>
            <span class="hl kwa">var</span> ret <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Promise</span><span class="hl opt">(</span>INTERNAL<span class="hl opt">);</span>
            obj<span class="hl opt">.</span><span class="hl kwd">_then</span><span class="hl opt">(</span>
                ret<span class="hl opt">.</span>_fulfillUnchecked<span class="hl opt">,</span>
                ret<span class="hl opt">.</span>_rejectUncheckedCheckError<span class="hl opt">,</span>
                ret<span class="hl opt">.</span>_progressUnchecked<span class="hl opt">,</span>
                ret<span class="hl opt">,</span>
                <span class="hl kwa">null</span>
            <span class="hl opt">);</span>
            <span class="hl kwa">return</span> ret<span class="hl opt">;</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">var</span> then <span class="hl opt">=</span> util<span class="hl opt">.</span><span class="hl kwd">tryCatch</span><span class="hl opt">(</span>getThen<span class="hl opt">)(</span>obj<span class="hl opt">);</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>then <span class="hl opt">===</span> errorObj<span class="hl opt">) {</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>context<span class="hl opt">)</span> context<span class="hl opt">.</span><span class="hl kwd">_pushContext</span><span class="hl opt">();</span>
            <span class="hl kwa">var</span> ret <span class="hl opt">=</span> Promise<span class="hl opt">.</span><span class="hl kwd">reject</span><span class="hl opt">(</span>then<span class="hl opt">.</span>e<span class="hl opt">);</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>context<span class="hl opt">)</span> context<span class="hl opt">.</span><span class="hl kwd">_popContext</span><span class="hl opt">();</span>
            <span class="hl kwa">return</span> ret<span class="hl opt">;</span>
        <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> then <span class="hl opt">===</span> <span class="hl str">&quot;function&quot;</span><span class="hl opt">) {</span>
            <span class="hl kwa">return</span> <span class="hl kwd">doThenable</span><span class="hl opt">(</span>obj<span class="hl opt">,</span> then<span class="hl opt">,</span> context<span class="hl opt">);</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return</span> obj<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">getThen</span><span class="hl opt">(</span>obj<span class="hl opt">) {</span>
    <span class="hl kwa">return</span> obj<span class="hl opt">.</span>then<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwa">var</span> hasProp <span class="hl opt">= {}.</span>hasOwnProperty<span class="hl opt">;</span>
<span class="hl kwa">function</span> <span class="hl kwd">isAnyBluebirdPromise</span><span class="hl opt">(</span>obj<span class="hl opt">) {</span>
    <span class="hl kwa">return</span> hasProp<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span>obj<span class="hl opt">,</span> <span class="hl str">&quot;_promise0&quot;</span><span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">doThenable</span><span class="hl opt">(</span>x<span class="hl opt">,</span> then<span class="hl opt">,</span> context<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> promise <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Promise</span><span class="hl opt">(</span>INTERNAL<span class="hl opt">);</span>
    <span class="hl kwa">var</span> ret <span class="hl opt">=</span> promise<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>context<span class="hl opt">)</span> context<span class="hl opt">.</span><span class="hl kwd">_pushContext</span><span class="hl opt">();</span>
    promise<span class="hl opt">.</span><span class="hl kwd">_captureStackTrace</span><span class="hl opt">();</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>context<span class="hl opt">)</span> context<span class="hl opt">.</span><span class="hl kwd">_popContext</span><span class="hl opt">();</span>
    <span class="hl kwa">var</span> synchronous <span class="hl opt">=</span> <span class="hl kwa">true</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> result <span class="hl opt">=</span> util<span class="hl opt">.</span><span class="hl kwd">tryCatch</span><span class="hl opt">(</span>then<span class="hl opt">).</span><span class="hl kwd">call</span><span class="hl opt">(</span>x<span class="hl opt">,</span>
                                        resolveFromThenable<span class="hl opt">,</span>
                                        rejectFromThenable<span class="hl opt">,</span>
                                        progressFromThenable<span class="hl opt">);</span>
    synchronous <span class="hl opt">=</span> <span class="hl kwa">false</span><span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>promise <span class="hl opt">&amp;&amp;</span> result <span class="hl opt">===</span> errorObj<span class="hl opt">) {</span>
        promise<span class="hl opt">.</span><span class="hl kwd">_rejectCallback</span><span class="hl opt">(</span>result<span class="hl opt">.</span>e<span class="hl opt">,</span> <span class="hl kwa">true</span><span class="hl opt">,</span> <span class="hl kwa">true</span><span class="hl opt">);</span>
        promise <span class="hl opt">=</span> <span class="hl kwa">null</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">function</span> <span class="hl kwd">resolveFromThenable</span><span class="hl opt">(</span>value<span class="hl opt">) {</span>
        <span class="hl kwa">if</span> <span class="hl opt">(!</span>promise<span class="hl opt">)</span> <span class="hl kwa">return</span><span class="hl opt">;</span>
        promise<span class="hl opt">.</span><span class="hl kwd">_resolveCallback</span><span class="hl opt">(</span>value<span class="hl opt">);</span>
        promise <span class="hl opt">=</span> <span class="hl kwa">null</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">function</span> <span class="hl kwd">rejectFromThenable</span><span class="hl opt">(</span>reason<span class="hl opt">) {</span>
        <span class="hl kwa">if</span> <span class="hl opt">(!</span>promise<span class="hl opt">)</span> <span class="hl kwa">return</span><span class="hl opt">;</span>
        promise<span class="hl opt">.</span><span class="hl kwd">_rejectCallback</span><span class="hl opt">(</span>reason<span class="hl opt">,</span> synchronous<span class="hl opt">,</span> <span class="hl kwa">true</span><span class="hl opt">);</span>
        promise <span class="hl opt">=</span> <span class="hl kwa">null</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">function</span> <span class="hl kwd">progressFromThenable</span><span class="hl opt">(</span>value<span class="hl opt">) {</span>
        <span class="hl kwa">if</span> <span class="hl opt">(!</span>promise<span class="hl opt">)</span> <span class="hl kwa">return</span><span class="hl opt">;</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> promise<span class="hl opt">.</span>_progress <span class="hl opt">===</span> <span class="hl str">&quot;function&quot;</span><span class="hl opt">) {</span>
            promise<span class="hl opt">.</span><span class="hl kwd">_progress</span><span class="hl opt">(</span>value<span class="hl opt">);</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return</span> ret<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwa">return</span> tryConvertToPromise<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl opt">},{</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">:</span><span class="hl num">38</span><span class="hl opt">}],</span><span class="hl num">36</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>_dereq_<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl str">&quot;use strict&quot;</span><span class="hl opt">;</span>
module<span class="hl opt">.</span><span class="hl kwd">exports</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>Promise<span class="hl opt">,</span> INTERNAL<span class="hl opt">) {</span>
<span class="hl kwa">var</span> util <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> TimeoutError <span class="hl opt">=</span> Promise<span class="hl opt">.</span>TimeoutError<span class="hl opt">;</span>

<span class="hl kwa">var</span> <span class="hl kwd">afterTimeout</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>promise<span class="hl opt">,</span> message<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!</span>promise<span class="hl opt">.</span><span class="hl kwd">isPending</span><span class="hl opt">())</span> <span class="hl kwa">return</span><span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> message <span class="hl opt">!==</span> <span class="hl str">&quot;string&quot;</span><span class="hl opt">) {</span>
        message <span class="hl opt">=</span> <span class="hl str">&quot;operation timed out&quot;</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">var</span> err <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">TimeoutError</span><span class="hl opt">(</span>message<span class="hl opt">);</span>
    util<span class="hl opt">.</span><span class="hl kwd">markAsOriginatingFromRejection</span><span class="hl opt">(</span>err<span class="hl opt">);</span>
    promise<span class="hl opt">.</span><span class="hl kwd">_attachExtraTrace</span><span class="hl opt">(</span>err<span class="hl opt">);</span>
    promise<span class="hl opt">.</span><span class="hl kwd">_cancel</span><span class="hl opt">(</span>err<span class="hl opt">);</span>
<span class="hl opt">};</span>

<span class="hl kwa">var</span> <span class="hl kwd">afterValue</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>value<span class="hl opt">) {</span> <span class="hl kwa">return</span> <span class="hl kwd">delay</span><span class="hl opt">(+</span><span class="hl kwa">this</span><span class="hl opt">).</span><span class="hl kwd">thenReturn</span><span class="hl opt">(</span>value<span class="hl opt">); };</span>
<span class="hl kwa">var</span> delay <span class="hl opt">=</span> Promise<span class="hl opt">.</span><span class="hl kwd">delay</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>value<span class="hl opt">,</span> ms<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>ms <span class="hl opt">===</span> undefined<span class="hl opt">) {</span>
        ms <span class="hl opt">=</span> value<span class="hl opt">;</span>
        value <span class="hl opt">=</span> undefined<span class="hl opt">;</span>
        <span class="hl kwa">var</span> ret <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Promise</span><span class="hl opt">(</span>INTERNAL<span class="hl opt">);</span>
        <span class="hl kwd">setTimeout</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">() {</span> ret<span class="hl opt">.</span><span class="hl kwd">_fulfill</span><span class="hl opt">(); },</span> ms<span class="hl opt">);</span>
        <span class="hl kwa">return</span> ret<span class="hl opt">;</span>
    <span class="hl opt">}</span>
    ms <span class="hl opt">= +</span>ms<span class="hl opt">;</span>
    <span class="hl kwa">return</span> Promise<span class="hl opt">.</span><span class="hl kwd">resolve</span><span class="hl opt">(</span>value<span class="hl opt">).</span><span class="hl kwd">_then</span><span class="hl opt">(</span>afterValue<span class="hl opt">,</span> <span class="hl kwa">null</span><span class="hl opt">,</span> <span class="hl kwa">null</span><span class="hl opt">,</span> ms<span class="hl opt">,</span> undefined<span class="hl opt">);</span>
<span class="hl opt">};</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">delay</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>ms<span class="hl opt">) {</span>
    <span class="hl kwa">return</span> <span class="hl kwd">delay</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> ms<span class="hl opt">);</span>
<span class="hl opt">};</span>

<span class="hl kwa">function</span> <span class="hl kwd">successClear</span><span class="hl opt">(</span>value<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> handle <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>handle <span class="hl kwa">instanceof</span> Number<span class="hl opt">)</span> handle <span class="hl opt">= +</span>handle<span class="hl opt">;</span>
    <span class="hl kwd">clearTimeout</span><span class="hl opt">(</span>handle<span class="hl opt">);</span>
    <span class="hl kwa">return</span> value<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">failureClear</span><span class="hl opt">(</span>reason<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> handle <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>handle <span class="hl kwa">instanceof</span> Number<span class="hl opt">)</span> handle <span class="hl opt">= +</span>handle<span class="hl opt">;</span>
    <span class="hl kwd">clearTimeout</span><span class="hl opt">(</span>handle<span class="hl opt">);</span>
    <span class="hl kwa">throw</span> reason<span class="hl opt">;</span>
<span class="hl opt">}</span>

Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">timeout</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>ms<span class="hl opt">,</span> message<span class="hl opt">) {</span>
    ms <span class="hl opt">= +</span>ms<span class="hl opt">;</span>
    <span class="hl kwa">var</span> ret <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">then</span><span class="hl opt">().</span><span class="hl kwd">cancellable</span><span class="hl opt">();</span>
    ret<span class="hl opt">.</span>_cancellationParent <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> handle <span class="hl opt">=</span> <span class="hl kwd">setTimeout</span><span class="hl opt">(</span><span class="hl kwa">function</span> <span class="hl kwd">timeoutTimeout</span><span class="hl opt">() {</span>
        <span class="hl kwd">afterTimeout</span><span class="hl opt">(</span>ret<span class="hl opt">,</span> message<span class="hl opt">);</span>
    <span class="hl opt">},</span> ms<span class="hl opt">);</span>
    <span class="hl kwa">return</span> ret<span class="hl opt">.</span><span class="hl kwd">_then</span><span class="hl opt">(</span>successClear<span class="hl opt">,</span> failureClear<span class="hl opt">,</span> undefined<span class="hl opt">,</span> handle<span class="hl opt">,</span> undefined<span class="hl opt">);</span>
<span class="hl opt">};</span>

<span class="hl opt">};</span>

<span class="hl opt">},{</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">:</span><span class="hl num">38</span><span class="hl opt">}],</span><span class="hl num">37</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>_dereq_<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl str">&quot;use strict&quot;</span><span class="hl opt">;</span>
module<span class="hl opt">.</span><span class="hl kwd">exports</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>Promise<span class="hl opt">,</span> apiRejection<span class="hl opt">,</span> tryConvertToPromise<span class="hl opt">,</span>
    createContext<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> TypeError <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./errors.js&quot;</span><span class="hl opt">).</span>TypeError<span class="hl opt">;</span>
    <span class="hl kwa">var</span> inherits <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">).</span>inherits<span class="hl opt">;</span>
    <span class="hl kwa">var</span> PromiseInspection <span class="hl opt">=</span> Promise<span class="hl opt">.</span>PromiseInspection<span class="hl opt">;</span>

    <span class="hl kwa">function</span> <span class="hl kwd">inspectionMapper</span><span class="hl opt">(</span>inspections<span class="hl opt">) {</span>
        <span class="hl kwa">var</span> len <span class="hl opt">=</span> inspections<span class="hl opt">.</span>length<span class="hl opt">;</span>
        <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> len<span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
            <span class="hl kwa">var</span> inspection <span class="hl opt">=</span> inspections<span class="hl opt">[</span>i<span class="hl opt">];</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>inspection<span class="hl opt">.</span><span class="hl kwd">isRejected</span><span class="hl opt">()) {</span>
                <span class="hl kwa">return</span> Promise<span class="hl opt">.</span><span class="hl kwd">reject</span><span class="hl opt">(</span>inspection<span class="hl opt">.</span><span class="hl kwd">error</span><span class="hl opt">());</span>
            <span class="hl opt">}</span>
            inspections<span class="hl opt">[</span>i<span class="hl opt">] =</span> inspection<span class="hl opt">.</span>_settledValue<span class="hl opt">;</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">return</span> inspections<span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">function</span> <span class="hl kwd">thrower</span><span class="hl opt">(</span>e<span class="hl opt">) {</span>
        <span class="hl kwd">setTimeout</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">(){</span><span class="hl kwa">throw</span> e<span class="hl opt">;},</span> <span class="hl num">0</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">function</span> <span class="hl kwd">castPreservingDisposable</span><span class="hl opt">(</span>thenable<span class="hl opt">) {</span>
        <span class="hl kwa">var</span> maybePromise <span class="hl opt">=</span> <span class="hl kwd">tryConvertToPromise</span><span class="hl opt">(</span>thenable<span class="hl opt">);</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>maybePromise <span class="hl opt">!==</span> thenable <span class="hl opt">&amp;&amp;</span>
            <span class="hl kwa">typeof</span> thenable<span class="hl opt">.</span>_isDisposable <span class="hl opt">===</span> <span class="hl str">&quot;function&quot;</span> <span class="hl opt">&amp;&amp;</span>
            <span class="hl kwa">typeof</span> thenable<span class="hl opt">.</span>_getDisposer <span class="hl opt">===</span> <span class="hl str">&quot;function&quot;</span> <span class="hl opt">&amp;&amp;</span>
            thenable<span class="hl opt">.</span><span class="hl kwd">_isDisposable</span><span class="hl opt">()) {</span>
            maybePromise<span class="hl opt">.</span><span class="hl kwd">_setDisposable</span><span class="hl opt">(</span>thenable<span class="hl opt">.</span><span class="hl kwd">_getDisposer</span><span class="hl opt">());</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">return</span> maybePromise<span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">function</span> <span class="hl kwd">dispose</span><span class="hl opt">(</span>resources<span class="hl opt">,</span> inspection<span class="hl opt">) {</span>
        <span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
        <span class="hl kwa">var</span> len <span class="hl opt">=</span> resources<span class="hl opt">.</span>length<span class="hl opt">;</span>
        <span class="hl kwa">var</span> ret <span class="hl opt">=</span> Promise<span class="hl opt">.</span><span class="hl kwd">defer</span><span class="hl opt">();</span>
        <span class="hl kwa">function</span> <span class="hl kwd">iterator</span><span class="hl opt">() {</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>i <span class="hl opt">&gt;=</span> len<span class="hl opt">)</span> <span class="hl kwa">return</span> ret<span class="hl opt">.</span><span class="hl kwd">resolve</span><span class="hl opt">();</span>
            <span class="hl kwa">var</span> maybePromise <span class="hl opt">=</span> <span class="hl kwd">castPreservingDisposable</span><span class="hl opt">(</span>resources<span class="hl opt">[</span>i<span class="hl opt">++]);</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>maybePromise <span class="hl kwa">instanceof</span> Promise <span class="hl opt">&amp;&amp;</span>
                maybePromise<span class="hl opt">.</span><span class="hl kwd">_isDisposable</span><span class="hl opt">()) {</span>
                <span class="hl kwa">try</span> <span class="hl opt">{</span>
                    maybePromise <span class="hl opt">=</span> <span class="hl kwd">tryConvertToPromise</span><span class="hl opt">(</span>
                        maybePromise<span class="hl opt">.</span><span class="hl kwd">_getDisposer</span><span class="hl opt">().</span><span class="hl kwd">tryDispose</span><span class="hl opt">(</span>inspection<span class="hl opt">),</span>
                        resources<span class="hl opt">.</span>promise<span class="hl opt">);</span>
                <span class="hl opt">}</span> <span class="hl kwa">catch</span> <span class="hl opt">(</span>e<span class="hl opt">) {</span>
                    <span class="hl kwa">return</span> <span class="hl kwd">thrower</span><span class="hl opt">(</span>e<span class="hl opt">);</span>
                <span class="hl opt">}</span>
                <span class="hl kwa">if</span> <span class="hl opt">(</span>maybePromise <span class="hl kwa">instanceof</span> Promise<span class="hl opt">) {</span>
                    <span class="hl kwa">return</span> maybePromise<span class="hl opt">.</span><span class="hl kwd">_then</span><span class="hl opt">(</span>iterator<span class="hl opt">,</span> thrower<span class="hl opt">,</span>
                                              <span class="hl kwa">null</span><span class="hl opt">,</span> <span class="hl kwa">null</span><span class="hl opt">,</span> <span class="hl kwa">null</span><span class="hl opt">);</span>
                <span class="hl opt">}</span>
            <span class="hl opt">}</span>
            <span class="hl kwd">iterator</span><span class="hl opt">();</span>
        <span class="hl opt">}</span>
        <span class="hl kwd">iterator</span><span class="hl opt">();</span>
        <span class="hl kwa">return</span> ret<span class="hl opt">.</span>promise<span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">function</span> <span class="hl kwd">disposerSuccess</span><span class="hl opt">(</span>value<span class="hl opt">) {</span>
        <span class="hl kwa">var</span> inspection <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">PromiseInspection</span><span class="hl opt">();</span>
        inspection<span class="hl opt">.</span>_settledValue <span class="hl opt">=</span> value<span class="hl opt">;</span>
        inspection<span class="hl opt">.</span>_bitField <span class="hl opt">=</span> <span class="hl num">268435456</span><span class="hl opt">;</span>
        <span class="hl kwa">return</span> <span class="hl kwd">dispose</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> inspection<span class="hl opt">).</span><span class="hl kwd">thenReturn</span><span class="hl opt">(</span>value<span class="hl opt">);</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">function</span> <span class="hl kwd">disposerFail</span><span class="hl opt">(</span>reason<span class="hl opt">) {</span>
        <span class="hl kwa">var</span> inspection <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">PromiseInspection</span><span class="hl opt">();</span>
        inspection<span class="hl opt">.</span>_settledValue <span class="hl opt">=</span> reason<span class="hl opt">;</span>
        inspection<span class="hl opt">.</span>_bitField <span class="hl opt">=</span> <span class="hl num">134217728</span><span class="hl opt">;</span>
        <span class="hl kwa">return</span> <span class="hl kwd">dispose</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> inspection<span class="hl opt">).</span><span class="hl kwd">thenThrow</span><span class="hl opt">(</span>reason<span class="hl opt">);</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">function</span> <span class="hl kwd">Disposer</span><span class="hl opt">(</span>data<span class="hl opt">,</span> promise<span class="hl opt">,</span> context<span class="hl opt">) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>_data <span class="hl opt">=</span> data<span class="hl opt">;</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>_promise <span class="hl opt">=</span> promise<span class="hl opt">;</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>_context <span class="hl opt">=</span> context<span class="hl opt">;</span>
    <span class="hl opt">}</span>

    Disposer<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">data</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
        <span class="hl kwa">return this</span><span class="hl opt">.</span>_data<span class="hl opt">;</span>
    <span class="hl opt">};</span>

    Disposer<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">promise</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
        <span class="hl kwa">return this</span><span class="hl opt">.</span>_promise<span class="hl opt">;</span>
    <span class="hl opt">};</span>

    Disposer<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">resource</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">promise</span><span class="hl opt">().</span><span class="hl kwd">isFulfilled</span><span class="hl opt">()) {</span>
            <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">promise</span><span class="hl opt">().</span><span class="hl kwd">value</span><span class="hl opt">();</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">return null</span><span class="hl opt">;</span>
    <span class="hl opt">};</span>

    Disposer<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">tryDispose</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>inspection<span class="hl opt">) {</span>
        <span class="hl kwa">var</span> resource <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">resource</span><span class="hl opt">();</span>
        <span class="hl kwa">var</span> context <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_context<span class="hl opt">;</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>context <span class="hl opt">!==</span> undefined<span class="hl opt">)</span> context<span class="hl opt">.</span><span class="hl kwd">_pushContext</span><span class="hl opt">();</span>
        <span class="hl kwa">var</span> ret <span class="hl opt">=</span> resource <span class="hl opt">!==</span> <span class="hl kwa">null</span>
            <span class="hl opt">?</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">doDispose</span><span class="hl opt">(</span>resource<span class="hl opt">,</span> inspection<span class="hl opt">) :</span> <span class="hl kwa">null</span><span class="hl opt">;</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>context <span class="hl opt">!==</span> undefined<span class="hl opt">)</span> context<span class="hl opt">.</span><span class="hl kwd">_popContext</span><span class="hl opt">();</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>_promise<span class="hl opt">.</span><span class="hl kwd">_unsetDisposable</span><span class="hl opt">();</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>_data <span class="hl opt">=</span> <span class="hl kwa">null</span><span class="hl opt">;</span>
        <span class="hl kwa">return</span> ret<span class="hl opt">;</span>
    <span class="hl opt">};</span>

    Disposer<span class="hl opt">.</span><span class="hl kwd">isDisposer</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>d<span class="hl opt">) {</span>
        <span class="hl kwa">return</span> <span class="hl opt">(</span>d <span class="hl opt">!=</span> <span class="hl kwa">null</span> <span class="hl opt">&amp;&amp;</span>
                <span class="hl kwa">typeof</span> d<span class="hl opt">.</span>resource <span class="hl opt">===</span> <span class="hl str">&quot;function&quot;</span> <span class="hl opt">&amp;&amp;</span>
                <span class="hl kwa">typeof</span> d<span class="hl opt">.</span>tryDispose <span class="hl opt">===</span> <span class="hl str">&quot;function&quot;</span><span class="hl opt">);</span>
    <span class="hl opt">};</span>

    <span class="hl kwa">function</span> <span class="hl kwd">FunctionDisposer</span><span class="hl opt">(</span>fn<span class="hl opt">,</span> promise<span class="hl opt">,</span> context<span class="hl opt">) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>constructor<span class="hl opt">$(</span>fn<span class="hl opt">,</span> promise<span class="hl opt">,</span> context<span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwd">inherits</span><span class="hl opt">(</span>FunctionDisposer<span class="hl opt">,</span> Disposer<span class="hl opt">);</span>

    FunctionDisposer<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">doDispose</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>resource<span class="hl opt">,</span> inspection<span class="hl opt">) {</span>
        <span class="hl kwa">var</span> fn <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">data</span><span class="hl opt">();</span>
        <span class="hl kwa">return</span> fn<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span>resource<span class="hl opt">,</span> resource<span class="hl opt">,</span> inspection<span class="hl opt">);</span>
    <span class="hl opt">};</span>

    <span class="hl kwa">function</span> <span class="hl kwd">maybeUnwrapDisposer</span><span class="hl opt">(</span>value<span class="hl opt">) {</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>Disposer<span class="hl opt">.</span><span class="hl kwd">isDisposer</span><span class="hl opt">(</span>value<span class="hl opt">)) {</span>
            <span class="hl kwa">this</span><span class="hl opt">.</span>resources<span class="hl opt">[</span><span class="hl kwa">this</span><span class="hl opt">.</span>index<span class="hl opt">].</span><span class="hl kwd">_setDisposable</span><span class="hl opt">(</span>value<span class="hl opt">);</span>
            <span class="hl kwa">return</span> value<span class="hl opt">.</span><span class="hl kwd">promise</span><span class="hl opt">();</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">return</span> value<span class="hl opt">;</span>
    <span class="hl opt">}</span>

    Promise<span class="hl opt">.</span><span class="hl kwd">using</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
        <span class="hl kwa">var</span> len <span class="hl opt">=</span> arguments<span class="hl opt">.</span>length<span class="hl opt">;</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>len <span class="hl opt">&lt;</span> <span class="hl num">2</span><span class="hl opt">)</span> <span class="hl kwa">return</span> <span class="hl kwd">apiRejection</span><span class="hl opt">(</span>
                        <span class="hl str">&quot;you must pass at least 2 arguments to Promise.using&quot;</span><span class="hl opt">);</span>
        <span class="hl kwa">var</span> fn <span class="hl opt">=</span> arguments<span class="hl opt">[</span>len <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">];</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> fn <span class="hl opt">!==</span> <span class="hl str">&quot;function&quot;</span><span class="hl opt">)</span> <span class="hl kwa">return</span> <span class="hl kwd">apiRejection</span><span class="hl opt">(</span><span class="hl str">&quot;fn must be a function</span><span class="hl esc">\u000a\u000a</span>    <span class="hl str">See http://goo.gl/916lJJ</span><span class="hl esc">\u000a</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
        len<span class="hl opt">--;</span>
        <span class="hl kwa">var</span> resources <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Array</span><span class="hl opt">(</span>len<span class="hl opt">);</span>
        <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> len<span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
            <span class="hl kwa">var</span> resource <span class="hl opt">=</span> arguments<span class="hl opt">[</span>i<span class="hl opt">];</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>Disposer<span class="hl opt">.</span><span class="hl kwd">isDisposer</span><span class="hl opt">(</span>resource<span class="hl opt">)) {</span>
                <span class="hl kwa">var</span> disposer <span class="hl opt">=</span> resource<span class="hl opt">;</span>
                resource <span class="hl opt">=</span> resource<span class="hl opt">.</span><span class="hl kwd">promise</span><span class="hl opt">();</span>
                resource<span class="hl opt">.</span><span class="hl kwd">_setDisposable</span><span class="hl opt">(</span>disposer<span class="hl opt">);</span>
            <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
                <span class="hl kwa">var</span> maybePromise <span class="hl opt">=</span> <span class="hl kwd">tryConvertToPromise</span><span class="hl opt">(</span>resource<span class="hl opt">);</span>
                <span class="hl kwa">if</span> <span class="hl opt">(</span>maybePromise <span class="hl kwa">instanceof</span> Promise<span class="hl opt">) {</span>
                    resource <span class="hl opt">=</span>
                        maybePromise<span class="hl opt">.</span><span class="hl kwd">_then</span><span class="hl opt">(</span>maybeUnwrapDisposer<span class="hl opt">,</span> <span class="hl kwa">null</span><span class="hl opt">,</span> <span class="hl kwa">null</span><span class="hl opt">, {</span>
                            resources<span class="hl opt">:</span> resources<span class="hl opt">,</span>
                            index<span class="hl opt">:</span> i
                    <span class="hl opt">},</span> undefined<span class="hl opt">);</span>
                <span class="hl opt">}</span>
            <span class="hl opt">}</span>
            resources<span class="hl opt">[</span>i<span class="hl opt">] =</span> resource<span class="hl opt">;</span>
        <span class="hl opt">}</span>

        <span class="hl kwa">var</span> promise <span class="hl opt">=</span> Promise<span class="hl opt">.</span><span class="hl kwd">settle</span><span class="hl opt">(</span>resources<span class="hl opt">)</span>
            <span class="hl opt">.</span><span class="hl kwd">then</span><span class="hl opt">(</span>inspectionMapper<span class="hl opt">)</span>
            <span class="hl opt">.</span><span class="hl kwd">then</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">(</span>vals<span class="hl opt">) {</span>
                promise<span class="hl opt">.</span><span class="hl kwd">_pushContext</span><span class="hl opt">();</span>
                <span class="hl kwa">var</span> ret<span class="hl opt">;</span>
                <span class="hl kwa">try</span> <span class="hl opt">{</span>
                    ret <span class="hl opt">=</span> fn<span class="hl opt">.</span><span class="hl kwd">apply</span><span class="hl opt">(</span>undefined<span class="hl opt">,</span> vals<span class="hl opt">);</span>
                <span class="hl opt">}</span> <span class="hl kwa">finally</span> <span class="hl opt">{</span>
                    promise<span class="hl opt">.</span><span class="hl kwd">_popContext</span><span class="hl opt">();</span>
                <span class="hl opt">}</span>
                <span class="hl kwa">return</span> ret<span class="hl opt">;</span>
            <span class="hl opt">})</span>
            <span class="hl opt">.</span><span class="hl kwd">_then</span><span class="hl opt">(</span>
                disposerSuccess<span class="hl opt">,</span> disposerFail<span class="hl opt">,</span> undefined<span class="hl opt">,</span> resources<span class="hl opt">,</span> undefined<span class="hl opt">);</span>
        resources<span class="hl opt">.</span>promise <span class="hl opt">=</span> promise<span class="hl opt">;</span>
        <span class="hl kwa">return</span> promise<span class="hl opt">;</span>
    <span class="hl opt">};</span>

    Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_setDisposable</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>disposer<span class="hl opt">) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">|</span> <span class="hl num">262144</span><span class="hl opt">;</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>_disposer <span class="hl opt">=</span> disposer<span class="hl opt">;</span>
    <span class="hl opt">};</span>

    Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_isDisposable</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
        <span class="hl kwa">return</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">&amp;</span> <span class="hl num">262144</span><span class="hl opt">) &gt;</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl opt">};</span>

    Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_getDisposer</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
        <span class="hl kwa">return this</span><span class="hl opt">.</span>_disposer<span class="hl opt">;</span>
    <span class="hl opt">};</span>

    Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_unsetDisposable</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>_bitField <span class="hl opt">&amp; (~</span><span class="hl num">262144</span><span class="hl opt">);</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>_disposer <span class="hl opt">=</span> undefined<span class="hl opt">;</span>
    <span class="hl opt">};</span>

    Promise<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">disposer</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">(</span>fn<span class="hl opt">) {</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> fn <span class="hl opt">===</span> <span class="hl str">&quot;function&quot;</span><span class="hl opt">) {</span>
            <span class="hl kwa">return new</span> <span class="hl kwd">FunctionDisposer</span><span class="hl opt">(</span>fn<span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">,</span> <span class="hl kwd">createContext</span><span class="hl opt">());</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">throw new</span> <span class="hl kwd">TypeError</span><span class="hl opt">();</span>
    <span class="hl opt">};</span>

<span class="hl opt">};</span>

<span class="hl opt">},{</span><span class="hl str">&quot;./errors.js&quot;</span><span class="hl opt">:</span><span class="hl num">13</span><span class="hl opt">,</span><span class="hl str">&quot;./util.js&quot;</span><span class="hl opt">:</span><span class="hl num">38</span><span class="hl opt">}],</span><span class="hl num">38</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>_dereq_<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl str">&quot;use strict&quot;</span><span class="hl opt">;</span>
<span class="hl kwa">var</span> es5 <span class="hl opt">=</span> <span class="hl kwd">_dereq_</span><span class="hl opt">(</span><span class="hl str">&quot;./es5.js&quot;</span><span class="hl opt">);</span>
<span class="hl kwa">var</span> canEvaluate <span class="hl opt">=</span> <span class="hl kwa">typeof</span> navigator <span class="hl opt">==</span> <span class="hl str">&quot;undefined&quot;</span><span class="hl opt">;</span>
<span class="hl kwa">var</span> haveGetters <span class="hl opt">= (</span><span class="hl kwa">function</span><span class="hl opt">(){</span>
    <span class="hl kwa">try</span> <span class="hl opt">{</span>
        <span class="hl kwa">var</span> o <span class="hl opt">= {};</span>
        es5<span class="hl opt">.</span><span class="hl kwd">defineProperty</span><span class="hl opt">(</span>o<span class="hl opt">,</span> <span class="hl str">&quot;f&quot;</span><span class="hl opt">, {</span>
            <span class="hl kwa">get</span><span class="hl opt">:</span> <span class="hl kwa">function</span> <span class="hl opt">() {</span>
                <span class="hl kwa">return</span> <span class="hl num">3</span><span class="hl opt">;</span>
            <span class="hl opt">}</span>
        <span class="hl opt">});</span>
        <span class="hl kwa">return</span> o<span class="hl opt">.</span>f <span class="hl opt">===</span> <span class="hl num">3</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">catch</span> <span class="hl opt">(</span>e<span class="hl opt">) {</span>
        <span class="hl kwa">return false</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>

<span class="hl opt">})();</span>

<span class="hl kwa">var</span> errorObj <span class="hl opt">= {</span>e<span class="hl opt">: {}};</span>
<span class="hl kwa">var</span> tryCatchTarget<span class="hl opt">;</span>
<span class="hl kwa">function</span> <span class="hl kwd">tryCatcher</span><span class="hl opt">() {</span>
    <span class="hl kwa">try</span> <span class="hl opt">{</span>
        <span class="hl kwa">var</span> target <span class="hl opt">=</span> tryCatchTarget<span class="hl opt">;</span>
        tryCatchTarget <span class="hl opt">=</span> <span class="hl kwa">null</span><span class="hl opt">;</span>
        <span class="hl kwa">return</span> target<span class="hl opt">.</span><span class="hl kwd">apply</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> arguments<span class="hl opt">);</span>
    <span class="hl opt">}</span> <span class="hl kwa">catch</span> <span class="hl opt">(</span>e<span class="hl opt">) {</span>
        errorObj<span class="hl opt">.</span>e <span class="hl opt">=</span> e<span class="hl opt">;</span>
        <span class="hl kwa">return</span> errorObj<span class="hl opt">;</span>
    <span class="hl opt">}</span>
<span class="hl opt">}</span>
<span class="hl kwa">function</span> <span class="hl kwd">tryCatch</span><span class="hl opt">(</span>fn<span class="hl opt">) {</span>
    tryCatchTarget <span class="hl opt">=</span> fn<span class="hl opt">;</span>
    <span class="hl kwa">return</span> tryCatcher<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwa">var</span> <span class="hl kwd">inherits</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>Child<span class="hl opt">,</span> Parent<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> hasProp <span class="hl opt">= {}.</span>hasOwnProperty<span class="hl opt">;</span>

    <span class="hl kwa">function</span> <span class="hl kwd">T</span><span class="hl opt">() {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>constructor <span class="hl opt">=</span> Child<span class="hl opt">;</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>constructor<span class="hl opt">$ =</span> Parent<span class="hl opt">;</span>
        <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> propertyName <span class="hl kwa">in</span> Parent<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">) {</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>hasProp<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span>Parent<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">,</span> propertyName<span class="hl opt">) &amp;&amp;</span>
                propertyName<span class="hl opt">.</span><span class="hl kwd">charAt</span><span class="hl opt">(</span>propertyName<span class="hl opt">.</span>length<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">) !==</span> <span class="hl str">&quot;$&quot;</span>
           <span class="hl opt">) {</span>
                <span class="hl kwa">this</span><span class="hl opt">[</span>propertyName <span class="hl opt">+</span> <span class="hl str">&quot;$&quot;</span><span class="hl opt">] =</span> Parent<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">[</span>propertyName<span class="hl opt">];</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>
    T<span class="hl opt">.</span><span class="hl kwa">prototype</span> <span class="hl opt">=</span> Parent<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">;</span>
    Child<span class="hl opt">.</span><span class="hl kwa">prototype</span> <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">T</span><span class="hl opt">();</span>
    <span class="hl kwa">return</span> Child<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">;</span>
<span class="hl opt">};</span>


<span class="hl kwa">function</span> <span class="hl kwd">isPrimitive</span><span class="hl opt">(</span>val<span class="hl opt">) {</span>
    <span class="hl kwa">return</span> val <span class="hl opt">==</span> <span class="hl kwa">null</span> <span class="hl opt">||</span> val <span class="hl opt">===</span> <span class="hl kwa">true</span> <span class="hl opt">||</span> val <span class="hl opt">===</span> <span class="hl kwa">false</span> <span class="hl opt">||</span>
        <span class="hl kwa">typeof</span> val <span class="hl opt">===</span> <span class="hl str">&quot;string&quot;</span> <span class="hl opt">||</span> <span class="hl kwa">typeof</span> val <span class="hl opt">===</span> <span class="hl str">&quot;number&quot;</span><span class="hl opt">;</span>

<span class="hl opt">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">isObject</span><span class="hl opt">(</span>value<span class="hl opt">) {</span>
    <span class="hl kwa">return</span> <span class="hl opt">!</span><span class="hl kwd">isPrimitive</span><span class="hl opt">(</span>value<span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">maybeWrapAsError</span><span class="hl opt">(</span>maybeError<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!</span><span class="hl kwd">isPrimitive</span><span class="hl opt">(</span>maybeError<span class="hl opt">))</span> <span class="hl kwa">return</span> maybeError<span class="hl opt">;</span>

    <span class="hl kwa">return new</span> <span class="hl kwd">Error</span><span class="hl opt">(</span><span class="hl kwd">safeToString</span><span class="hl opt">(</span>maybeError<span class="hl opt">));</span>
<span class="hl opt">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">withAppended</span><span class="hl opt">(</span>target<span class="hl opt">,</span> appendee<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> len <span class="hl opt">=</span> target<span class="hl opt">.</span>length<span class="hl opt">;</span>
    <span class="hl kwa">var</span> ret <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Array</span><span class="hl opt">(</span>len <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">);</span>
    <span class="hl kwa">var</span> i<span class="hl opt">;</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> len<span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
        ret<span class="hl opt">[</span>i<span class="hl opt">] =</span> target<span class="hl opt">[</span>i<span class="hl opt">];</span>
    <span class="hl opt">}</span>
    ret<span class="hl opt">[</span>i<span class="hl opt">] =</span> appendee<span class="hl opt">;</span>
    <span class="hl kwa">return</span> ret<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">getDataPropertyOrDefault</span><span class="hl opt">(</span>obj<span class="hl opt">,</span> key<span class="hl opt">,</span> defaultValue<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>es5<span class="hl opt">.</span>isES5<span class="hl opt">) {</span>
        <span class="hl kwa">var</span> desc <span class="hl opt">=</span> Object<span class="hl opt">.</span><span class="hl kwd">getOwnPropertyDescriptor</span><span class="hl opt">(</span>obj<span class="hl opt">,</span> key<span class="hl opt">);</span>

        <span class="hl kwa">if</span> <span class="hl opt">(</span>desc <span class="hl opt">!=</span> <span class="hl kwa">null</span><span class="hl opt">) {</span>
            <span class="hl kwa">return</span> desc<span class="hl opt">.</span><span class="hl kwa">get</span> <span class="hl opt">==</span> <span class="hl kwa">null</span> <span class="hl opt">&amp;&amp;</span> desc<span class="hl opt">.</span><span class="hl kwa">set</span> <span class="hl opt">==</span> <span class="hl kwa">null</span>
                    <span class="hl opt">?</span> desc<span class="hl opt">.</span>value
                    <span class="hl opt">:</span> defaultValue<span class="hl opt">;</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
        <span class="hl kwa">return</span> <span class="hl opt">{}.</span>hasOwnProperty<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span>obj<span class="hl opt">,</span> key<span class="hl opt">) ?</span> obj<span class="hl opt">[</span>key<span class="hl opt">] :</span> undefined<span class="hl opt">;</span>
    <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">notEnumerableProp</span><span class="hl opt">(</span>obj<span class="hl opt">,</span> name<span class="hl opt">,</span> value<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">isPrimitive</span><span class="hl opt">(</span>obj<span class="hl opt">))</span> <span class="hl kwa">return</span> obj<span class="hl opt">;</span>
    <span class="hl kwa">var</span> descriptor <span class="hl opt">= {</span>
        value<span class="hl opt">:</span> value<span class="hl opt">,</span>
        configurable<span class="hl opt">:</span> <span class="hl kwa">true</span><span class="hl opt">,</span>
        enumerable<span class="hl opt">:</span> <span class="hl kwa">false</span><span class="hl opt">,</span>
        writable<span class="hl opt">:</span> <span class="hl kwa">true</span>
    <span class="hl opt">};</span>
    es5<span class="hl opt">.</span><span class="hl kwd">defineProperty</span><span class="hl opt">(</span>obj<span class="hl opt">,</span> name<span class="hl opt">,</span> descriptor<span class="hl opt">);</span>
    <span class="hl kwa">return</span> obj<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">thrower</span><span class="hl opt">(</span>r<span class="hl opt">) {</span>
    <span class="hl kwa">throw</span> r<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwa">var</span> inheritedDataKeys <span class="hl opt">= (</span><span class="hl kwa">function</span><span class="hl opt">() {</span>
    <span class="hl kwa">var</span> excludedPrototypes <span class="hl opt">= [</span>
        Array<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">,</span>
        Object<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">,</span>
        Function<span class="hl opt">.</span><span class="hl kwa">prototype</span>
    <span class="hl opt">];</span>

    <span class="hl kwa">var</span> <span class="hl kwd">isExcludedProto</span> <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>val<span class="hl opt">) {</span>
        <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> excludedPrototypes<span class="hl opt">.</span>length<span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>excludedPrototypes<span class="hl opt">[</span>i<span class="hl opt">] ===</span> val<span class="hl opt">) {</span>
                <span class="hl kwa">return true</span><span class="hl opt">;</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">return false</span><span class="hl opt">;</span>
    <span class="hl opt">};</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>es5<span class="hl opt">.</span>isES5<span class="hl opt">) {</span>
        <span class="hl kwa">var</span> getKeys <span class="hl opt">=</span> Object<span class="hl opt">.</span>getOwnPropertyNames<span class="hl opt">;</span>
        <span class="hl kwa">return function</span><span class="hl opt">(</span>obj<span class="hl opt">) {</span>
            <span class="hl kwa">var</span> ret <span class="hl opt">= [];</span>
            <span class="hl kwa">var</span> visitedKeys <span class="hl opt">=</span> Object<span class="hl opt">.</span><span class="hl kwd">create</span><span class="hl opt">(</span><span class="hl kwa">null</span><span class="hl opt">);</span>
            <span class="hl kwa">while</span> <span class="hl opt">(</span>obj <span class="hl opt">!=</span> <span class="hl kwa">null</span> <span class="hl opt">&amp;&amp; !</span><span class="hl kwd">isExcludedProto</span><span class="hl opt">(</span>obj<span class="hl opt">)) {</span>
                <span class="hl kwa">var</span> keys<span class="hl opt">;</span>
                <span class="hl kwa">try</span> <span class="hl opt">{</span>
                    keys <span class="hl opt">=</span> <span class="hl kwd">getKeys</span><span class="hl opt">(</span>obj<span class="hl opt">);</span>
                <span class="hl opt">}</span> <span class="hl kwa">catch</span> <span class="hl opt">(</span>e<span class="hl opt">) {</span>
                    <span class="hl kwa">return</span> ret<span class="hl opt">;</span>
                <span class="hl opt">}</span>
                <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> keys<span class="hl opt">.</span>length<span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
                    <span class="hl kwa">var</span> key <span class="hl opt">=</span> keys<span class="hl opt">[</span>i<span class="hl opt">];</span>
                    <span class="hl kwa">if</span> <span class="hl opt">(</span>visitedKeys<span class="hl opt">[</span>key<span class="hl opt">])</span> <span class="hl kwa">continue</span><span class="hl opt">;</span>
                    visitedKeys<span class="hl opt">[</span>key<span class="hl opt">] =</span> <span class="hl kwa">true</span><span class="hl opt">;</span>
                    <span class="hl kwa">var</span> desc <span class="hl opt">=</span> Object<span class="hl opt">.</span><span class="hl kwd">getOwnPropertyDescriptor</span><span class="hl opt">(</span>obj<span class="hl opt">,</span> key<span class="hl opt">);</span>
                    <span class="hl kwa">if</span> <span class="hl opt">(</span>desc <span class="hl opt">!=</span> <span class="hl kwa">null</span> <span class="hl opt">&amp;&amp;</span> desc<span class="hl opt">.</span><span class="hl kwa">get</span> <span class="hl opt">==</span> <span class="hl kwa">null</span> <span class="hl opt">&amp;&amp;</span> desc<span class="hl opt">.</span><span class="hl kwa">set</span> <span class="hl opt">==</span> <span class="hl kwa">null</span><span class="hl opt">) {</span>
                        ret<span class="hl opt">.</span><span class="hl kwd">push</span><span class="hl opt">(</span>key<span class="hl opt">);</span>
                    <span class="hl opt">}</span>
                <span class="hl opt">}</span>
                obj <span class="hl opt">=</span> es5<span class="hl opt">.</span><span class="hl kwd">getPrototypeOf</span><span class="hl opt">(</span>obj<span class="hl opt">);</span>
            <span class="hl opt">}</span>
            <span class="hl kwa">return</span> ret<span class="hl opt">;</span>
        <span class="hl opt">};</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
        <span class="hl kwa">var</span> hasProp <span class="hl opt">= {}.</span>hasOwnProperty<span class="hl opt">;</span>
        <span class="hl kwa">return function</span><span class="hl opt">(</span>obj<span class="hl opt">) {</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">isExcludedProto</span><span class="hl opt">(</span>obj<span class="hl opt">))</span> <span class="hl kwa">return</span> <span class="hl opt">[];</span>
            <span class="hl kwa">var</span> ret <span class="hl opt">= [];</span>

            <span class="hl com">/*jshint forin:false */</span>
            enumeration<span class="hl opt">:</span> <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> key <span class="hl kwa">in</span> obj<span class="hl opt">) {</span>
                <span class="hl kwa">if</span> <span class="hl opt">(</span>hasProp<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span>obj<span class="hl opt">,</span> key<span class="hl opt">)) {</span>
                    ret<span class="hl opt">.</span><span class="hl kwd">push</span><span class="hl opt">(</span>key<span class="hl opt">);</span>
                <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
                    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> excludedPrototypes<span class="hl opt">.</span>length<span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
                        <span class="hl kwa">if</span> <span class="hl opt">(</span>hasProp<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span>excludedPrototypes<span class="hl opt">[</span>i<span class="hl opt">],</span> key<span class="hl opt">)) {</span>
                            <span class="hl kwa">continue</span> enumeration<span class="hl opt">;</span>
                        <span class="hl opt">}</span>
                    <span class="hl opt">}</span>
                    ret<span class="hl opt">.</span><span class="hl kwd">push</span><span class="hl opt">(</span>key<span class="hl opt">);</span>
                <span class="hl opt">}</span>
            <span class="hl opt">}</span>
            <span class="hl kwa">return</span> ret<span class="hl opt">;</span>
        <span class="hl opt">};</span>
    <span class="hl opt">}</span>

<span class="hl opt">})();</span>

<span class="hl kwa">var</span> thisAssignmentPattern <span class="hl opt">=</span> <span class="hl kwc">/this\s*\.\s*\S+\s*=/</span><span class="hl opt">;</span>
<span class="hl kwa">function</span> <span class="hl kwd">isClass</span><span class="hl opt">(</span>fn<span class="hl opt">) {</span>
    <span class="hl kwa">try</span> <span class="hl opt">{</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> fn <span class="hl opt">===</span> <span class="hl str">&quot;function&quot;</span><span class="hl opt">) {</span>
            <span class="hl kwa">var</span> keys <span class="hl opt">=</span> es5<span class="hl opt">.</span><span class="hl kwd">names</span><span class="hl opt">(</span>fn<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">);</span>

            <span class="hl kwa">var</span> hasMethods <span class="hl opt">=</span> es5<span class="hl opt">.</span>isES5 <span class="hl opt">&amp;&amp;</span> keys<span class="hl opt">.</span>length <span class="hl opt">&gt;</span> <span class="hl num">1</span><span class="hl opt">;</span>
            <span class="hl kwa">var</span> hasMethodsOtherThanConstructor <span class="hl opt">=</span> keys<span class="hl opt">.</span>length <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span>
                <span class="hl opt">!(</span>keys<span class="hl opt">.</span>length <span class="hl opt">===</span> <span class="hl num">1</span> <span class="hl opt">&amp;&amp;</span> keys<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] ===</span> <span class="hl str">&quot;constructor&quot;</span><span class="hl opt">);</span>
            <span class="hl kwa">var</span> hasThisAssignmentAndStaticMethods <span class="hl opt">=</span>
                thisAssignmentPattern<span class="hl opt">.</span><span class="hl kwd">test</span><span class="hl opt">(</span>fn <span class="hl opt">+</span> <span class="hl str">&quot;&quot;</span><span class="hl opt">) &amp;&amp;</span> es5<span class="hl opt">.</span><span class="hl kwd">names</span><span class="hl opt">(</span>fn<span class="hl opt">).</span>length <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">;</span>

            <span class="hl kwa">if</span> <span class="hl opt">(</span>hasMethods <span class="hl opt">||</span> hasMethodsOtherThanConstructor <span class="hl opt">||</span>
                hasThisAssignmentAndStaticMethods<span class="hl opt">) {</span>
                <span class="hl kwa">return true</span><span class="hl opt">;</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">return false</span><span class="hl opt">;</span>
    <span class="hl opt">}</span> <span class="hl kwa">catch</span> <span class="hl opt">(</span>e<span class="hl opt">) {</span>
        <span class="hl kwa">return false</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">toFastProperties</span><span class="hl opt">(</span>obj<span class="hl opt">) {</span>
    <span class="hl com">/*jshint -W027,-W055,-W031*/</span>
    <span class="hl kwa">function</span> <span class="hl kwd">f</span><span class="hl opt">() {}</span>
    f<span class="hl opt">.</span><span class="hl kwa">prototype</span> <span class="hl opt">=</span> obj<span class="hl opt">;</span>
    <span class="hl kwa">var</span> l <span class="hl opt">=</span> <span class="hl num">8</span><span class="hl opt">;</span>
    <span class="hl kwa">while</span> <span class="hl opt">(</span>l<span class="hl opt">--)</span> <span class="hl kwa">new</span> <span class="hl kwd">f</span><span class="hl opt">();</span>
    <span class="hl kwa">return</span> obj<span class="hl opt">;</span>
    <span class="hl kwd">eval</span><span class="hl opt">(</span>obj<span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwa">var</span> rident <span class="hl opt">=</span> <span class="hl kwc">/^[a-z$_][a-z$_0-9]*$/i</span><span class="hl opt">;</span>
<span class="hl kwa">function</span> <span class="hl kwd">isIdentifier</span><span class="hl opt">(</span>str<span class="hl opt">) {</span>
    <span class="hl kwa">return</span> rident<span class="hl opt">.</span><span class="hl kwd">test</span><span class="hl opt">(</span>str<span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">filledRange</span><span class="hl opt">(</span>count<span class="hl opt">,</span> prefix<span class="hl opt">,</span> suffix<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> ret <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Array</span><span class="hl opt">(</span>count<span class="hl opt">);</span>
    <span class="hl kwa">for</span><span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> count<span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
        ret<span class="hl opt">[</span>i<span class="hl opt">] =</span> prefix <span class="hl opt">+</span> i <span class="hl opt">+</span> suffix<span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return</span> ret<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">safeToString</span><span class="hl opt">(</span>obj<span class="hl opt">) {</span>
    <span class="hl kwa">try</span> <span class="hl opt">{</span>
        <span class="hl kwa">return</span> obj <span class="hl opt">+</span> <span class="hl str">&quot;&quot;</span><span class="hl opt">;</span>
    <span class="hl opt">}</span> <span class="hl kwa">catch</span> <span class="hl opt">(</span>e<span class="hl opt">) {</span>
        <span class="hl kwa">return</span> <span class="hl str">&quot;[no string representation]&quot;</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">markAsOriginatingFromRejection</span><span class="hl opt">(</span>e<span class="hl opt">) {</span>
    <span class="hl kwa">try</span> <span class="hl opt">{</span>
        <span class="hl kwd">notEnumerableProp</span><span class="hl opt">(</span>e<span class="hl opt">,</span> <span class="hl str">&quot;isOperational&quot;</span><span class="hl opt">,</span> <span class="hl kwa">true</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">catch</span><span class="hl opt">(</span>ignore<span class="hl opt">) {}</span>
<span class="hl opt">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">originatesFromRejection</span><span class="hl opt">(</span>e<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>e <span class="hl opt">==</span> <span class="hl kwa">null</span><span class="hl opt">)</span> <span class="hl kwa">return false</span><span class="hl opt">;</span>
    <span class="hl kwa">return</span> <span class="hl opt">((</span>e <span class="hl kwa">instanceof</span> Error<span class="hl opt">[</span><span class="hl str">&quot;__BluebirdErrorTypes__&quot;</span><span class="hl opt">].</span>OperationalError<span class="hl opt">) ||</span>
        e<span class="hl opt">[</span><span class="hl str">&quot;isOperational&quot;</span><span class="hl opt">] ===</span> <span class="hl kwa">true</span><span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">canAttachTrace</span><span class="hl opt">(</span>obj<span class="hl opt">) {</span>
    <span class="hl kwa">return</span> obj <span class="hl kwa">instanceof</span> Error <span class="hl opt">&amp;&amp;</span> es5<span class="hl opt">.</span><span class="hl kwd">propertyIsWritable</span><span class="hl opt">(</span>obj<span class="hl opt">,</span> <span class="hl str">&quot;stack&quot;</span><span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwa">var</span> ensureErrorObject <span class="hl opt">= (</span><span class="hl kwa">function</span><span class="hl opt">() {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!(</span><span class="hl str">&quot;stack&quot;</span> <span class="hl kwa">in new</span> <span class="hl kwd">Error</span><span class="hl opt">())) {</span>
        <span class="hl kwa">return function</span><span class="hl opt">(</span>value<span class="hl opt">) {</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">canAttachTrace</span><span class="hl opt">(</span>value<span class="hl opt">))</span> <span class="hl kwa">return</span> value<span class="hl opt">;</span>
            <span class="hl kwa">try</span> <span class="hl opt">{</span><span class="hl kwa">throw new</span> <span class="hl kwd">Error</span><span class="hl opt">(</span><span class="hl kwd">safeToString</span><span class="hl opt">(</span>value<span class="hl opt">));}</span>
            <span class="hl kwa">catch</span><span class="hl opt">(</span>err<span class="hl opt">) {</span><span class="hl kwa">return</span> err<span class="hl opt">;}</span>
        <span class="hl opt">};</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
        <span class="hl kwa">return function</span><span class="hl opt">(</span>value<span class="hl opt">) {</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">canAttachTrace</span><span class="hl opt">(</span>value<span class="hl opt">))</span> <span class="hl kwa">return</span> value<span class="hl opt">;</span>
            <span class="hl kwa">return new</span> <span class="hl kwd">Error</span><span class="hl opt">(</span><span class="hl kwd">safeToString</span><span class="hl opt">(</span>value<span class="hl opt">));</span>
        <span class="hl opt">};</span>
    <span class="hl opt">}</span>
<span class="hl opt">})();</span>

<span class="hl kwa">function</span> <span class="hl kwd">classString</span><span class="hl opt">(</span>obj<span class="hl opt">) {</span>
    <span class="hl kwa">return</span> <span class="hl opt">{}.</span>toString<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span>obj<span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">copyDescriptors</span><span class="hl opt">(</span>from<span class="hl opt">,</span> to<span class="hl opt">,</span> filter<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> keys <span class="hl opt">=</span> es5<span class="hl opt">.</span><span class="hl kwd">names</span><span class="hl opt">(</span>from<span class="hl opt">);</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> keys<span class="hl opt">.</span>length<span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
        <span class="hl kwa">var</span> key <span class="hl opt">=</span> keys<span class="hl opt">[</span>i<span class="hl opt">];</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">filter</span><span class="hl opt">(</span>key<span class="hl opt">)) {</span>
            <span class="hl kwa">try</span> <span class="hl opt">{</span>
                es5<span class="hl opt">.</span><span class="hl kwd">defineProperty</span><span class="hl opt">(</span>to<span class="hl opt">,</span> key<span class="hl opt">,</span> es5<span class="hl opt">.</span><span class="hl kwd">getDescriptor</span><span class="hl opt">(</span>from<span class="hl opt">,</span> key<span class="hl opt">));</span>
            <span class="hl opt">}</span> <span class="hl kwa">catch</span> <span class="hl opt">(</span>ignore<span class="hl opt">) {}</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwa">var</span> ret <span class="hl opt">= {</span>
    isClass<span class="hl opt">:</span> isClass<span class="hl opt">,</span>
    isIdentifier<span class="hl opt">:</span> isIdentifier<span class="hl opt">,</span>
    inheritedDataKeys<span class="hl opt">:</span> inheritedDataKeys<span class="hl opt">,</span>
    getDataPropertyOrDefault<span class="hl opt">:</span> getDataPropertyOrDefault<span class="hl opt">,</span>
    thrower<span class="hl opt">:</span> thrower<span class="hl opt">,</span>
    isArray<span class="hl opt">:</span> es5<span class="hl opt">.</span>isArray<span class="hl opt">,</span>
    haveGetters<span class="hl opt">:</span> haveGetters<span class="hl opt">,</span>
    notEnumerableProp<span class="hl opt">:</span> notEnumerableProp<span class="hl opt">,</span>
    isPrimitive<span class="hl opt">:</span> isPrimitive<span class="hl opt">,</span>
    isObject<span class="hl opt">:</span> isObject<span class="hl opt">,</span>
    canEvaluate<span class="hl opt">:</span> canEvaluate<span class="hl opt">,</span>
    errorObj<span class="hl opt">:</span> errorObj<span class="hl opt">,</span>
    tryCatch<span class="hl opt">:</span> tryCatch<span class="hl opt">,</span>
    inherits<span class="hl opt">:</span> inherits<span class="hl opt">,</span>
    withAppended<span class="hl opt">:</span> withAppended<span class="hl opt">,</span>
    maybeWrapAsError<span class="hl opt">:</span> maybeWrapAsError<span class="hl opt">,</span>
    toFastProperties<span class="hl opt">:</span> toFastProperties<span class="hl opt">,</span>
    filledRange<span class="hl opt">:</span> filledRange<span class="hl opt">,</span>
    toString<span class="hl opt">:</span> safeToString<span class="hl opt">,</span>
    canAttachTrace<span class="hl opt">:</span> canAttachTrace<span class="hl opt">,</span>
    ensureErrorObject<span class="hl opt">:</span> ensureErrorObject<span class="hl opt">,</span>
    originatesFromRejection<span class="hl opt">:</span> originatesFromRejection<span class="hl opt">,</span>
    markAsOriginatingFromRejection<span class="hl opt">:</span> markAsOriginatingFromRejection<span class="hl opt">,</span>
    classString<span class="hl opt">:</span> classString<span class="hl opt">,</span>
    copyDescriptors<span class="hl opt">:</span> copyDescriptors<span class="hl opt">,</span>
    hasDevTools<span class="hl opt">:</span> <span class="hl kwa">typeof</span> chrome <span class="hl opt">!==</span> <span class="hl str">&quot;undefined&quot;</span> <span class="hl opt">&amp;&amp;</span> chrome <span class="hl opt">&amp;&amp;</span>
                 <span class="hl kwa">typeof</span> chrome<span class="hl opt">.</span>loadTimes <span class="hl opt">===</span> <span class="hl str">&quot;function&quot;</span><span class="hl opt">,</span>
    isNode<span class="hl opt">:</span> <span class="hl kwa">typeof</span> process <span class="hl opt">!==</span> <span class="hl str">&quot;undefined&quot;</span> <span class="hl opt">&amp;&amp;</span>
        <span class="hl kwd">classString</span><span class="hl opt">(</span>process<span class="hl opt">).</span><span class="hl kwd">toLowerCase</span><span class="hl opt">() ===</span> <span class="hl str">&quot;[object process]&quot;</span>
<span class="hl opt">};</span>
ret<span class="hl opt">.</span>isRecentNode <span class="hl opt">=</span> ret<span class="hl opt">.</span>isNode <span class="hl opt">&amp;&amp; (</span><span class="hl kwa">function</span><span class="hl opt">() {</span>
    <span class="hl kwa">var</span> version <span class="hl opt">=</span> process<span class="hl opt">.</span>versions<span class="hl opt">.</span>node<span class="hl opt">.</span><span class="hl kwd">split</span><span class="hl opt">(</span><span class="hl str">&quot;.&quot;</span><span class="hl opt">).</span><span class="hl kwd">map</span><span class="hl opt">(</span>Number<span class="hl opt">);</span>
    <span class="hl kwa">return</span> <span class="hl opt">(</span>version<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] ===</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span> version<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] &gt;</span> <span class="hl num">10</span><span class="hl opt">) || (</span>version<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] &gt;</span> <span class="hl num">0</span><span class="hl opt">);</span>
<span class="hl opt">})();</span>

<span class="hl kwa">if</span> <span class="hl opt">(</span>ret<span class="hl opt">.</span>isNode<span class="hl opt">)</span> ret<span class="hl opt">.</span><span class="hl kwd">toFastProperties</span><span class="hl opt">(</span>process<span class="hl opt">);</span>

<span class="hl kwa">try</span> <span class="hl opt">{</span><span class="hl kwa">throw new</span> <span class="hl kwd">Error</span><span class="hl opt">(); }</span> <span class="hl kwa">catch</span> <span class="hl opt">(</span>e<span class="hl opt">) {</span>ret<span class="hl opt">.</span>lastLineError <span class="hl opt">=</span> e<span class="hl opt">;}</span>
module<span class="hl opt">.</span>exports <span class="hl opt">=</span> ret<span class="hl opt">;</span>

<span class="hl opt">},{</span><span class="hl str">&quot;./es5.js&quot;</span><span class="hl opt">:</span><span class="hl num">14</span><span class="hl opt">}]},{},[</span><span class="hl num">4</span><span class="hl opt">])(</span><span class="hl num">4</span><span class="hl opt">)</span>
<span class="hl opt">});                    ;</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> window <span class="hl opt">!==</span> <span class="hl str">'undefined'</span> <span class="hl opt">&amp;&amp;</span> window <span class="hl opt">!==</span> <span class="hl kwa">null</span><span class="hl opt">) {</span>                               window<span class="hl opt">.</span>P <span class="hl opt">=</span> window<span class="hl opt">.</span>Promise<span class="hl opt">;                                                     }</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> self <span class="hl opt">!==</span> <span class="hl str">'undefined'</span> <span class="hl opt">&amp;&amp;</span> self <span class="hl opt">!==</span> <span class="hl kwa">null</span><span class="hl opt">) {</span>                             self<span class="hl opt">.</span>P <span class="hl opt">=</span> self<span class="hl opt">.</span>Promise<span class="hl opt">;                                                         }</span>
<span class="hl opt">}).</span><span class="hl kwd">call</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span><span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'_process'</span><span class="hl opt">),</span><span class="hl kwa">typeof</span> global <span class="hl opt">!==</span> <span class="hl str">&quot;undefined&quot;</span> <span class="hl opt">?</span> global <span class="hl opt">:</span> <span class="hl kwa">typeof</span> self <span class="hl opt">!==</span> <span class="hl str">&quot;undefined&quot;</span> <span class="hl opt">?</span> self <span class="hl opt">:</span> <span class="hl kwa">typeof</span> window <span class="hl opt">!==</span> <span class="hl str">&quot;undefined&quot;</span> <span class="hl opt">?</span> window <span class="hl opt">: {})</span>
<span class="hl slc">//# sourceMappingURL=data:application/json;charset:utf-8;base64,</span>
<span class="hl opt">},{</span><span class="hl str">&quot;_process&quot;</span><span class="hl opt">:</span><span class="hl num">163</span><span class="hl opt">}],</span><span class="hl num">29</span><span class="hl opt">:[</span><span class="hl kwa">function</span><span class="hl opt">(</span>require<span class="hl opt">,</span>module<span class="hl opt">,</span>exports<span class="hl opt">){</span>
<span class="hl opt">(</span><span class="hl kwa">function</span> <span class="hl opt">(</span>module<span class="hl opt">,</span> exports<span class="hl opt">) {</span>
  <span class="hl str">'use strict'</span><span class="hl opt">;</span>

  <span class="hl slc">// Utils</span>
  <span class="hl kwa">function</span> <span class="hl kwd">assert</span> <span class="hl opt">(</span>val<span class="hl opt">,</span> msg<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!</span>val<span class="hl opt">)</span> <span class="hl kwa">throw new</span> <span class="hl kwd">Error</span><span class="hl opt">(</span>msg <span class="hl opt">||</span> <span class="hl str">'Assertion failed'</span><span class="hl opt">);</span>
  <span class="hl opt">}</span>

  <span class="hl slc">// Could use `inherits` module, but don't want to move from single file</span>
  <span class="hl slc">// architecture yet.</span>
  <span class="hl kwa">function</span> <span class="hl kwd">inherits</span> <span class="hl opt">(</span>ctor<span class="hl opt">,</span> superCtor<span class="hl opt">) {</span>
    ctor<span class="hl opt">.</span>super_ <span class="hl opt">=</span> superCtor<span class="hl opt">;</span>
    <span class="hl kwa">var</span> <span class="hl kwd">TempCtor</span> <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl opt">() {};</span>
    TempCtor<span class="hl opt">.</span><span class="hl kwa">prototype</span> <span class="hl opt">=</span> superCtor<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">;</span>
    ctor<span class="hl opt">.</span><span class="hl kwa">prototype</span> <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">TempCtor</span><span class="hl opt">();</span>
    ctor<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>constructor <span class="hl opt">=</span> ctor<span class="hl opt">;</span>
  <span class="hl opt">}</span>

  <span class="hl slc">// BN</span>

  <span class="hl kwa">function</span> <span class="hl kwd">BN</span> <span class="hl opt">(</span>number<span class="hl opt">,</span> base<span class="hl opt">,</span> endian<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>BN<span class="hl opt">.</span><span class="hl kwd">isBN</span><span class="hl opt">(</span>number<span class="hl opt">)) {</span>
      <span class="hl kwa">return</span> number<span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">this</span><span class="hl opt">.</span>negative <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>words <span class="hl opt">=</span> <span class="hl kwa">null</span><span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>

    <span class="hl slc">// Reduction context</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>red <span class="hl opt">=</span> <span class="hl kwa">null</span><span class="hl opt">;</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>number <span class="hl opt">!==</span> <span class="hl kwa">null</span><span class="hl opt">) {</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>base <span class="hl opt">===</span> <span class="hl str">'le'</span> <span class="hl opt">||</span> base <span class="hl opt">===</span> <span class="hl str">'be'</span><span class="hl opt">) {</span>
        endian <span class="hl opt">=</span> base<span class="hl opt">;</span>
        base <span class="hl opt">=</span> <span class="hl num">10</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>

      <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_init</span><span class="hl opt">(</span>number <span class="hl opt">||</span> <span class="hl num">0</span><span class="hl opt">,</span> base <span class="hl opt">||</span> <span class="hl num">10</span><span class="hl opt">,</span> endian <span class="hl opt">||</span> <span class="hl str">'be'</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
  <span class="hl opt">}</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> module <span class="hl opt">===</span> <span class="hl str">'object'</span><span class="hl opt">) {</span>
    module<span class="hl opt">.</span>exports <span class="hl opt">=</span> BN<span class="hl opt">;</span>
  <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
    exports<span class="hl opt">.</span>BN <span class="hl opt">=</span> BN<span class="hl opt">;</span>
  <span class="hl opt">}</span>

  BN<span class="hl opt">.</span>BN <span class="hl opt">=</span> BN<span class="hl opt">;</span>
  BN<span class="hl opt">.</span>wordSize <span class="hl opt">=</span> <span class="hl num">26</span><span class="hl opt">;</span>

  <span class="hl kwa">var</span> Buffer<span class="hl opt">;</span>
  <span class="hl kwa">try</span> <span class="hl opt">{</span>
    Buffer <span class="hl opt">=</span> <span class="hl kwd">require</span><span class="hl opt">(</span><span class="hl str">'buf'</span> <span class="hl opt">+</span> <span class="hl str">'fer'</span><span class="hl opt">).</span>Buffer<span class="hl opt">;</span>
  <span class="hl opt">}</span> <span class="hl kwa">catch</span> <span class="hl opt">(</span>e<span class="hl opt">) {</span>
  <span class="hl opt">}</span>

  BN<span class="hl opt">.</span>isBN <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">isBN</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwa">return</span> num <span class="hl opt">!==</span> <span class="hl kwa">null</span> <span class="hl opt">&amp;&amp;</span> <span class="hl kwa">typeof</span> num <span class="hl opt">===</span> <span class="hl str">'object'</span> <span class="hl opt">&amp;&amp;</span>
      num<span class="hl opt">.</span>constructor<span class="hl opt">.</span>name <span class="hl opt">===</span> <span class="hl str">'BN'</span> <span class="hl opt">&amp;&amp;</span> Array<span class="hl opt">.</span><span class="hl kwd">isArray</span><span class="hl opt">(</span>num<span class="hl opt">.</span>words<span class="hl opt">);</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span>max <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">max</span> <span class="hl opt">(</span>left<span class="hl opt">,</span> right<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>left<span class="hl opt">.</span><span class="hl kwd">cmp</span><span class="hl opt">(</span>right<span class="hl opt">) &gt;</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">return</span> left<span class="hl opt">;</span>
    <span class="hl kwa">return</span> right<span class="hl opt">;</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span>min <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">min</span> <span class="hl opt">(</span>left<span class="hl opt">,</span> right<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>left<span class="hl opt">.</span><span class="hl kwd">cmp</span><span class="hl opt">(</span>right<span class="hl opt">) &lt;</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">return</span> left<span class="hl opt">;</span>
    <span class="hl kwa">return</span> right<span class="hl opt">;</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_init <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">init</span> <span class="hl opt">(</span>number<span class="hl opt">,</span> base<span class="hl opt">,</span> endian<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> number <span class="hl opt">===</span> <span class="hl str">'number'</span><span class="hl opt">) {</span>
      <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_initNumber</span><span class="hl opt">(</span>number<span class="hl opt">,</span> base<span class="hl opt">,</span> endian<span class="hl opt">);</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span> number <span class="hl opt">===</span> <span class="hl str">'object'</span><span class="hl opt">) {</span>
      <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_initArray</span><span class="hl opt">(</span>number<span class="hl opt">,</span> base<span class="hl opt">,</span> endian<span class="hl opt">);</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>base <span class="hl opt">===</span> <span class="hl str">'hex'</span><span class="hl opt">) {</span>
      base <span class="hl opt">=</span> <span class="hl num">16</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwd">assert</span><span class="hl opt">(</span>base <span class="hl opt">=== (</span>base <span class="hl opt">|</span> <span class="hl num">0</span><span class="hl opt">) &amp;&amp;</span> base <span class="hl opt">&gt;=</span> <span class="hl num">2</span> <span class="hl opt">&amp;&amp;</span> base <span class="hl opt">&lt;=</span> <span class="hl num">36</span><span class="hl opt">);</span>

    number <span class="hl opt">=</span> number<span class="hl opt">.</span><span class="hl kwd">toString</span><span class="hl opt">().</span><span class="hl kwd">replace</span><span class="hl opt">(</span><span class="hl kwc">/\s+/g</span><span class="hl opt">,</span> <span class="hl str">''</span><span class="hl opt">);</span>
    <span class="hl kwa">var</span> start <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>number<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] ===</span> <span class="hl str">'-'</span><span class="hl opt">) {</span>
      start<span class="hl opt">++;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>base <span class="hl opt">===</span> <span class="hl num">16</span><span class="hl opt">) {</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_parseHex</span><span class="hl opt">(</span>number<span class="hl opt">,</span> start<span class="hl opt">);</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_parseBase</span><span class="hl opt">(</span>number<span class="hl opt">,</span> base<span class="hl opt">,</span> start<span class="hl opt">);</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>number<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] ===</span> <span class="hl str">'-'</span><span class="hl opt">) {</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>negative <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">strip</span><span class="hl opt">();</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>endian <span class="hl opt">!==</span> <span class="hl str">'le'</span><span class="hl opt">)</span> <span class="hl kwa">return</span><span class="hl opt">;</span>

    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_initArray</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">toArray</span><span class="hl opt">(),</span> base<span class="hl opt">,</span> endian<span class="hl opt">);</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_initNumber <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">_initNumber</span> <span class="hl opt">(</span>number<span class="hl opt">,</span> base<span class="hl opt">,</span> endian<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>number <span class="hl opt">&lt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>negative <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>
      number <span class="hl opt">= -</span>number<span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>number <span class="hl opt">&lt;</span> <span class="hl num">0x4000000</span><span class="hl opt">) {</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>words <span class="hl opt">= [</span> number <span class="hl opt">&amp;</span> <span class="hl num">0x3ffffff</span> <span class="hl opt">];</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>
    <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>number <span class="hl opt">&lt;</span> <span class="hl num">0x10000000000000</span><span class="hl opt">) {</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>words <span class="hl opt">= [</span>
        number <span class="hl opt">&amp;</span> <span class="hl num">0x3ffffff</span><span class="hl opt">,</span>
        <span class="hl opt">(</span>number <span class="hl opt">/</span> <span class="hl num">0x4000000</span><span class="hl opt">) &amp;</span> <span class="hl num">0x3ffffff</span>
      <span class="hl opt">];</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">=</span> <span class="hl num">2</span><span class="hl opt">;</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
      <span class="hl kwd">assert</span><span class="hl opt">(</span>number <span class="hl opt">&lt;</span> <span class="hl num">0x20000000000000</span><span class="hl opt">);</span> <span class="hl slc">// 2 ^ 53 (unsafe)</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>words <span class="hl opt">= [</span>
        number <span class="hl opt">&amp;</span> <span class="hl num">0x3ffffff</span><span class="hl opt">,</span>
        <span class="hl opt">(</span>number <span class="hl opt">/</span> <span class="hl num">0x4000000</span><span class="hl opt">) &amp;</span> <span class="hl num">0x3ffffff</span><span class="hl opt">,</span>
        <span class="hl num">1</span>
      <span class="hl opt">];</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">=</span> <span class="hl num">3</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>endian <span class="hl opt">!==</span> <span class="hl str">'le'</span><span class="hl opt">)</span> <span class="hl kwa">return</span><span class="hl opt">;</span>

    <span class="hl slc">// Reverse the bytes</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_initArray</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">toArray</span><span class="hl opt">(),</span> base<span class="hl opt">,</span> endian<span class="hl opt">);</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_initArray <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">_initArray</span> <span class="hl opt">(</span>number<span class="hl opt">,</span> base<span class="hl opt">,</span> endian<span class="hl opt">) {</span>
    <span class="hl slc">// Perhaps a Uint8Array</span>
    <span class="hl kwd">assert</span><span class="hl opt">(</span><span class="hl kwa">typeof</span> number<span class="hl opt">.</span>length <span class="hl opt">===</span> <span class="hl str">'number'</span><span class="hl opt">);</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>number<span class="hl opt">.</span>length <span class="hl opt">&lt;=</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>words <span class="hl opt">= [</span> <span class="hl num">0</span> <span class="hl opt">];</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>
      <span class="hl kwa">return this</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">ceil</span><span class="hl opt">(</span>number<span class="hl opt">.</span>length <span class="hl opt">/</span> <span class="hl num">3</span><span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>words <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Array</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>length<span class="hl opt">);</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> <span class="hl kwa">this</span><span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] =</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">var</span> j<span class="hl opt">,</span> w<span class="hl opt">;</span>
    <span class="hl kwa">var</span> off <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>endian <span class="hl opt">===</span> <span class="hl str">'be'</span><span class="hl opt">) {</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> number<span class="hl opt">.</span>length <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">,</span> j <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&gt;=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">-=</span> <span class="hl num">3</span><span class="hl opt">) {</span>
        w <span class="hl opt">=</span> number<span class="hl opt">[</span>i<span class="hl opt">] | (</span>number<span class="hl opt">[</span>i <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">] &lt;&lt;</span> <span class="hl num">8</span><span class="hl opt">) | (</span>number<span class="hl opt">[</span>i <span class="hl opt">-</span> <span class="hl num">2</span><span class="hl opt">] &lt;&lt;</span> <span class="hl num">16</span><span class="hl opt">);</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>j<span class="hl opt">] |= (</span>w <span class="hl opt">&lt;&lt;</span> off<span class="hl opt">) &amp;</span> <span class="hl num">0x3ffffff</span><span class="hl opt">;</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>j <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">] = (</span>w <span class="hl opt">&gt;&gt;&gt; (</span><span class="hl num">26</span> <span class="hl opt">-</span> off<span class="hl opt">)) &amp;</span> <span class="hl num">0x3ffffff</span><span class="hl opt">;</span>
        off <span class="hl opt">+=</span> <span class="hl num">24</span><span class="hl opt">;</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>off <span class="hl opt">&gt;=</span> <span class="hl num">26</span><span class="hl opt">) {</span>
          off <span class="hl opt">-=</span> <span class="hl num">26</span><span class="hl opt">;</span>
          j<span class="hl opt">++;</span>
        <span class="hl opt">}</span>
      <span class="hl opt">}</span>
    <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>endian <span class="hl opt">===</span> <span class="hl str">'le'</span><span class="hl opt">) {</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> j <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> number<span class="hl opt">.</span>length<span class="hl opt">;</span> i <span class="hl opt">+=</span> <span class="hl num">3</span><span class="hl opt">) {</span>
        w <span class="hl opt">=</span> number<span class="hl opt">[</span>i<span class="hl opt">] | (</span>number<span class="hl opt">[</span>i <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">] &lt;&lt;</span> <span class="hl num">8</span><span class="hl opt">) | (</span>number<span class="hl opt">[</span>i <span class="hl opt">+</span> <span class="hl num">2</span><span class="hl opt">] &lt;&lt;</span> <span class="hl num">16</span><span class="hl opt">);</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>j<span class="hl opt">] |= (</span>w <span class="hl opt">&lt;&lt;</span> off<span class="hl opt">) &amp;</span> <span class="hl num">0x3ffffff</span><span class="hl opt">;</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>j <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">] = (</span>w <span class="hl opt">&gt;&gt;&gt; (</span><span class="hl num">26</span> <span class="hl opt">-</span> off<span class="hl opt">)) &amp;</span> <span class="hl num">0x3ffffff</span><span class="hl opt">;</span>
        off <span class="hl opt">+=</span> <span class="hl num">24</span><span class="hl opt">;</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>off <span class="hl opt">&gt;=</span> <span class="hl num">26</span><span class="hl opt">) {</span>
          off <span class="hl opt">-=</span> <span class="hl num">26</span><span class="hl opt">;</span>
          j<span class="hl opt">++;</span>
        <span class="hl opt">}</span>
      <span class="hl opt">}</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">strip</span><span class="hl opt">();</span>
  <span class="hl opt">};</span>

  <span class="hl kwa">function</span> <span class="hl kwd">parseHex</span> <span class="hl opt">(</span>str<span class="hl opt">,</span> start<span class="hl opt">,</span> end<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> r <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> len <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">min</span><span class="hl opt">(</span>str<span class="hl opt">.</span>length<span class="hl opt">,</span> end<span class="hl opt">);</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> start<span class="hl opt">;</span> i <span class="hl opt">&lt;</span> len<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
      <span class="hl kwa">var</span> c <span class="hl opt">=</span> str<span class="hl opt">.</span><span class="hl kwd">charCodeAt</span><span class="hl opt">(</span>i<span class="hl opt">) -</span> <span class="hl num">48</span><span class="hl opt">;</span>

      r <span class="hl opt">&lt;&lt;=</span> <span class="hl num">4</span><span class="hl opt">;</span>

      <span class="hl slc">// 'a' - 'f'</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>c <span class="hl opt">&gt;=</span> <span class="hl num">49</span> <span class="hl opt">&amp;&amp;</span> c <span class="hl opt">&lt;=</span> <span class="hl num">54</span><span class="hl opt">) {</span>
        r <span class="hl opt">|=</span> c <span class="hl opt">-</span> <span class="hl num">49</span> <span class="hl opt">+</span> <span class="hl num">0xa</span><span class="hl opt">;</span>

      <span class="hl slc">// 'A' - 'F'</span>
      <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>c <span class="hl opt">&gt;=</span> <span class="hl num">17</span> <span class="hl opt">&amp;&amp;</span> c <span class="hl opt">&lt;=</span> <span class="hl num">22</span><span class="hl opt">) {</span>
        r <span class="hl opt">|=</span> c <span class="hl opt">-</span> <span class="hl num">17</span> <span class="hl opt">+</span> <span class="hl num">0xa</span><span class="hl opt">;</span>

      <span class="hl slc">// '0' - '9'</span>
      <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
        r <span class="hl opt">|=</span> c <span class="hl opt">&amp;</span> <span class="hl num">0xf</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return</span> r<span class="hl opt">;</span>
  <span class="hl opt">}</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_parseHex <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">_parseHex</span> <span class="hl opt">(</span>number<span class="hl opt">,</span> start<span class="hl opt">) {</span>
    <span class="hl slc">// Create possibly bigger array to ensure that it fits the number</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">ceil</span><span class="hl opt">((</span>number<span class="hl opt">.</span>length <span class="hl opt">-</span> start<span class="hl opt">) /</span> <span class="hl num">6</span><span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>words <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Array</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>length<span class="hl opt">);</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> <span class="hl kwa">this</span><span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] =</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">var</span> j<span class="hl opt">,</span> w<span class="hl opt">;</span>
    <span class="hl slc">// Scan 24-bit chunks and add them to the number</span>
    <span class="hl kwa">var</span> off <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> number<span class="hl opt">.</span>length <span class="hl opt">-</span> <span class="hl num">6</span><span class="hl opt">,</span> j <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&gt;=</span> start<span class="hl opt">;</span> i <span class="hl opt">-=</span> <span class="hl num">6</span><span class="hl opt">) {</span>
      w <span class="hl opt">=</span> <span class="hl kwd">parseHex</span><span class="hl opt">(</span>number<span class="hl opt">,</span> i<span class="hl opt">,</span> i <span class="hl opt">+</span> <span class="hl num">6</span><span class="hl opt">);</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>j<span class="hl opt">] |= (</span>w <span class="hl opt">&lt;&lt;</span> off<span class="hl opt">) &amp;</span> <span class="hl num">0x3ffffff</span><span class="hl opt">;</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>j <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">] |=</span> w <span class="hl opt">&gt;&gt;&gt; (</span><span class="hl num">26</span> <span class="hl opt">-</span> off<span class="hl opt">) &amp;</span> <span class="hl num">0x3fffff</span><span class="hl opt">;</span>
      off <span class="hl opt">+=</span> <span class="hl num">24</span><span class="hl opt">;</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>off <span class="hl opt">&gt;=</span> <span class="hl num">26</span><span class="hl opt">) {</span>
        off <span class="hl opt">-=</span> <span class="hl num">26</span><span class="hl opt">;</span>
        j<span class="hl opt">++;</span>
      <span class="hl opt">}</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>i <span class="hl opt">+</span> <span class="hl num">6</span> <span class="hl opt">!==</span> start<span class="hl opt">) {</span>
      w <span class="hl opt">=</span> <span class="hl kwd">parseHex</span><span class="hl opt">(</span>number<span class="hl opt">,</span> start<span class="hl opt">,</span> i <span class="hl opt">+</span> <span class="hl num">6</span><span class="hl opt">);</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>j<span class="hl opt">] |= (</span>w <span class="hl opt">&lt;&lt;</span> off<span class="hl opt">) &amp;</span> <span class="hl num">0x3ffffff</span><span class="hl opt">;</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>j <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">] |=</span> w <span class="hl opt">&gt;&gt;&gt; (</span><span class="hl num">26</span> <span class="hl opt">-</span> off<span class="hl opt">) &amp;</span> <span class="hl num">0x3fffff</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">strip</span><span class="hl opt">();</span>
  <span class="hl opt">};</span>

  <span class="hl kwa">function</span> <span class="hl kwd">parseBase</span> <span class="hl opt">(</span>str<span class="hl opt">,</span> start<span class="hl opt">,</span> end<span class="hl opt">,</span> mul<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> r <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> len <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">min</span><span class="hl opt">(</span>str<span class="hl opt">.</span>length<span class="hl opt">,</span> end<span class="hl opt">);</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> start<span class="hl opt">;</span> i <span class="hl opt">&lt;</span> len<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
      <span class="hl kwa">var</span> c <span class="hl opt">=</span> str<span class="hl opt">.</span><span class="hl kwd">charCodeAt</span><span class="hl opt">(</span>i<span class="hl opt">) -</span> <span class="hl num">48</span><span class="hl opt">;</span>

      r <span class="hl opt">*=</span> mul<span class="hl opt">;</span>

      <span class="hl slc">// 'a'</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>c <span class="hl opt">&gt;=</span> <span class="hl num">49</span><span class="hl opt">) {</span>
        r <span class="hl opt">+=</span> c <span class="hl opt">-</span> <span class="hl num">49</span> <span class="hl opt">+</span> <span class="hl num">0xa</span><span class="hl opt">;</span>

      <span class="hl slc">// 'A'</span>
      <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>c <span class="hl opt">&gt;=</span> <span class="hl num">17</span><span class="hl opt">) {</span>
        r <span class="hl opt">+=</span> c <span class="hl opt">-</span> <span class="hl num">17</span> <span class="hl opt">+</span> <span class="hl num">0xa</span><span class="hl opt">;</span>

      <span class="hl slc">// '0' - '9'</span>
      <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
        r <span class="hl opt">+=</span> c<span class="hl opt">;</span>
      <span class="hl opt">}</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return</span> r<span class="hl opt">;</span>
  <span class="hl opt">}</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_parseBase <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">_parseBase</span> <span class="hl opt">(</span>number<span class="hl opt">,</span> base<span class="hl opt">,</span> start<span class="hl opt">) {</span>
    <span class="hl slc">// Initialize as zero</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>words <span class="hl opt">= [</span> <span class="hl num">0</span> <span class="hl opt">];</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>

    <span class="hl slc">// Find length of limb in base</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> limbLen <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> limbPow <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span> limbPow <span class="hl opt">&lt;=</span> <span class="hl num">0x3ffffff</span><span class="hl opt">;</span> limbPow <span class="hl opt">*=</span> base<span class="hl opt">) {</span>
      limbLen<span class="hl opt">++;</span>
    <span class="hl opt">}</span>
    limbLen<span class="hl opt">--;</span>
    limbPow <span class="hl opt">= (</span>limbPow <span class="hl opt">/</span> base<span class="hl opt">) |</span> <span class="hl num">0</span><span class="hl opt">;</span>

    <span class="hl kwa">var</span> total <span class="hl opt">=</span> number<span class="hl opt">.</span>length <span class="hl opt">-</span> start<span class="hl opt">;</span>
    <span class="hl kwa">var</span> mod <span class="hl opt">=</span> total <span class="hl opt">%</span> limbLen<span class="hl opt">;</span>
    <span class="hl kwa">var</span> end <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">min</span><span class="hl opt">(</span>total<span class="hl opt">,</span> total <span class="hl opt">-</span> mod<span class="hl opt">) +</span> start<span class="hl opt">;</span>

    <span class="hl kwa">var</span> word <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> start<span class="hl opt">;</span> i <span class="hl opt">&lt;</span> end<span class="hl opt">;</span> i <span class="hl opt">+=</span> limbLen<span class="hl opt">) {</span>
      word <span class="hl opt">=</span> <span class="hl kwd">parseBase</span><span class="hl opt">(</span>number<span class="hl opt">,</span> i<span class="hl opt">,</span> i <span class="hl opt">+</span> limbLen<span class="hl opt">,</span> base<span class="hl opt">);</span>

      <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">imuln</span><span class="hl opt">(</span>limbPow<span class="hl opt">);</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] +</span> word <span class="hl opt">&lt;</span> <span class="hl num">0x4000000</span><span class="hl opt">) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] +=</span> word<span class="hl opt">;</span>
      <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_iaddn</span><span class="hl opt">(</span>word<span class="hl opt">);</span>
      <span class="hl opt">}</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>mod <span class="hl opt">!==</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      <span class="hl kwa">var</span> pow <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>
      word <span class="hl opt">=</span> <span class="hl kwd">parseBase</span><span class="hl opt">(</span>number<span class="hl opt">,</span> i<span class="hl opt">,</span> number<span class="hl opt">.</span>length<span class="hl opt">,</span> base<span class="hl opt">);</span>

      <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> mod<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
        pow <span class="hl opt">*=</span> base<span class="hl opt">;</span>
      <span class="hl opt">}</span>

      <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">imuln</span><span class="hl opt">(</span>pow<span class="hl opt">);</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] +</span> word <span class="hl opt">&lt;</span> <span class="hl num">0x4000000</span><span class="hl opt">) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] +=</span> word<span class="hl opt">;</span>
      <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_iaddn</span><span class="hl opt">(</span>word<span class="hl opt">);</span>
      <span class="hl opt">}</span>
    <span class="hl opt">}</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>copy <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">copy</span> <span class="hl opt">(</span>dest<span class="hl opt">) {</span>
    dest<span class="hl opt">.</span>words <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Array</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>length<span class="hl opt">);</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> <span class="hl kwa">this</span><span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
      dest<span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] =</span> <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">];</span>
    <span class="hl opt">}</span>
    dest<span class="hl opt">.</span>length <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>length<span class="hl opt">;</span>
    dest<span class="hl opt">.</span>negative <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>negative<span class="hl opt">;</span>
    dest<span class="hl opt">.</span>red <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>red<span class="hl opt">;</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>clone <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">clone</span> <span class="hl opt">() {</span>
    <span class="hl kwa">var</span> r <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">BN</span><span class="hl opt">(</span><span class="hl kwa">null</span><span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">copy</span><span class="hl opt">(</span>r<span class="hl opt">);</span>
    <span class="hl kwa">return</span> r<span class="hl opt">;</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_expand <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">_expand</span> <span class="hl opt">(</span>size<span class="hl opt">) {</span>
    <span class="hl kwa">while</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">&lt;</span> size<span class="hl opt">) {</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span><span class="hl kwa">this</span><span class="hl opt">.</span>length<span class="hl opt">++] =</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return this</span><span class="hl opt">;</span>
  <span class="hl opt">};</span>

  <span class="hl slc">// Remove leading `0` from `this`</span>
  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>strip <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">strip</span> <span class="hl opt">() {</span>
    <span class="hl kwa">while</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">&gt;</span> <span class="hl num">1</span> <span class="hl opt">&amp;&amp;</span> <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span><span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">] ===</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>length<span class="hl opt">--;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_normSign</span><span class="hl opt">();</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_normSign <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">_normSign</span> <span class="hl opt">() {</span>
    <span class="hl slc">// -0 = 0</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">===</span> <span class="hl num">1</span> <span class="hl opt">&amp;&amp;</span> <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] ===</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>negative <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return this</span><span class="hl opt">;</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>inspect <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">inspect</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>red <span class="hl opt">?</span> <span class="hl str">'&lt;BN-R: '</span> <span class="hl opt">:</span> <span class="hl str">'&lt;BN: '</span><span class="hl opt">) +</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">toString</span><span class="hl opt">(</span><span class="hl num">16</span><span class="hl opt">) +</span> <span class="hl str">'&gt;'</span><span class="hl opt">;</span>
  <span class="hl opt">};</span>

  <span class="hl com">/*</span>
<span class="hl com"></span>
<span class="hl com">  var zeros = [];</span>
<span class="hl com">  var groupSizes = [];</span>
<span class="hl com">  var groupBases = [];</span>
<span class="hl com"></span>
<span class="hl com">  var s = '';</span>
<span class="hl com">  var i = -1;</span>
<span class="hl com">  while (++i &lt; BN.wordSize) {</span>
<span class="hl com">    zeros[i] = s;</span>
<span class="hl com">    s += '0';</span>
<span class="hl com">  }</span>
<span class="hl com">  groupSizes[0] = 0;</span>
<span class="hl com">  groupSizes[1] = 0;</span>
<span class="hl com">  groupBases[0] = 0;</span>
<span class="hl com">  groupBases[1] = 0;</span>
<span class="hl com">  var base = 2 - 1;</span>
<span class="hl com">  while (++base &lt; 36 + 1) {</span>
<span class="hl com">    var groupSize = 0;</span>
<span class="hl com">    var groupBase = 1;</span>
<span class="hl com">    while (groupBase &lt; (1 &lt;&lt; BN.wordSize) / base) {</span>
<span class="hl com">      groupBase *= base;</span>
<span class="hl com">      groupSize += 1;</span>
<span class="hl com">    }</span>
<span class="hl com">    groupSizes[base] = groupSize;</span>
<span class="hl com">    groupBases[base] = groupBase;</span>
<span class="hl com">  }</span>
<span class="hl com"></span>
<span class="hl com">  */</span>

  <span class="hl kwa">var</span> zeros <span class="hl opt">= [</span>
    <span class="hl str">''</span><span class="hl opt">,</span>
    <span class="hl str">'0'</span><span class="hl opt">,</span>
    <span class="hl str">'00'</span><span class="hl opt">,</span>
    <span class="hl str">'000'</span><span class="hl opt">,</span>
    <span class="hl str">'0000'</span><span class="hl opt">,</span>
    <span class="hl str">'00000'</span><span class="hl opt">,</span>
    <span class="hl str">'000000'</span><span class="hl opt">,</span>
    <span class="hl str">'0000000'</span><span class="hl opt">,</span>
    <span class="hl str">'00000000'</span><span class="hl opt">,</span>
    <span class="hl str">'000000000'</span><span class="hl opt">,</span>
    <span class="hl str">'0000000000'</span><span class="hl opt">,</span>
    <span class="hl str">'00000000000'</span><span class="hl opt">,</span>
    <span class="hl str">'000000000000'</span><span class="hl opt">,</span>
    <span class="hl str">'0000000000000'</span><span class="hl opt">,</span>
    <span class="hl str">'00000000000000'</span><span class="hl opt">,</span>
    <span class="hl str">'000000000000000'</span><span class="hl opt">,</span>
    <span class="hl str">'0000000000000000'</span><span class="hl opt">,</span>
    <span class="hl str">'00000000000000000'</span><span class="hl opt">,</span>
    <span class="hl str">'000000000000000000'</span><span class="hl opt">,</span>
    <span class="hl str">'0000000000000000000'</span><span class="hl opt">,</span>
    <span class="hl str">'00000000000000000000'</span><span class="hl opt">,</span>
    <span class="hl str">'000000000000000000000'</span><span class="hl opt">,</span>
    <span class="hl str">'0000000000000000000000'</span><span class="hl opt">,</span>
    <span class="hl str">'00000000000000000000000'</span><span class="hl opt">,</span>
    <span class="hl str">'000000000000000000000000'</span><span class="hl opt">,</span>
    <span class="hl str">'0000000000000000000000000'</span>
  <span class="hl opt">];</span>

  <span class="hl kwa">var</span> groupSizes <span class="hl opt">= [</span>
    <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span>
    <span class="hl num">25</span><span class="hl opt">,</span> <span class="hl num">16</span><span class="hl opt">,</span> <span class="hl num">12</span><span class="hl opt">,</span> <span class="hl num">11</span><span class="hl opt">,</span> <span class="hl num">10</span><span class="hl opt">,</span> <span class="hl num">9</span><span class="hl opt">,</span> <span class="hl num">8</span><span class="hl opt">,</span>
    <span class="hl num">8</span><span class="hl opt">,</span> <span class="hl num">7</span><span class="hl opt">,</span> <span class="hl num">7</span><span class="hl opt">,</span> <span class="hl num">7</span><span class="hl opt">,</span> <span class="hl num">7</span><span class="hl opt">,</span> <span class="hl num">6</span><span class="hl opt">,</span> <span class="hl num">6</span><span class="hl opt">,</span>
    <span class="hl num">6</span><span class="hl opt">,</span> <span class="hl num">6</span><span class="hl opt">,</span> <span class="hl num">6</span><span class="hl opt">,</span> <span class="hl num">6</span><span class="hl opt">,</span> <span class="hl num">6</span><span class="hl opt">,</span> <span class="hl num">5</span><span class="hl opt">,</span> <span class="hl num">5</span><span class="hl opt">,</span>
    <span class="hl num">5</span><span class="hl opt">,</span> <span class="hl num">5</span><span class="hl opt">,</span> <span class="hl num">5</span><span class="hl opt">,</span> <span class="hl num">5</span><span class="hl opt">,</span> <span class="hl num">5</span><span class="hl opt">,</span> <span class="hl num">5</span><span class="hl opt">,</span> <span class="hl num">5</span><span class="hl opt">,</span>
    <span class="hl num">5</span><span class="hl opt">,</span> <span class="hl num">5</span><span class="hl opt">,</span> <span class="hl num">5</span><span class="hl opt">,</span> <span class="hl num">5</span><span class="hl opt">,</span> <span class="hl num">5</span><span class="hl opt">,</span> <span class="hl num">5</span><span class="hl opt">,</span> <span class="hl num">5</span>
  <span class="hl opt">];</span>

  <span class="hl kwa">var</span> groupBases <span class="hl opt">= [</span>
    <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span>
    <span class="hl num">33554432</span><span class="hl opt">,</span> <span class="hl num">43046721</span><span class="hl opt">,</span> <span class="hl num">16777216</span><span class="hl opt">,</span> <span class="hl num">48828125</span><span class="hl opt">,</span> <span class="hl num">60466176</span><span class="hl opt">,</span> <span class="hl num">40353607</span><span class="hl opt">,</span> <span class="hl num">16777216</span><span class="hl opt">,</span>
    <span class="hl num">43046721</span><span class="hl opt">,</span> <span class="hl num">10000000</span><span class="hl opt">,</span> <span class="hl num">19487171</span><span class="hl opt">,</span> <span class="hl num">35831808</span><span class="hl opt">,</span> <span class="hl num">62748517</span><span class="hl opt">,</span> <span class="hl num">7529536</span><span class="hl opt">,</span> <span class="hl num">11390625</span><span class="hl opt">,</span>
    <span class="hl num">16777216</span><span class="hl opt">,</span> <span class="hl num">24137569</span><span class="hl opt">,</span> <span class="hl num">34012224</span><span class="hl opt">,</span> <span class="hl num">47045881</span><span class="hl opt">,</span> <span class="hl num">64000000</span><span class="hl opt">,</span> <span class="hl num">4084101</span><span class="hl opt">,</span> <span class="hl num">5153632</span><span class="hl opt">,</span>
    <span class="hl num">6436343</span><span class="hl opt">,</span> <span class="hl num">7962624</span><span class="hl opt">,</span> <span class="hl num">9765625</span><span class="hl opt">,</span> <span class="hl num">11881376</span><span class="hl opt">,</span> <span class="hl num">14348907</span><span class="hl opt">,</span> <span class="hl num">17210368</span><span class="hl opt">,</span> <span class="hl num">20511149</span><span class="hl opt">,</span>
    <span class="hl num">24300000</span><span class="hl opt">,</span> <span class="hl num">28629151</span><span class="hl opt">,</span> <span class="hl num">33554432</span><span class="hl opt">,</span> <span class="hl num">39135393</span><span class="hl opt">,</span> <span class="hl num">45435424</span><span class="hl opt">,</span> <span class="hl num">52521875</span><span class="hl opt">,</span> <span class="hl num">60466176</span>
  <span class="hl opt">];</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>toString <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">toString</span> <span class="hl opt">(</span>base<span class="hl opt">,</span> padding<span class="hl opt">) {</span>
    base <span class="hl opt">=</span> base <span class="hl opt">||</span> <span class="hl num">10</span><span class="hl opt">;</span>
    padding <span class="hl opt">=</span> padding <span class="hl opt">|</span> <span class="hl num">0</span> <span class="hl opt">||</span> <span class="hl num">1</span><span class="hl opt">;</span>

    <span class="hl kwa">var</span> out<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>base <span class="hl opt">===</span> <span class="hl num">16</span> <span class="hl opt">||</span> base <span class="hl opt">===</span> <span class="hl str">'hex'</span><span class="hl opt">) {</span>
      out <span class="hl opt">=</span> <span class="hl str">''</span><span class="hl opt">;</span>
      <span class="hl kwa">var</span> off <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl kwa">var</span> carry <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> <span class="hl kwa">this</span><span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
        <span class="hl kwa">var</span> w <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">];</span>
        <span class="hl kwa">var</span> word <span class="hl opt">= (((</span>w <span class="hl opt">&lt;&lt;</span> off<span class="hl opt">) |</span> carry<span class="hl opt">) &amp;</span> <span class="hl num">0xffffff</span><span class="hl opt">).</span><span class="hl kwd">toString</span><span class="hl opt">(</span><span class="hl num">16</span><span class="hl opt">);</span>
        carry <span class="hl opt">= (</span>w <span class="hl opt">&gt;&gt;&gt; (</span><span class="hl num">24</span> <span class="hl opt">-</span> off<span class="hl opt">)) &amp;</span> <span class="hl num">0xffffff</span><span class="hl opt">;</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>carry <span class="hl opt">!==</span> <span class="hl num">0</span> <span class="hl opt">||</span> i <span class="hl opt">!==</span> <span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">) {</span>
          out <span class="hl opt">=</span> zeros<span class="hl opt">[</span><span class="hl num">6</span> <span class="hl opt">-</span> word<span class="hl opt">.</span>length<span class="hl opt">] +</span> word <span class="hl opt">+</span> out<span class="hl opt">;</span>
        <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
          out <span class="hl opt">=</span> word <span class="hl opt">+</span> out<span class="hl opt">;</span>
        <span class="hl opt">}</span>
        off <span class="hl opt">+=</span> <span class="hl num">2</span><span class="hl opt">;</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>off <span class="hl opt">&gt;=</span> <span class="hl num">26</span><span class="hl opt">) {</span>
          off <span class="hl opt">-=</span> <span class="hl num">26</span><span class="hl opt">;</span>
          i<span class="hl opt">--;</span>
        <span class="hl opt">}</span>
      <span class="hl opt">}</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>carry <span class="hl opt">!==</span> <span class="hl num">0</span><span class="hl opt">) {</span>
        out <span class="hl opt">=</span> carry<span class="hl opt">.</span><span class="hl kwd">toString</span><span class="hl opt">(</span><span class="hl num">16</span><span class="hl opt">) +</span> out<span class="hl opt">;</span>
      <span class="hl opt">}</span>
      <span class="hl kwa">while</span> <span class="hl opt">(</span>out<span class="hl opt">.</span>length <span class="hl opt">%</span> padding <span class="hl opt">!==</span> <span class="hl num">0</span><span class="hl opt">) {</span>
        out <span class="hl opt">=</span> <span class="hl str">'0'</span> <span class="hl opt">+</span> out<span class="hl opt">;</span>
      <span class="hl opt">}</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>negative <span class="hl opt">!==</span> <span class="hl num">0</span><span class="hl opt">) {</span>
        out <span class="hl opt">=</span> <span class="hl str">'-'</span> <span class="hl opt">+</span> out<span class="hl opt">;</span>
      <span class="hl opt">}</span>
      <span class="hl kwa">return</span> out<span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>base <span class="hl opt">=== (</span>base <span class="hl opt">|</span> <span class="hl num">0</span><span class="hl opt">) &amp;&amp;</span> base <span class="hl opt">&gt;=</span> <span class="hl num">2</span> <span class="hl opt">&amp;&amp;</span> base <span class="hl opt">&lt;=</span> <span class="hl num">36</span><span class="hl opt">) {</span>
      <span class="hl slc">// var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));</span>
      <span class="hl kwa">var</span> groupSize <span class="hl opt">=</span> groupSizes<span class="hl opt">[</span>base<span class="hl opt">];</span>
      <span class="hl slc">// var groupBase = Math.pow(base, groupSize);</span>
      <span class="hl kwa">var</span> groupBase <span class="hl opt">=</span> groupBases<span class="hl opt">[</span>base<span class="hl opt">];</span>
      out <span class="hl opt">=</span> <span class="hl str">''</span><span class="hl opt">;</span>
      <span class="hl kwa">var</span> c <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">clone</span><span class="hl opt">();</span>
      c<span class="hl opt">.</span>negative <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl kwa">while</span> <span class="hl opt">(!</span>c<span class="hl opt">.</span><span class="hl kwd">isZero</span><span class="hl opt">()) {</span>
        <span class="hl kwa">var</span> r <span class="hl opt">=</span> c<span class="hl opt">.</span><span class="hl kwd">modn</span><span class="hl opt">(</span>groupBase<span class="hl opt">).</span><span class="hl kwd">toString</span><span class="hl opt">(</span>base<span class="hl opt">);</span>
        c <span class="hl opt">=</span> c<span class="hl opt">.</span><span class="hl kwd">idivn</span><span class="hl opt">(</span>groupBase<span class="hl opt">);</span>

        <span class="hl kwa">if</span> <span class="hl opt">(!</span>c<span class="hl opt">.</span><span class="hl kwd">isZero</span><span class="hl opt">()) {</span>
          out <span class="hl opt">=</span> zeros<span class="hl opt">[</span>groupSize <span class="hl opt">-</span> r<span class="hl opt">.</span>length<span class="hl opt">] +</span> r <span class="hl opt">+</span> out<span class="hl opt">;</span>
        <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
          out <span class="hl opt">=</span> r <span class="hl opt">+</span> out<span class="hl opt">;</span>
        <span class="hl opt">}</span>
      <span class="hl opt">}</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">isZero</span><span class="hl opt">()) {</span>
        out <span class="hl opt">=</span> <span class="hl str">'0'</span> <span class="hl opt">+</span> out<span class="hl opt">;</span>
      <span class="hl opt">}</span>
      <span class="hl kwa">while</span> <span class="hl opt">(</span>out<span class="hl opt">.</span>length <span class="hl opt">%</span> padding <span class="hl opt">!==</span> <span class="hl num">0</span><span class="hl opt">) {</span>
        out <span class="hl opt">=</span> <span class="hl str">'0'</span> <span class="hl opt">+</span> out<span class="hl opt">;</span>
      <span class="hl opt">}</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>negative <span class="hl opt">!==</span> <span class="hl num">0</span><span class="hl opt">) {</span>
        out <span class="hl opt">=</span> <span class="hl str">'-'</span> <span class="hl opt">+</span> out<span class="hl opt">;</span>
      <span class="hl opt">}</span>
      <span class="hl kwa">return</span> out<span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwd">assert</span><span class="hl opt">(</span><span class="hl kwa">false</span><span class="hl opt">,</span> <span class="hl str">'Base should be between 2 and 36'</span><span class="hl opt">);</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>toNumber <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">toNumber</span> <span class="hl opt">() {</span>
    <span class="hl kwa">var</span> length <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">bitLength</span><span class="hl opt">();</span>
    <span class="hl kwa">var</span> ret<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>length <span class="hl opt">&lt;=</span> <span class="hl num">26</span><span class="hl opt">) {</span>
      ret <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">];</span>
    <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>length <span class="hl opt">&lt;=</span> <span class="hl num">52</span><span class="hl opt">) {</span>
      ret <span class="hl opt">= (</span><span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] *</span> <span class="hl num">0x4000000</span><span class="hl opt">) +</span> <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">];</span>
    <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>length <span class="hl opt">===</span> <span class="hl num">53</span><span class="hl opt">) {</span>
      <span class="hl slc">// NOTE: at this stage it is known that the top bit is set</span>
      ret <span class="hl opt">=</span> <span class="hl num">0x10000000000000</span> <span class="hl opt">+ (</span><span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] *</span> <span class="hl num">0x4000000</span><span class="hl opt">) +</span> <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">];</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
      <span class="hl kwd">assert</span><span class="hl opt">(</span><span class="hl kwa">false</span><span class="hl opt">,</span> <span class="hl str">'Number can only safely store up to 53 bits'</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>negative <span class="hl opt">!==</span> <span class="hl num">0</span><span class="hl opt">) ? -</span>ret <span class="hl opt">:</span> ret<span class="hl opt">;</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>toJSON <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">toJSON</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">toString</span><span class="hl opt">(</span><span class="hl num">16</span><span class="hl opt">);</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>toBuffer <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">toBuffer</span> <span class="hl opt">(</span>endian<span class="hl opt">,</span> length<span class="hl opt">) {</span>
    <span class="hl kwd">assert</span><span class="hl opt">(</span><span class="hl kwa">typeof</span> Buffer <span class="hl opt">!==</span> <span class="hl str">'undefined'</span><span class="hl opt">);</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">toArrayLike</span><span class="hl opt">(</span>Buffer<span class="hl opt">,</span> endian<span class="hl opt">,</span> length<span class="hl opt">);</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>toArray <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">toArray</span> <span class="hl opt">(</span>endian<span class="hl opt">,</span> length<span class="hl opt">) {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">toArrayLike</span><span class="hl opt">(</span>Array<span class="hl opt">,</span> endian<span class="hl opt">,</span> length<span class="hl opt">);</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>toArrayLike <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">toArrayLike</span> <span class="hl opt">(</span>ArrayType<span class="hl opt">,</span> endian<span class="hl opt">,</span> length<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> byteLength <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">byteLength</span><span class="hl opt">();</span>
    <span class="hl kwa">var</span> reqLength <span class="hl opt">=</span> length <span class="hl opt">||</span> Math<span class="hl opt">.</span><span class="hl kwd">max</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span> byteLength<span class="hl opt">);</span>
    <span class="hl kwd">assert</span><span class="hl opt">(</span>byteLength <span class="hl opt">&lt;=</span> reqLength<span class="hl opt">,</span> <span class="hl str">'byte array longer than desired length'</span><span class="hl opt">);</span>
    <span class="hl kwd">assert</span><span class="hl opt">(</span>reqLength <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl str">'Requested array length &lt;= 0'</span><span class="hl opt">);</span>

    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">strip</span><span class="hl opt">();</span>
    <span class="hl kwa">var</span> littleEndian <span class="hl opt">=</span> endian <span class="hl opt">===</span> <span class="hl str">'le'</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> res <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">ArrayType</span><span class="hl opt">(</span>reqLength<span class="hl opt">);</span>

    <span class="hl kwa">var</span> b<span class="hl opt">,</span> i<span class="hl opt">;</span>
    <span class="hl kwa">var</span> q <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">clone</span><span class="hl opt">();</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!</span>littleEndian<span class="hl opt">) {</span>
      <span class="hl slc">// Assume big-endian</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> reqLength <span class="hl opt">-</span> byteLength<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
        res<span class="hl opt">[</span>i<span class="hl opt">] =</span> <span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>

      <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">; !</span>q<span class="hl opt">.</span><span class="hl kwd">isZero</span><span class="hl opt">();</span> i<span class="hl opt">++) {</span>
        b <span class="hl opt">=</span> q<span class="hl opt">.</span><span class="hl kwd">andln</span><span class="hl opt">(</span><span class="hl num">0xff</span><span class="hl opt">);</span>
        q<span class="hl opt">.</span><span class="hl kwd">iushrn</span><span class="hl opt">(</span><span class="hl num">8</span><span class="hl opt">);</span>

        res<span class="hl opt">[</span>reqLength <span class="hl opt">-</span> i <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">] =</span> b<span class="hl opt">;</span>
      <span class="hl opt">}</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">; !</span>q<span class="hl opt">.</span><span class="hl kwd">isZero</span><span class="hl opt">();</span> i<span class="hl opt">++) {</span>
        b <span class="hl opt">=</span> q<span class="hl opt">.</span><span class="hl kwd">andln</span><span class="hl opt">(</span><span class="hl num">0xff</span><span class="hl opt">);</span>
        q<span class="hl opt">.</span><span class="hl kwd">iushrn</span><span class="hl opt">(</span><span class="hl num">8</span><span class="hl opt">);</span>

        res<span class="hl opt">[</span>i<span class="hl opt">] =</span> b<span class="hl opt">;</span>
      <span class="hl opt">}</span>

      <span class="hl kwa">for</span> <span class="hl opt">(;</span> i <span class="hl opt">&lt;</span> reqLength<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
        res<span class="hl opt">[</span>i<span class="hl opt">] =</span> <span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">return</span> res<span class="hl opt">;</span>
  <span class="hl opt">};</span>

  <span class="hl kwa">if</span> <span class="hl opt">(</span>Math<span class="hl opt">.</span>clz32<span class="hl opt">) {</span>
    BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_countBits <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">_countBits</span> <span class="hl opt">(</span>w<span class="hl opt">) {</span>
      <span class="hl kwa">return</span> <span class="hl num">32</span> <span class="hl opt">-</span> Math<span class="hl opt">.</span><span class="hl kwd">clz32</span><span class="hl opt">(</span>w<span class="hl opt">);</span>
    <span class="hl opt">};</span>
  <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
    BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_countBits <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">_countBits</span> <span class="hl opt">(</span>w<span class="hl opt">) {</span>
      <span class="hl kwa">var</span> t <span class="hl opt">=</span> w<span class="hl opt">;</span>
      <span class="hl kwa">var</span> r <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>t <span class="hl opt">&gt;=</span> <span class="hl num">0x1000</span><span class="hl opt">) {</span>
        r <span class="hl opt">+=</span> <span class="hl num">13</span><span class="hl opt">;</span>
        t <span class="hl opt">&gt;&gt;&gt;=</span> <span class="hl num">13</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>t <span class="hl opt">&gt;=</span> <span class="hl num">0x40</span><span class="hl opt">) {</span>
        r <span class="hl opt">+=</span> <span class="hl num">7</span><span class="hl opt">;</span>
        t <span class="hl opt">&gt;&gt;&gt;=</span> <span class="hl num">7</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>t <span class="hl opt">&gt;=</span> <span class="hl num">0x8</span><span class="hl opt">) {</span>
        r <span class="hl opt">+=</span> <span class="hl num">4</span><span class="hl opt">;</span>
        t <span class="hl opt">&gt;&gt;&gt;=</span> <span class="hl num">4</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>t <span class="hl opt">&gt;=</span> <span class="hl num">0x02</span><span class="hl opt">) {</span>
        r <span class="hl opt">+=</span> <span class="hl num">2</span><span class="hl opt">;</span>
        t <span class="hl opt">&gt;&gt;&gt;=</span> <span class="hl num">2</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>
      <span class="hl kwa">return</span> r <span class="hl opt">+</span> t<span class="hl opt">;</span>
    <span class="hl opt">};</span>
  <span class="hl opt">}</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_zeroBits <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">_zeroBits</span> <span class="hl opt">(</span>w<span class="hl opt">) {</span>
    <span class="hl slc">// Short-cut</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>w <span class="hl opt">===</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">return</span> <span class="hl num">26</span><span class="hl opt">;</span>

    <span class="hl kwa">var</span> t <span class="hl opt">=</span> w<span class="hl opt">;</span>
    <span class="hl kwa">var</span> r <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">((</span>t <span class="hl opt">&amp;</span> <span class="hl num">0x1fff</span><span class="hl opt">) ===</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      r <span class="hl opt">+=</span> <span class="hl num">13</span><span class="hl opt">;</span>
      t <span class="hl opt">&gt;&gt;&gt;=</span> <span class="hl num">13</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">if</span> <span class="hl opt">((</span>t <span class="hl opt">&amp;</span> <span class="hl num">0x7f</span><span class="hl opt">) ===</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      r <span class="hl opt">+=</span> <span class="hl num">7</span><span class="hl opt">;</span>
      t <span class="hl opt">&gt;&gt;&gt;=</span> <span class="hl num">7</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">if</span> <span class="hl opt">((</span>t <span class="hl opt">&amp;</span> <span class="hl num">0xf</span><span class="hl opt">) ===</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      r <span class="hl opt">+=</span> <span class="hl num">4</span><span class="hl opt">;</span>
      t <span class="hl opt">&gt;&gt;&gt;=</span> <span class="hl num">4</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">if</span> <span class="hl opt">((</span>t <span class="hl opt">&amp;</span> <span class="hl num">0x3</span><span class="hl opt">) ===</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      r <span class="hl opt">+=</span> <span class="hl num">2</span><span class="hl opt">;</span>
      t <span class="hl opt">&gt;&gt;&gt;=</span> <span class="hl num">2</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">if</span> <span class="hl opt">((</span>t <span class="hl opt">&amp;</span> <span class="hl num">0x1</span><span class="hl opt">) ===</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      r<span class="hl opt">++;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return</span> r<span class="hl opt">;</span>
  <span class="hl opt">};</span>

  <span class="hl slc">// Return number of used bits in a BN</span>
  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>bitLength <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">bitLength</span> <span class="hl opt">() {</span>
    <span class="hl kwa">var</span> w <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span><span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">];</span>
    <span class="hl kwa">var</span> hi <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_countBits</span><span class="hl opt">(</span>w<span class="hl opt">);</span>
    <span class="hl kwa">return</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">) *</span> <span class="hl num">26</span> <span class="hl opt">+</span> hi<span class="hl opt">;</span>
  <span class="hl opt">};</span>

  <span class="hl kwa">function</span> <span class="hl kwd">toBitArray</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> w <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Array</span><span class="hl opt">(</span>num<span class="hl opt">.</span><span class="hl kwd">bitLength</span><span class="hl opt">());</span>

    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> bit <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> bit <span class="hl opt">&lt;</span> w<span class="hl opt">.</span>length<span class="hl opt">;</span> bit<span class="hl opt">++) {</span>
      <span class="hl kwa">var</span> off <span class="hl opt">= (</span>bit <span class="hl opt">/</span> <span class="hl num">26</span><span class="hl opt">) |</span> <span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl kwa">var</span> wbit <span class="hl opt">=</span> bit <span class="hl opt">%</span> <span class="hl num">26</span><span class="hl opt">;</span>

      w<span class="hl opt">[</span>bit<span class="hl opt">] = (</span>num<span class="hl opt">.</span>words<span class="hl opt">[</span>off<span class="hl opt">] &amp; (</span><span class="hl num">1</span> <span class="hl opt">&lt;&lt;</span> wbit<span class="hl opt">)) &gt;&gt;&gt;</span> wbit<span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">return</span> w<span class="hl opt">;</span>
  <span class="hl opt">}</span>

  <span class="hl slc">// Number of trailing zero bits</span>
  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>zeroBits <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">zeroBits</span> <span class="hl opt">() {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">isZero</span><span class="hl opt">())</span> <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>

    <span class="hl kwa">var</span> r <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> <span class="hl kwa">this</span><span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
      <span class="hl kwa">var</span> b <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_zeroBits</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">]);</span>
      r <span class="hl opt">+=</span> b<span class="hl opt">;</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>b <span class="hl opt">!==</span> <span class="hl num">26</span><span class="hl opt">)</span> <span class="hl kwa">break</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return</span> r<span class="hl opt">;</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>byteLength <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">byteLength</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return</span> Math<span class="hl opt">.</span><span class="hl kwd">ceil</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">bitLength</span><span class="hl opt">() /</span> <span class="hl num">8</span><span class="hl opt">);</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>toTwos <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">toTwos</span> <span class="hl opt">(</span>width<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>negative <span class="hl opt">!==</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">abs</span><span class="hl opt">().</span><span class="hl kwd">inotn</span><span class="hl opt">(</span>width<span class="hl opt">).</span><span class="hl kwd">iaddn</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">clone</span><span class="hl opt">();</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>fromTwos <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">fromTwos</span> <span class="hl opt">(</span>width<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">testn</span><span class="hl opt">(</span>width <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">)) {</span>
      <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">notn</span><span class="hl opt">(</span>width<span class="hl opt">).</span><span class="hl kwd">iaddn</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">).</span><span class="hl kwd">ineg</span><span class="hl opt">();</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">clone</span><span class="hl opt">();</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>isNeg <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">isNeg</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span>negative <span class="hl opt">!==</span> <span class="hl num">0</span><span class="hl opt">;</span>
  <span class="hl opt">};</span>

  <span class="hl slc">// Return negative clone of `this`</span>
  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>neg <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">neg</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">clone</span><span class="hl opt">().</span><span class="hl kwd">ineg</span><span class="hl opt">();</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>ineg <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">ineg</span> <span class="hl opt">() {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">isZero</span><span class="hl opt">()) {</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>negative <span class="hl opt">^=</span> <span class="hl num">1</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">return this</span><span class="hl opt">;</span>
  <span class="hl opt">};</span>

  <span class="hl slc">// Or `num` with `this` in-place</span>
  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>iuor <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">iuor</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwa">while</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">&lt;</span> num<span class="hl opt">.</span>length<span class="hl opt">) {</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span><span class="hl kwa">this</span><span class="hl opt">.</span>length<span class="hl opt">++] =</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> num<span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] =</span> <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] |</span> num<span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">];</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">strip</span><span class="hl opt">();</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>ior <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">ior</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwd">assert</span><span class="hl opt">((</span><span class="hl kwa">this</span><span class="hl opt">.</span>negative <span class="hl opt">|</span> num<span class="hl opt">.</span>negative<span class="hl opt">) ===</span> <span class="hl num">0</span><span class="hl opt">);</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">iuor</span><span class="hl opt">(</span>num<span class="hl opt">);</span>
  <span class="hl opt">};</span>

  <span class="hl slc">// Or `num` with `this`</span>
  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>or <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">or</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">&gt;</span> num<span class="hl opt">.</span>length<span class="hl opt">)</span> <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">clone</span><span class="hl opt">().</span><span class="hl kwd">ior</span><span class="hl opt">(</span>num<span class="hl opt">);</span>
    <span class="hl kwa">return</span> num<span class="hl opt">.</span><span class="hl kwd">clone</span><span class="hl opt">().</span><span class="hl kwd">ior</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">);</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>uor <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">uor</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">&gt;</span> num<span class="hl opt">.</span>length<span class="hl opt">)</span> <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">clone</span><span class="hl opt">().</span><span class="hl kwd">iuor</span><span class="hl opt">(</span>num<span class="hl opt">);</span>
    <span class="hl kwa">return</span> num<span class="hl opt">.</span><span class="hl kwd">clone</span><span class="hl opt">().</span><span class="hl kwd">iuor</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">);</span>
  <span class="hl opt">};</span>

  <span class="hl slc">// And `num` with `this` in-place</span>
  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>iuand <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">iuand</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl slc">// b = min-length(num, this)</span>
    <span class="hl kwa">var</span> b<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">&gt;</span> num<span class="hl opt">.</span>length<span class="hl opt">) {</span>
      b <span class="hl opt">=</span> num<span class="hl opt">;</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
      b <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> b<span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] =</span> <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] &amp;</span> num<span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">];</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">=</span> b<span class="hl opt">.</span>length<span class="hl opt">;</span>

    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">strip</span><span class="hl opt">();</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>iand <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">iand</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwd">assert</span><span class="hl opt">((</span><span class="hl kwa">this</span><span class="hl opt">.</span>negative <span class="hl opt">|</span> num<span class="hl opt">.</span>negative<span class="hl opt">) ===</span> <span class="hl num">0</span><span class="hl opt">);</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">iuand</span><span class="hl opt">(</span>num<span class="hl opt">);</span>
  <span class="hl opt">};</span>

  <span class="hl slc">// And `num` with `this`</span>
  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>and <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">and</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">&gt;</span> num<span class="hl opt">.</span>length<span class="hl opt">)</span> <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">clone</span><span class="hl opt">().</span><span class="hl kwd">iand</span><span class="hl opt">(</span>num<span class="hl opt">);</span>
    <span class="hl kwa">return</span> num<span class="hl opt">.</span><span class="hl kwd">clone</span><span class="hl opt">().</span><span class="hl kwd">iand</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">);</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>uand <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">uand</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">&gt;</span> num<span class="hl opt">.</span>length<span class="hl opt">)</span> <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">clone</span><span class="hl opt">().</span><span class="hl kwd">iuand</span><span class="hl opt">(</span>num<span class="hl opt">);</span>
    <span class="hl kwa">return</span> num<span class="hl opt">.</span><span class="hl kwd">clone</span><span class="hl opt">().</span><span class="hl kwd">iuand</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">);</span>
  <span class="hl opt">};</span>

  <span class="hl slc">// Xor `num` with `this` in-place</span>
  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>iuxor <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">iuxor</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl slc">// a.length &gt; b.length</span>
    <span class="hl kwa">var</span> a<span class="hl opt">;</span>
    <span class="hl kwa">var</span> b<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">&gt;</span> num<span class="hl opt">.</span>length<span class="hl opt">) {</span>
      a <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">;</span>
      b <span class="hl opt">=</span> num<span class="hl opt">;</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
      a <span class="hl opt">=</span> num<span class="hl opt">;</span>
      b <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> b<span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] =</span> a<span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] ^</span> b<span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">];</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span> <span class="hl opt">!==</span> a<span class="hl opt">) {</span>
      <span class="hl kwa">for</span> <span class="hl opt">(;</span> i <span class="hl opt">&lt;</span> a<span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] =</span> a<span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">];</span>
      <span class="hl opt">}</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">=</span> a<span class="hl opt">.</span>length<span class="hl opt">;</span>

    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">strip</span><span class="hl opt">();</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>ixor <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">ixor</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwd">assert</span><span class="hl opt">((</span><span class="hl kwa">this</span><span class="hl opt">.</span>negative <span class="hl opt">|</span> num<span class="hl opt">.</span>negative<span class="hl opt">) ===</span> <span class="hl num">0</span><span class="hl opt">);</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">iuxor</span><span class="hl opt">(</span>num<span class="hl opt">);</span>
  <span class="hl opt">};</span>

  <span class="hl slc">// Xor `num` with `this`</span>
  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>xor <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">xor</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">&gt;</span> num<span class="hl opt">.</span>length<span class="hl opt">)</span> <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">clone</span><span class="hl opt">().</span><span class="hl kwd">ixor</span><span class="hl opt">(</span>num<span class="hl opt">);</span>
    <span class="hl kwa">return</span> num<span class="hl opt">.</span><span class="hl kwd">clone</span><span class="hl opt">().</span><span class="hl kwd">ixor</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">);</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>uxor <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">uxor</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">&gt;</span> num<span class="hl opt">.</span>length<span class="hl opt">)</span> <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">clone</span><span class="hl opt">().</span><span class="hl kwd">iuxor</span><span class="hl opt">(</span>num<span class="hl opt">);</span>
    <span class="hl kwa">return</span> num<span class="hl opt">.</span><span class="hl kwd">clone</span><span class="hl opt">().</span><span class="hl kwd">iuxor</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">);</span>
  <span class="hl opt">};</span>

  <span class="hl slc">// Not ``this`` with ``width`` bitwidth</span>
  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>inotn <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">inotn</span> <span class="hl opt">(</span>width<span class="hl opt">) {</span>
    <span class="hl kwd">assert</span><span class="hl opt">(</span><span class="hl kwa">typeof</span> width <span class="hl opt">===</span> <span class="hl str">'number'</span> <span class="hl opt">&amp;&amp;</span> width <span class="hl opt">&gt;=</span> <span class="hl num">0</span><span class="hl opt">);</span>

    <span class="hl kwa">var</span> bytesNeeded <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">ceil</span><span class="hl opt">(</span>width <span class="hl opt">/</span> <span class="hl num">26</span><span class="hl opt">) |</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> bitsLeft <span class="hl opt">=</span> width <span class="hl opt">%</span> <span class="hl num">26</span><span class="hl opt">;</span>

    <span class="hl slc">// Extend the buffer with leading zeroes</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_expand</span><span class="hl opt">(</span>bytesNeeded<span class="hl opt">);</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>bitsLeft <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      bytesNeeded<span class="hl opt">--;</span>
    <span class="hl opt">}</span>

    <span class="hl slc">// Handle complete words</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> bytesNeeded<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] = ~</span><span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] &amp;</span> <span class="hl num">0x3ffffff</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl slc">// Handle the residue</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>bitsLeft <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] = ~</span><span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] &amp; (</span><span class="hl num">0x3ffffff</span> <span class="hl opt">&gt;&gt; (</span><span class="hl num">26</span> <span class="hl opt">-</span> bitsLeft<span class="hl opt">));</span>
    <span class="hl opt">}</span>

    <span class="hl slc">// And remove leading zeroes</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">strip</span><span class="hl opt">();</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>notn <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">notn</span> <span class="hl opt">(</span>width<span class="hl opt">) {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">clone</span><span class="hl opt">().</span><span class="hl kwd">inotn</span><span class="hl opt">(</span>width<span class="hl opt">);</span>
  <span class="hl opt">};</span>

  <span class="hl slc">// Set `bit` of `this`</span>
  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>setn <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">setn</span> <span class="hl opt">(</span>bit<span class="hl opt">,</span> val<span class="hl opt">) {</span>
    <span class="hl kwd">assert</span><span class="hl opt">(</span><span class="hl kwa">typeof</span> bit <span class="hl opt">===</span> <span class="hl str">'number'</span> <span class="hl opt">&amp;&amp;</span> bit <span class="hl opt">&gt;=</span> <span class="hl num">0</span><span class="hl opt">);</span>

    <span class="hl kwa">var</span> off <span class="hl opt">= (</span>bit <span class="hl opt">/</span> <span class="hl num">26</span><span class="hl opt">) |</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> wbit <span class="hl opt">=</span> bit <span class="hl opt">%</span> <span class="hl num">26</span><span class="hl opt">;</span>

    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_expand</span><span class="hl opt">(</span>off <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">);</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>val<span class="hl opt">) {</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>off<span class="hl opt">] =</span> <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>off<span class="hl opt">] | (</span><span class="hl num">1</span> <span class="hl opt">&lt;&lt;</span> wbit<span class="hl opt">);</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>off<span class="hl opt">] =</span> <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>off<span class="hl opt">] &amp; ~(</span><span class="hl num">1</span> <span class="hl opt">&lt;&lt;</span> wbit<span class="hl opt">);</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">strip</span><span class="hl opt">();</span>
  <span class="hl opt">};</span>

  <span class="hl slc">// Add `num` to `this` in-place</span>
  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>iadd <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">iadd</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> r<span class="hl opt">;</span>

    <span class="hl slc">// negative + positive</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>negative <span class="hl opt">!==</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span> num<span class="hl opt">.</span>negative <span class="hl opt">===</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>negative <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
      r <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">isub</span><span class="hl opt">(</span>num<span class="hl opt">);</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>negative <span class="hl opt">^=</span> <span class="hl num">1</span><span class="hl opt">;</span>
      <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_normSign</span><span class="hl opt">();</span>

    <span class="hl slc">// positive + negative</span>
    <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>negative <span class="hl opt">===</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span> num<span class="hl opt">.</span>negative <span class="hl opt">!==</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      num<span class="hl opt">.</span>negative <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
      r <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">isub</span><span class="hl opt">(</span>num<span class="hl opt">);</span>
      num<span class="hl opt">.</span>negative <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>
      <span class="hl kwa">return</span> r<span class="hl opt">.</span><span class="hl kwd">_normSign</span><span class="hl opt">();</span>
    <span class="hl opt">}</span>

    <span class="hl slc">// a.length &gt; b.length</span>
    <span class="hl kwa">var</span> a<span class="hl opt">,</span> b<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">&gt;</span> num<span class="hl opt">.</span>length<span class="hl opt">) {</span>
      a <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">;</span>
      b <span class="hl opt">=</span> num<span class="hl opt">;</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
      a <span class="hl opt">=</span> num<span class="hl opt">;</span>
      b <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">var</span> carry <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> b<span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
      r <span class="hl opt">= (</span>a<span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">) + (</span>b<span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">) +</span> carry<span class="hl opt">;</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] =</span> r <span class="hl opt">&amp;</span> <span class="hl num">0x3ffffff</span><span class="hl opt">;</span>
      carry <span class="hl opt">=</span> r <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">26</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">for</span> <span class="hl opt">(;</span> carry <span class="hl opt">!==</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span> i <span class="hl opt">&lt;</span> a<span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
      r <span class="hl opt">= (</span>a<span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">) +</span> carry<span class="hl opt">;</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] =</span> r <span class="hl opt">&amp;</span> <span class="hl num">0x3ffffff</span><span class="hl opt">;</span>
      carry <span class="hl opt">=</span> r <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">26</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">=</span> a<span class="hl opt">.</span>length<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>carry <span class="hl opt">!==</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span><span class="hl kwa">this</span><span class="hl opt">.</span>length<span class="hl opt">] =</span> carry<span class="hl opt">;</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>length<span class="hl opt">++;</span>
    <span class="hl slc">// Copy the rest of the words</span>
    <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>a <span class="hl opt">!==</span> <span class="hl kwa">this</span><span class="hl opt">) {</span>
      <span class="hl kwa">for</span> <span class="hl opt">(;</span> i <span class="hl opt">&lt;</span> a<span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] =</span> a<span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">];</span>
      <span class="hl opt">}</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">return this</span><span class="hl opt">;</span>
  <span class="hl opt">};</span>

  <span class="hl slc">// Add `num` to `this`</span>
  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>add <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">add</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> res<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>num<span class="hl opt">.</span>negative <span class="hl opt">!==</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span> <span class="hl kwa">this</span><span class="hl opt">.</span>negative <span class="hl opt">===</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      num<span class="hl opt">.</span>negative <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
      res <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">sub</span><span class="hl opt">(</span>num<span class="hl opt">);</span>
      num<span class="hl opt">.</span>negative <span class="hl opt">^=</span> <span class="hl num">1</span><span class="hl opt">;</span>
      <span class="hl kwa">return</span> res<span class="hl opt">;</span>
    <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>num<span class="hl opt">.</span>negative <span class="hl opt">===</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span> <span class="hl kwa">this</span><span class="hl opt">.</span>negative <span class="hl opt">!==</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>negative <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
      res <span class="hl opt">=</span> num<span class="hl opt">.</span><span class="hl kwd">sub</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">);</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>negative <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>
      <span class="hl kwa">return</span> res<span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">&gt;</span> num<span class="hl opt">.</span>length<span class="hl opt">)</span> <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">clone</span><span class="hl opt">().</span><span class="hl kwd">iadd</span><span class="hl opt">(</span>num<span class="hl opt">);</span>

    <span class="hl kwa">return</span> num<span class="hl opt">.</span><span class="hl kwd">clone</span><span class="hl opt">().</span><span class="hl kwd">iadd</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">);</span>
  <span class="hl opt">};</span>

  <span class="hl slc">// Subtract `num` from `this` in-place</span>
  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>isub <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">isub</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl slc">// this - (-num) = this + num</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>num<span class="hl opt">.</span>negative <span class="hl opt">!==</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      num<span class="hl opt">.</span>negative <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl kwa">var</span> r <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">iadd</span><span class="hl opt">(</span>num<span class="hl opt">);</span>
      num<span class="hl opt">.</span>negative <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>
      <span class="hl kwa">return</span> r<span class="hl opt">.</span><span class="hl kwd">_normSign</span><span class="hl opt">();</span>

    <span class="hl slc">// -this - num = -(this + num)</span>
    <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>negative <span class="hl opt">!==</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>negative <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">iadd</span><span class="hl opt">(</span>num<span class="hl opt">);</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>negative <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>
      <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_normSign</span><span class="hl opt">();</span>
    <span class="hl opt">}</span>

    <span class="hl slc">// At this point both numbers are positive</span>
    <span class="hl kwa">var</span> cmp <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">cmp</span><span class="hl opt">(</span>num<span class="hl opt">);</span>

    <span class="hl slc">// Optimization - zeroify</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>cmp <span class="hl opt">===</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>negative <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] =</span> <span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl kwa">return this</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl slc">// a &gt; b</span>
    <span class="hl kwa">var</span> a<span class="hl opt">,</span> b<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>cmp <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      a <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">;</span>
      b <span class="hl opt">=</span> num<span class="hl opt">;</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
      a <span class="hl opt">=</span> num<span class="hl opt">;</span>
      b <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">var</span> carry <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> b<span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
      r <span class="hl opt">= (</span>a<span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">) - (</span>b<span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">) +</span> carry<span class="hl opt">;</span>
      carry <span class="hl opt">=</span> r <span class="hl opt">&gt;&gt;</span> <span class="hl num">26</span><span class="hl opt">;</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] =</span> r <span class="hl opt">&amp;</span> <span class="hl num">0x3ffffff</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">for</span> <span class="hl opt">(;</span> carry <span class="hl opt">!==</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span> i <span class="hl opt">&lt;</span> a<span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
      r <span class="hl opt">= (</span>a<span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">) +</span> carry<span class="hl opt">;</span>
      carry <span class="hl opt">=</span> r <span class="hl opt">&gt;&gt;</span> <span class="hl num">26</span><span class="hl opt">;</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] =</span> r <span class="hl opt">&amp;</span> <span class="hl num">0x3ffffff</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl slc">// Copy rest of the words</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>carry <span class="hl opt">===</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span> i <span class="hl opt">&lt;</span> a<span class="hl opt">.</span>length <span class="hl opt">&amp;&amp;</span> a <span class="hl opt">!==</span> <span class="hl kwa">this</span><span class="hl opt">) {</span>
      <span class="hl kwa">for</span> <span class="hl opt">(;</span> i <span class="hl opt">&lt;</span> a<span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] =</span> a<span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">];</span>
      <span class="hl opt">}</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">max</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>length<span class="hl opt">,</span> i<span class="hl opt">);</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>a <span class="hl opt">!==</span> <span class="hl kwa">this</span><span class="hl opt">) {</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>negative <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">strip</span><span class="hl opt">();</span>
  <span class="hl opt">};</span>

  <span class="hl slc">// Subtract `num` from `this`</span>
  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>sub <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">sub</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">clone</span><span class="hl opt">().</span><span class="hl kwd">isub</span><span class="hl opt">(</span>num<span class="hl opt">);</span>
  <span class="hl opt">};</span>

  <span class="hl kwa">function</span> <span class="hl kwd">smallMulTo</span> <span class="hl opt">(</span>self<span class="hl opt">,</span> num<span class="hl opt">,</span> out<span class="hl opt">) {</span>
    out<span class="hl opt">.</span>negative <span class="hl opt">=</span> num<span class="hl opt">.</span>negative <span class="hl opt">^</span> self<span class="hl opt">.</span>negative<span class="hl opt">;</span>
    <span class="hl kwa">var</span> len <span class="hl opt">= (</span>self<span class="hl opt">.</span>length <span class="hl opt">+</span> num<span class="hl opt">.</span>length<span class="hl opt">) |</span> <span class="hl num">0</span><span class="hl opt">;</span>
    out<span class="hl opt">.</span>length <span class="hl opt">=</span> len<span class="hl opt">;</span>
    len <span class="hl opt">= (</span>len <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">) |</span> <span class="hl num">0</span><span class="hl opt">;</span>

    <span class="hl slc">// Peel one iteration (compiler can't do it, because of code complexity)</span>
    <span class="hl kwa">var</span> a <span class="hl opt">=</span> self<span class="hl opt">.</span>words<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> b <span class="hl opt">=</span> num<span class="hl opt">.</span>words<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> r <span class="hl opt">=</span> a <span class="hl opt">*</span> b<span class="hl opt">;</span>

    <span class="hl kwa">var</span> lo <span class="hl opt">=</span> r <span class="hl opt">&amp;</span> <span class="hl num">0x3ffffff</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> carry <span class="hl opt">= (</span>r <span class="hl opt">/</span> <span class="hl num">0x4000000</span><span class="hl opt">) |</span> <span class="hl num">0</span><span class="hl opt">;</span>
    out<span class="hl opt">.</span>words<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] =</span> lo<span class="hl opt">;</span>

    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> k <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span> k <span class="hl opt">&lt;</span> len<span class="hl opt">;</span> k<span class="hl opt">++) {</span>
      <span class="hl slc">// Sum all words with the same `i + j = k` and accumulate `ncarry`,</span>
      <span class="hl slc">// note that ncarry could be &gt;= 0x3ffffff</span>
      <span class="hl kwa">var</span> ncarry <span class="hl opt">=</span> carry <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">26</span><span class="hl opt">;</span>
      <span class="hl kwa">var</span> rword <span class="hl opt">=</span> carry <span class="hl opt">&amp;</span> <span class="hl num">0x3ffffff</span><span class="hl opt">;</span>
      <span class="hl kwa">var</span> maxJ <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">min</span><span class="hl opt">(</span>k<span class="hl opt">,</span> num<span class="hl opt">.</span>length <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">);</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> j <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">max</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> k <span class="hl opt">-</span> self<span class="hl opt">.</span>length <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">);</span> j <span class="hl opt">&lt;=</span> maxJ<span class="hl opt">;</span> j<span class="hl opt">++) {</span>
        <span class="hl kwa">var</span> i <span class="hl opt">= (</span>k <span class="hl opt">-</span> j<span class="hl opt">) |</span> <span class="hl num">0</span><span class="hl opt">;</span>
        a <span class="hl opt">=</span> self<span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">;</span>
        b <span class="hl opt">=</span> num<span class="hl opt">.</span>words<span class="hl opt">[</span>j<span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">;</span>
        r <span class="hl opt">=</span> a <span class="hl opt">*</span> b <span class="hl opt">+</span> rword<span class="hl opt">;</span>
        ncarry <span class="hl opt">+= (</span>r <span class="hl opt">/</span> <span class="hl num">0x4000000</span><span class="hl opt">) |</span> <span class="hl num">0</span><span class="hl opt">;</span>
        rword <span class="hl opt">=</span> r <span class="hl opt">&amp;</span> <span class="hl num">0x3ffffff</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>
      out<span class="hl opt">.</span>words<span class="hl opt">[</span>k<span class="hl opt">] =</span> rword <span class="hl opt">|</span> <span class="hl num">0</span><span class="hl opt">;</span>
      carry <span class="hl opt">=</span> ncarry <span class="hl opt">|</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>carry <span class="hl opt">!==</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      out<span class="hl opt">.</span>words<span class="hl opt">[</span>k<span class="hl opt">] =</span> carry <span class="hl opt">|</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
      out<span class="hl opt">.</span>length<span class="hl opt">--;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">return</span> out<span class="hl opt">.</span><span class="hl kwd">strip</span><span class="hl opt">();</span>
  <span class="hl opt">}</span>

  <span class="hl slc">// TODO(indutny): it may be reasonable to omit it for users who don't need</span>
  <span class="hl slc">// to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit</span>
  <span class="hl slc">// multiplication (like elliptic secp256k1).</span>
  <span class="hl kwa">var</span> comb10MulTo <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">comb10MulTo</span> <span class="hl opt">(</span>self<span class="hl opt">,</span> num<span class="hl opt">,</span> out<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> a <span class="hl opt">=</span> self<span class="hl opt">.</span>words<span class="hl opt">;</span>
    <span class="hl kwa">var</span> b <span class="hl opt">=</span> num<span class="hl opt">.</span>words<span class="hl opt">;</span>
    <span class="hl kwa">var</span> o <span class="hl opt">=</span> out<span class="hl opt">.</span>words<span class="hl opt">;</span>
    <span class="hl kwa">var</span> c <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> lo<span class="hl opt">;</span>
    <span class="hl kwa">var</span> mid<span class="hl opt">;</span>
    <span class="hl kwa">var</span> hi<span class="hl opt">;</span>
    <span class="hl kwa">var</span> a0 <span class="hl opt">=</span> a<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> al0 <span class="hl opt">=</span> a0 <span class="hl opt">&amp;</span> <span class="hl num">0x1fff</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> ah0 <span class="hl opt">=</span> a0 <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">13</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> a1 <span class="hl opt">=</span> a<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> al1 <span class="hl opt">=</span> a1 <span class="hl opt">&amp;</span> <span class="hl num">0x1fff</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> ah1 <span class="hl opt">=</span> a1 <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">13</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> a2 <span class="hl opt">=</span> a<span class="hl opt">[</span><span class="hl num">2</span><span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> al2 <span class="hl opt">=</span> a2 <span class="hl opt">&amp;</span> <span class="hl num">0x1fff</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> ah2 <span class="hl opt">=</span> a2 <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">13</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> a3 <span class="hl opt">=</span> a<span class="hl opt">[</span><span class="hl num">3</span><span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> al3 <span class="hl opt">=</span> a3 <span class="hl opt">&amp;</span> <span class="hl num">0x1fff</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> ah3 <span class="hl opt">=</span> a3 <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">13</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> a4 <span class="hl opt">=</span> a<span class="hl opt">[</span><span class="hl num">4</span><span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> al4 <span class="hl opt">=</span> a4 <span class="hl opt">&amp;</span> <span class="hl num">0x1fff</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> ah4 <span class="hl opt">=</span> a4 <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">13</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> a5 <span class="hl opt">=</span> a<span class="hl opt">[</span><span class="hl num">5</span><span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> al5 <span class="hl opt">=</span> a5 <span class="hl opt">&amp;</span> <span class="hl num">0x1fff</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> ah5 <span class="hl opt">=</span> a5 <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">13</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> a6 <span class="hl opt">=</span> a<span class="hl opt">[</span><span class="hl num">6</span><span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> al6 <span class="hl opt">=</span> a6 <span class="hl opt">&amp;</span> <span class="hl num">0x1fff</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> ah6 <span class="hl opt">=</span> a6 <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">13</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> a7 <span class="hl opt">=</span> a<span class="hl opt">[</span><span class="hl num">7</span><span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> al7 <span class="hl opt">=</span> a7 <span class="hl opt">&amp;</span> <span class="hl num">0x1fff</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> ah7 <span class="hl opt">=</span> a7 <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">13</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> a8 <span class="hl opt">=</span> a<span class="hl opt">[</span><span class="hl num">8</span><span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> al8 <span class="hl opt">=</span> a8 <span class="hl opt">&amp;</span> <span class="hl num">0x1fff</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> ah8 <span class="hl opt">=</span> a8 <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">13</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> a9 <span class="hl opt">=</span> a<span class="hl opt">[</span><span class="hl num">9</span><span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> al9 <span class="hl opt">=</span> a9 <span class="hl opt">&amp;</span> <span class="hl num">0x1fff</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> ah9 <span class="hl opt">=</span> a9 <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">13</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> b0 <span class="hl opt">=</span> b<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> bl0 <span class="hl opt">=</span> b0 <span class="hl opt">&amp;</span> <span class="hl num">0x1fff</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> bh0 <span class="hl opt">=</span> b0 <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">13</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> b1 <span class="hl opt">=</span> b<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> bl1 <span class="hl opt">=</span> b1 <span class="hl opt">&amp;</span> <span class="hl num">0x1fff</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> bh1 <span class="hl opt">=</span> b1 <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">13</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> b2 <span class="hl opt">=</span> b<span class="hl opt">[</span><span class="hl num">2</span><span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> bl2 <span class="hl opt">=</span> b2 <span class="hl opt">&amp;</span> <span class="hl num">0x1fff</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> bh2 <span class="hl opt">=</span> b2 <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">13</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> b3 <span class="hl opt">=</span> b<span class="hl opt">[</span><span class="hl num">3</span><span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> bl3 <span class="hl opt">=</span> b3 <span class="hl opt">&amp;</span> <span class="hl num">0x1fff</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> bh3 <span class="hl opt">=</span> b3 <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">13</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> b4 <span class="hl opt">=</span> b<span class="hl opt">[</span><span class="hl num">4</span><span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> bl4 <span class="hl opt">=</span> b4 <span class="hl opt">&amp;</span> <span class="hl num">0x1fff</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> bh4 <span class="hl opt">=</span> b4 <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">13</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> b5 <span class="hl opt">=</span> b<span class="hl opt">[</span><span class="hl num">5</span><span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> bl5 <span class="hl opt">=</span> b5 <span class="hl opt">&amp;</span> <span class="hl num">0x1fff</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> bh5 <span class="hl opt">=</span> b5 <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">13</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> b6 <span class="hl opt">=</span> b<span class="hl opt">[</span><span class="hl num">6</span><span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> bl6 <span class="hl opt">=</span> b6 <span class="hl opt">&amp;</span> <span class="hl num">0x1fff</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> bh6 <span class="hl opt">=</span> b6 <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">13</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> b7 <span class="hl opt">=</span> b<span class="hl opt">[</span><span class="hl num">7</span><span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> bl7 <span class="hl opt">=</span> b7 <span class="hl opt">&amp;</span> <span class="hl num">0x1fff</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> bh7 <span class="hl opt">=</span> b7 <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">13</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> b8 <span class="hl opt">=</span> b<span class="hl opt">[</span><span class="hl num">8</span><span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> bl8 <span class="hl opt">=</span> b8 <span class="hl opt">&amp;</span> <span class="hl num">0x1fff</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> bh8 <span class="hl opt">=</span> b8 <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">13</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> b9 <span class="hl opt">=</span> b<span class="hl opt">[</span><span class="hl num">9</span><span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> bl9 <span class="hl opt">=</span> b9 <span class="hl opt">&amp;</span> <span class="hl num">0x1fff</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> bh9 <span class="hl opt">=</span> b9 <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">13</span><span class="hl opt">;</span>

    out<span class="hl opt">.</span>negative <span class="hl opt">=</span> self<span class="hl opt">.</span>negative <span class="hl opt">^</span> num<span class="hl opt">.</span>negative<span class="hl opt">;</span>
    out<span class="hl opt">.</span>length <span class="hl opt">=</span> <span class="hl num">19</span><span class="hl opt">;</span>
    <span class="hl com">/* k = 0 */</span>
    lo <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al0<span class="hl opt">,</span> bl0<span class="hl opt">);</span>
    mid <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al0<span class="hl opt">,</span> bh0<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah0<span class="hl opt">,</span> bl0<span class="hl opt">);</span>
    hi <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah0<span class="hl opt">,</span> bh0<span class="hl opt">);</span>
    <span class="hl kwa">var</span> w0 <span class="hl opt">=</span> c <span class="hl opt">+</span> lo <span class="hl opt">+ ((</span>mid <span class="hl opt">&amp;</span> <span class="hl num">0x1fff</span><span class="hl opt">) &lt;&lt;</span> <span class="hl num">13</span><span class="hl opt">);</span>
    c <span class="hl opt">=</span> hi <span class="hl opt">+ (</span>mid <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">13</span><span class="hl opt">) + (</span>w0 <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">26</span><span class="hl opt">);</span>
    w0 <span class="hl opt">&amp;=</span> <span class="hl num">0x3ffffff</span><span class="hl opt">;</span>
    <span class="hl com">/* k = 1 */</span>
    lo <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al1<span class="hl opt">,</span> bl0<span class="hl opt">);</span>
    mid <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al1<span class="hl opt">,</span> bh0<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah1<span class="hl opt">,</span> bl0<span class="hl opt">);</span>
    hi <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah1<span class="hl opt">,</span> bh0<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al0<span class="hl opt">,</span> bl1<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al0<span class="hl opt">,</span> bh1<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah0<span class="hl opt">,</span> bl1<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah0<span class="hl opt">,</span> bh1<span class="hl opt">);</span>
    <span class="hl kwa">var</span> w1 <span class="hl opt">=</span> c <span class="hl opt">+</span> lo <span class="hl opt">+ ((</span>mid <span class="hl opt">&amp;</span> <span class="hl num">0x1fff</span><span class="hl opt">) &lt;&lt;</span> <span class="hl num">13</span><span class="hl opt">);</span>
    c <span class="hl opt">=</span> hi <span class="hl opt">+ (</span>mid <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">13</span><span class="hl opt">) + (</span>w1 <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">26</span><span class="hl opt">);</span>
    w1 <span class="hl opt">&amp;=</span> <span class="hl num">0x3ffffff</span><span class="hl opt">;</span>
    <span class="hl com">/* k = 2 */</span>
    lo <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al2<span class="hl opt">,</span> bl0<span class="hl opt">);</span>
    mid <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al2<span class="hl opt">,</span> bh0<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah2<span class="hl opt">,</span> bl0<span class="hl opt">);</span>
    hi <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah2<span class="hl opt">,</span> bh0<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al1<span class="hl opt">,</span> bl1<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al1<span class="hl opt">,</span> bh1<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah1<span class="hl opt">,</span> bl1<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah1<span class="hl opt">,</span> bh1<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al0<span class="hl opt">,</span> bl2<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al0<span class="hl opt">,</span> bh2<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah0<span class="hl opt">,</span> bl2<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah0<span class="hl opt">,</span> bh2<span class="hl opt">);</span>
    <span class="hl kwa">var</span> w2 <span class="hl opt">=</span> c <span class="hl opt">+</span> lo <span class="hl opt">+ ((</span>mid <span class="hl opt">&amp;</span> <span class="hl num">0x1fff</span><span class="hl opt">) &lt;&lt;</span> <span class="hl num">13</span><span class="hl opt">);</span>
    c <span class="hl opt">=</span> hi <span class="hl opt">+ (</span>mid <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">13</span><span class="hl opt">) + (</span>w2 <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">26</span><span class="hl opt">);</span>
    w2 <span class="hl opt">&amp;=</span> <span class="hl num">0x3ffffff</span><span class="hl opt">;</span>
    <span class="hl com">/* k = 3 */</span>
    lo <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al3<span class="hl opt">,</span> bl0<span class="hl opt">);</span>
    mid <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al3<span class="hl opt">,</span> bh0<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah3<span class="hl opt">,</span> bl0<span class="hl opt">);</span>
    hi <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah3<span class="hl opt">,</span> bh0<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al2<span class="hl opt">,</span> bl1<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al2<span class="hl opt">,</span> bh1<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah2<span class="hl opt">,</span> bl1<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah2<span class="hl opt">,</span> bh1<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al1<span class="hl opt">,</span> bl2<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al1<span class="hl opt">,</span> bh2<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah1<span class="hl opt">,</span> bl2<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah1<span class="hl opt">,</span> bh2<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al0<span class="hl opt">,</span> bl3<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al0<span class="hl opt">,</span> bh3<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah0<span class="hl opt">,</span> bl3<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah0<span class="hl opt">,</span> bh3<span class="hl opt">);</span>
    <span class="hl kwa">var</span> w3 <span class="hl opt">=</span> c <span class="hl opt">+</span> lo <span class="hl opt">+ ((</span>mid <span class="hl opt">&amp;</span> <span class="hl num">0x1fff</span><span class="hl opt">) &lt;&lt;</span> <span class="hl num">13</span><span class="hl opt">);</span>
    c <span class="hl opt">=</span> hi <span class="hl opt">+ (</span>mid <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">13</span><span class="hl opt">) + (</span>w3 <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">26</span><span class="hl opt">);</span>
    w3 <span class="hl opt">&amp;=</span> <span class="hl num">0x3ffffff</span><span class="hl opt">;</span>
    <span class="hl com">/* k = 4 */</span>
    lo <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al4<span class="hl opt">,</span> bl0<span class="hl opt">);</span>
    mid <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al4<span class="hl opt">,</span> bh0<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah4<span class="hl opt">,</span> bl0<span class="hl opt">);</span>
    hi <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah4<span class="hl opt">,</span> bh0<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al3<span class="hl opt">,</span> bl1<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al3<span class="hl opt">,</span> bh1<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah3<span class="hl opt">,</span> bl1<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah3<span class="hl opt">,</span> bh1<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al2<span class="hl opt">,</span> bl2<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al2<span class="hl opt">,</span> bh2<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah2<span class="hl opt">,</span> bl2<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah2<span class="hl opt">,</span> bh2<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al1<span class="hl opt">,</span> bl3<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al1<span class="hl opt">,</span> bh3<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah1<span class="hl opt">,</span> bl3<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah1<span class="hl opt">,</span> bh3<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al0<span class="hl opt">,</span> bl4<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al0<span class="hl opt">,</span> bh4<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah0<span class="hl opt">,</span> bl4<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah0<span class="hl opt">,</span> bh4<span class="hl opt">);</span>
    <span class="hl kwa">var</span> w4 <span class="hl opt">=</span> c <span class="hl opt">+</span> lo <span class="hl opt">+ ((</span>mid <span class="hl opt">&amp;</span> <span class="hl num">0x1fff</span><span class="hl opt">) &lt;&lt;</span> <span class="hl num">13</span><span class="hl opt">);</span>
    c <span class="hl opt">=</span> hi <span class="hl opt">+ (</span>mid <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">13</span><span class="hl opt">) + (</span>w4 <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">26</span><span class="hl opt">);</span>
    w4 <span class="hl opt">&amp;=</span> <span class="hl num">0x3ffffff</span><span class="hl opt">;</span>
    <span class="hl com">/* k = 5 */</span>
    lo <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al5<span class="hl opt">,</span> bl0<span class="hl opt">);</span>
    mid <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al5<span class="hl opt">,</span> bh0<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah5<span class="hl opt">,</span> bl0<span class="hl opt">);</span>
    hi <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah5<span class="hl opt">,</span> bh0<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al4<span class="hl opt">,</span> bl1<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al4<span class="hl opt">,</span> bh1<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah4<span class="hl opt">,</span> bl1<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah4<span class="hl opt">,</span> bh1<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al3<span class="hl opt">,</span> bl2<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al3<span class="hl opt">,</span> bh2<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah3<span class="hl opt">,</span> bl2<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah3<span class="hl opt">,</span> bh2<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al2<span class="hl opt">,</span> bl3<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al2<span class="hl opt">,</span> bh3<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah2<span class="hl opt">,</span> bl3<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah2<span class="hl opt">,</span> bh3<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al1<span class="hl opt">,</span> bl4<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al1<span class="hl opt">,</span> bh4<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah1<span class="hl opt">,</span> bl4<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah1<span class="hl opt">,</span> bh4<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al0<span class="hl opt">,</span> bl5<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al0<span class="hl opt">,</span> bh5<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah0<span class="hl opt">,</span> bl5<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah0<span class="hl opt">,</span> bh5<span class="hl opt">);</span>
    <span class="hl kwa">var</span> w5 <span class="hl opt">=</span> c <span class="hl opt">+</span> lo <span class="hl opt">+ ((</span>mid <span class="hl opt">&amp;</span> <span class="hl num">0x1fff</span><span class="hl opt">) &lt;&lt;</span> <span class="hl num">13</span><span class="hl opt">);</span>
    c <span class="hl opt">=</span> hi <span class="hl opt">+ (</span>mid <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">13</span><span class="hl opt">) + (</span>w5 <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">26</span><span class="hl opt">);</span>
    w5 <span class="hl opt">&amp;=</span> <span class="hl num">0x3ffffff</span><span class="hl opt">;</span>
    <span class="hl com">/* k = 6 */</span>
    lo <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al6<span class="hl opt">,</span> bl0<span class="hl opt">);</span>
    mid <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al6<span class="hl opt">,</span> bh0<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah6<span class="hl opt">,</span> bl0<span class="hl opt">);</span>
    hi <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah6<span class="hl opt">,</span> bh0<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al5<span class="hl opt">,</span> bl1<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al5<span class="hl opt">,</span> bh1<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah5<span class="hl opt">,</span> bl1<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah5<span class="hl opt">,</span> bh1<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al4<span class="hl opt">,</span> bl2<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al4<span class="hl opt">,</span> bh2<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah4<span class="hl opt">,</span> bl2<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah4<span class="hl opt">,</span> bh2<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al3<span class="hl opt">,</span> bl3<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al3<span class="hl opt">,</span> bh3<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah3<span class="hl opt">,</span> bl3<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah3<span class="hl opt">,</span> bh3<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al2<span class="hl opt">,</span> bl4<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al2<span class="hl opt">,</span> bh4<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah2<span class="hl opt">,</span> bl4<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah2<span class="hl opt">,</span> bh4<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al1<span class="hl opt">,</span> bl5<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al1<span class="hl opt">,</span> bh5<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah1<span class="hl opt">,</span> bl5<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah1<span class="hl opt">,</span> bh5<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al0<span class="hl opt">,</span> bl6<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al0<span class="hl opt">,</span> bh6<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah0<span class="hl opt">,</span> bl6<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah0<span class="hl opt">,</span> bh6<span class="hl opt">);</span>
    <span class="hl kwa">var</span> w6 <span class="hl opt">=</span> c <span class="hl opt">+</span> lo <span class="hl opt">+ ((</span>mid <span class="hl opt">&amp;</span> <span class="hl num">0x1fff</span><span class="hl opt">) &lt;&lt;</span> <span class="hl num">13</span><span class="hl opt">);</span>
    c <span class="hl opt">=</span> hi <span class="hl opt">+ (</span>mid <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">13</span><span class="hl opt">) + (</span>w6 <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">26</span><span class="hl opt">);</span>
    w6 <span class="hl opt">&amp;=</span> <span class="hl num">0x3ffffff</span><span class="hl opt">;</span>
    <span class="hl com">/* k = 7 */</span>
    lo <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al7<span class="hl opt">,</span> bl0<span class="hl opt">);</span>
    mid <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al7<span class="hl opt">,</span> bh0<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah7<span class="hl opt">,</span> bl0<span class="hl opt">);</span>
    hi <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah7<span class="hl opt">,</span> bh0<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al6<span class="hl opt">,</span> bl1<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al6<span class="hl opt">,</span> bh1<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah6<span class="hl opt">,</span> bl1<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah6<span class="hl opt">,</span> bh1<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al5<span class="hl opt">,</span> bl2<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al5<span class="hl opt">,</span> bh2<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah5<span class="hl opt">,</span> bl2<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah5<span class="hl opt">,</span> bh2<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al4<span class="hl opt">,</span> bl3<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al4<span class="hl opt">,</span> bh3<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah4<span class="hl opt">,</span> bl3<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah4<span class="hl opt">,</span> bh3<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al3<span class="hl opt">,</span> bl4<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al3<span class="hl opt">,</span> bh4<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah3<span class="hl opt">,</span> bl4<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah3<span class="hl opt">,</span> bh4<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al2<span class="hl opt">,</span> bl5<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al2<span class="hl opt">,</span> bh5<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah2<span class="hl opt">,</span> bl5<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah2<span class="hl opt">,</span> bh5<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al1<span class="hl opt">,</span> bl6<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al1<span class="hl opt">,</span> bh6<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah1<span class="hl opt">,</span> bl6<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah1<span class="hl opt">,</span> bh6<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al0<span class="hl opt">,</span> bl7<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al0<span class="hl opt">,</span> bh7<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah0<span class="hl opt">,</span> bl7<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah0<span class="hl opt">,</span> bh7<span class="hl opt">);</span>
    <span class="hl kwa">var</span> w7 <span class="hl opt">=</span> c <span class="hl opt">+</span> lo <span class="hl opt">+ ((</span>mid <span class="hl opt">&amp;</span> <span class="hl num">0x1fff</span><span class="hl opt">) &lt;&lt;</span> <span class="hl num">13</span><span class="hl opt">);</span>
    c <span class="hl opt">=</span> hi <span class="hl opt">+ (</span>mid <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">13</span><span class="hl opt">) + (</span>w7 <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">26</span><span class="hl opt">);</span>
    w7 <span class="hl opt">&amp;=</span> <span class="hl num">0x3ffffff</span><span class="hl opt">;</span>
    <span class="hl com">/* k = 8 */</span>
    lo <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al8<span class="hl opt">,</span> bl0<span class="hl opt">);</span>
    mid <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al8<span class="hl opt">,</span> bh0<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah8<span class="hl opt">,</span> bl0<span class="hl opt">);</span>
    hi <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah8<span class="hl opt">,</span> bh0<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al7<span class="hl opt">,</span> bl1<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al7<span class="hl opt">,</span> bh1<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah7<span class="hl opt">,</span> bl1<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah7<span class="hl opt">,</span> bh1<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al6<span class="hl opt">,</span> bl2<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al6<span class="hl opt">,</span> bh2<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah6<span class="hl opt">,</span> bl2<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah6<span class="hl opt">,</span> bh2<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al5<span class="hl opt">,</span> bl3<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al5<span class="hl opt">,</span> bh3<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah5<span class="hl opt">,</span> bl3<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah5<span class="hl opt">,</span> bh3<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al4<span class="hl opt">,</span> bl4<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al4<span class="hl opt">,</span> bh4<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah4<span class="hl opt">,</span> bl4<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah4<span class="hl opt">,</span> bh4<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al3<span class="hl opt">,</span> bl5<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al3<span class="hl opt">,</span> bh5<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah3<span class="hl opt">,</span> bl5<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah3<span class="hl opt">,</span> bh5<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al2<span class="hl opt">,</span> bl6<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al2<span class="hl opt">,</span> bh6<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah2<span class="hl opt">,</span> bl6<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah2<span class="hl opt">,</span> bh6<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al1<span class="hl opt">,</span> bl7<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al1<span class="hl opt">,</span> bh7<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah1<span class="hl opt">,</span> bl7<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah1<span class="hl opt">,</span> bh7<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al0<span class="hl opt">,</span> bl8<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al0<span class="hl opt">,</span> bh8<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah0<span class="hl opt">,</span> bl8<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah0<span class="hl opt">,</span> bh8<span class="hl opt">);</span>
    <span class="hl kwa">var</span> w8 <span class="hl opt">=</span> c <span class="hl opt">+</span> lo <span class="hl opt">+ ((</span>mid <span class="hl opt">&amp;</span> <span class="hl num">0x1fff</span><span class="hl opt">) &lt;&lt;</span> <span class="hl num">13</span><span class="hl opt">);</span>
    c <span class="hl opt">=</span> hi <span class="hl opt">+ (</span>mid <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">13</span><span class="hl opt">) + (</span>w8 <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">26</span><span class="hl opt">);</span>
    w8 <span class="hl opt">&amp;=</span> <span class="hl num">0x3ffffff</span><span class="hl opt">;</span>
    <span class="hl com">/* k = 9 */</span>
    lo <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al9<span class="hl opt">,</span> bl0<span class="hl opt">);</span>
    mid <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al9<span class="hl opt">,</span> bh0<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah9<span class="hl opt">,</span> bl0<span class="hl opt">);</span>
    hi <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah9<span class="hl opt">,</span> bh0<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al8<span class="hl opt">,</span> bl1<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al8<span class="hl opt">,</span> bh1<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah8<span class="hl opt">,</span> bl1<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah8<span class="hl opt">,</span> bh1<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al7<span class="hl opt">,</span> bl2<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al7<span class="hl opt">,</span> bh2<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah7<span class="hl opt">,</span> bl2<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah7<span class="hl opt">,</span> bh2<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al6<span class="hl opt">,</span> bl3<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al6<span class="hl opt">,</span> bh3<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah6<span class="hl opt">,</span> bl3<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah6<span class="hl opt">,</span> bh3<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al5<span class="hl opt">,</span> bl4<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al5<span class="hl opt">,</span> bh4<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah5<span class="hl opt">,</span> bl4<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah5<span class="hl opt">,</span> bh4<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al4<span class="hl opt">,</span> bl5<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al4<span class="hl opt">,</span> bh5<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah4<span class="hl opt">,</span> bl5<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah4<span class="hl opt">,</span> bh5<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al3<span class="hl opt">,</span> bl6<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al3<span class="hl opt">,</span> bh6<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah3<span class="hl opt">,</span> bl6<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah3<span class="hl opt">,</span> bh6<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al2<span class="hl opt">,</span> bl7<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al2<span class="hl opt">,</span> bh7<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah2<span class="hl opt">,</span> bl7<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah2<span class="hl opt">,</span> bh7<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al1<span class="hl opt">,</span> bl8<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al1<span class="hl opt">,</span> bh8<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah1<span class="hl opt">,</span> bl8<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah1<span class="hl opt">,</span> bh8<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al0<span class="hl opt">,</span> bl9<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al0<span class="hl opt">,</span> bh9<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah0<span class="hl opt">,</span> bl9<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah0<span class="hl opt">,</span> bh9<span class="hl opt">);</span>
    <span class="hl kwa">var</span> w9 <span class="hl opt">=</span> c <span class="hl opt">+</span> lo <span class="hl opt">+ ((</span>mid <span class="hl opt">&amp;</span> <span class="hl num">0x1fff</span><span class="hl opt">) &lt;&lt;</span> <span class="hl num">13</span><span class="hl opt">);</span>
    c <span class="hl opt">=</span> hi <span class="hl opt">+ (</span>mid <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">13</span><span class="hl opt">) + (</span>w9 <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">26</span><span class="hl opt">);</span>
    w9 <span class="hl opt">&amp;=</span> <span class="hl num">0x3ffffff</span><span class="hl opt">;</span>
    <span class="hl com">/* k = 10 */</span>
    lo <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al9<span class="hl opt">,</span> bl1<span class="hl opt">);</span>
    mid <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al9<span class="hl opt">,</span> bh1<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah9<span class="hl opt">,</span> bl1<span class="hl opt">);</span>
    hi <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah9<span class="hl opt">,</span> bh1<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al8<span class="hl opt">,</span> bl2<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al8<span class="hl opt">,</span> bh2<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah8<span class="hl opt">,</span> bl2<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah8<span class="hl opt">,</span> bh2<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al7<span class="hl opt">,</span> bl3<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al7<span class="hl opt">,</span> bh3<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah7<span class="hl opt">,</span> bl3<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah7<span class="hl opt">,</span> bh3<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al6<span class="hl opt">,</span> bl4<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al6<span class="hl opt">,</span> bh4<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah6<span class="hl opt">,</span> bl4<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah6<span class="hl opt">,</span> bh4<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al5<span class="hl opt">,</span> bl5<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al5<span class="hl opt">,</span> bh5<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah5<span class="hl opt">,</span> bl5<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah5<span class="hl opt">,</span> bh5<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al4<span class="hl opt">,</span> bl6<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al4<span class="hl opt">,</span> bh6<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah4<span class="hl opt">,</span> bl6<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah4<span class="hl opt">,</span> bh6<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al3<span class="hl opt">,</span> bl7<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al3<span class="hl opt">,</span> bh7<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah3<span class="hl opt">,</span> bl7<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah3<span class="hl opt">,</span> bh7<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al2<span class="hl opt">,</span> bl8<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al2<span class="hl opt">,</span> bh8<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah2<span class="hl opt">,</span> bl8<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah2<span class="hl opt">,</span> bh8<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al1<span class="hl opt">,</span> bl9<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al1<span class="hl opt">,</span> bh9<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah1<span class="hl opt">,</span> bl9<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah1<span class="hl opt">,</span> bh9<span class="hl opt">);</span>
    <span class="hl kwa">var</span> w10 <span class="hl opt">=</span> c <span class="hl opt">+</span> lo <span class="hl opt">+ ((</span>mid <span class="hl opt">&amp;</span> <span class="hl num">0x1fff</span><span class="hl opt">) &lt;&lt;</span> <span class="hl num">13</span><span class="hl opt">);</span>
    c <span class="hl opt">=</span> hi <span class="hl opt">+ (</span>mid <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">13</span><span class="hl opt">) + (</span>w10 <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">26</span><span class="hl opt">);</span>
    w10 <span class="hl opt">&amp;=</span> <span class="hl num">0x3ffffff</span><span class="hl opt">;</span>
    <span class="hl com">/* k = 11 */</span>
    lo <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al9<span class="hl opt">,</span> bl2<span class="hl opt">);</span>
    mid <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al9<span class="hl opt">,</span> bh2<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah9<span class="hl opt">,</span> bl2<span class="hl opt">);</span>
    hi <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah9<span class="hl opt">,</span> bh2<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al8<span class="hl opt">,</span> bl3<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al8<span class="hl opt">,</span> bh3<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah8<span class="hl opt">,</span> bl3<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah8<span class="hl opt">,</span> bh3<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al7<span class="hl opt">,</span> bl4<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al7<span class="hl opt">,</span> bh4<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah7<span class="hl opt">,</span> bl4<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah7<span class="hl opt">,</span> bh4<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al6<span class="hl opt">,</span> bl5<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al6<span class="hl opt">,</span> bh5<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah6<span class="hl opt">,</span> bl5<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah6<span class="hl opt">,</span> bh5<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al5<span class="hl opt">,</span> bl6<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al5<span class="hl opt">,</span> bh6<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah5<span class="hl opt">,</span> bl6<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah5<span class="hl opt">,</span> bh6<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al4<span class="hl opt">,</span> bl7<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al4<span class="hl opt">,</span> bh7<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah4<span class="hl opt">,</span> bl7<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah4<span class="hl opt">,</span> bh7<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al3<span class="hl opt">,</span> bl8<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al3<span class="hl opt">,</span> bh8<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah3<span class="hl opt">,</span> bl8<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah3<span class="hl opt">,</span> bh8<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al2<span class="hl opt">,</span> bl9<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al2<span class="hl opt">,</span> bh9<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah2<span class="hl opt">,</span> bl9<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah2<span class="hl opt">,</span> bh9<span class="hl opt">);</span>
    <span class="hl kwa">var</span> w11 <span class="hl opt">=</span> c <span class="hl opt">+</span> lo <span class="hl opt">+ ((</span>mid <span class="hl opt">&amp;</span> <span class="hl num">0x1fff</span><span class="hl opt">) &lt;&lt;</span> <span class="hl num">13</span><span class="hl opt">);</span>
    c <span class="hl opt">=</span> hi <span class="hl opt">+ (</span>mid <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">13</span><span class="hl opt">) + (</span>w11 <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">26</span><span class="hl opt">);</span>
    w11 <span class="hl opt">&amp;=</span> <span class="hl num">0x3ffffff</span><span class="hl opt">;</span>
    <span class="hl com">/* k = 12 */</span>
    lo <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al9<span class="hl opt">,</span> bl3<span class="hl opt">);</span>
    mid <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al9<span class="hl opt">,</span> bh3<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah9<span class="hl opt">,</span> bl3<span class="hl opt">);</span>
    hi <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah9<span class="hl opt">,</span> bh3<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al8<span class="hl opt">,</span> bl4<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al8<span class="hl opt">,</span> bh4<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah8<span class="hl opt">,</span> bl4<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah8<span class="hl opt">,</span> bh4<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al7<span class="hl opt">,</span> bl5<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al7<span class="hl opt">,</span> bh5<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah7<span class="hl opt">,</span> bl5<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah7<span class="hl opt">,</span> bh5<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al6<span class="hl opt">,</span> bl6<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al6<span class="hl opt">,</span> bh6<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah6<span class="hl opt">,</span> bl6<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah6<span class="hl opt">,</span> bh6<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al5<span class="hl opt">,</span> bl7<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al5<span class="hl opt">,</span> bh7<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah5<span class="hl opt">,</span> bl7<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah5<span class="hl opt">,</span> bh7<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al4<span class="hl opt">,</span> bl8<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al4<span class="hl opt">,</span> bh8<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah4<span class="hl opt">,</span> bl8<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah4<span class="hl opt">,</span> bh8<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al3<span class="hl opt">,</span> bl9<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al3<span class="hl opt">,</span> bh9<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah3<span class="hl opt">,</span> bl9<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah3<span class="hl opt">,</span> bh9<span class="hl opt">);</span>
    <span class="hl kwa">var</span> w12 <span class="hl opt">=</span> c <span class="hl opt">+</span> lo <span class="hl opt">+ ((</span>mid <span class="hl opt">&amp;</span> <span class="hl num">0x1fff</span><span class="hl opt">) &lt;&lt;</span> <span class="hl num">13</span><span class="hl opt">);</span>
    c <span class="hl opt">=</span> hi <span class="hl opt">+ (</span>mid <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">13</span><span class="hl opt">) + (</span>w12 <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">26</span><span class="hl opt">);</span>
    w12 <span class="hl opt">&amp;=</span> <span class="hl num">0x3ffffff</span><span class="hl opt">;</span>
    <span class="hl com">/* k = 13 */</span>
    lo <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al9<span class="hl opt">,</span> bl4<span class="hl opt">);</span>
    mid <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al9<span class="hl opt">,</span> bh4<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah9<span class="hl opt">,</span> bl4<span class="hl opt">);</span>
    hi <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah9<span class="hl opt">,</span> bh4<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al8<span class="hl opt">,</span> bl5<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al8<span class="hl opt">,</span> bh5<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah8<span class="hl opt">,</span> bl5<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah8<span class="hl opt">,</span> bh5<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al7<span class="hl opt">,</span> bl6<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al7<span class="hl opt">,</span> bh6<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah7<span class="hl opt">,</span> bl6<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah7<span class="hl opt">,</span> bh6<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al6<span class="hl opt">,</span> bl7<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al6<span class="hl opt">,</span> bh7<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah6<span class="hl opt">,</span> bl7<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah6<span class="hl opt">,</span> bh7<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al5<span class="hl opt">,</span> bl8<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al5<span class="hl opt">,</span> bh8<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah5<span class="hl opt">,</span> bl8<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah5<span class="hl opt">,</span> bh8<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al4<span class="hl opt">,</span> bl9<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al4<span class="hl opt">,</span> bh9<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah4<span class="hl opt">,</span> bl9<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah4<span class="hl opt">,</span> bh9<span class="hl opt">);</span>
    <span class="hl kwa">var</span> w13 <span class="hl opt">=</span> c <span class="hl opt">+</span> lo <span class="hl opt">+ ((</span>mid <span class="hl opt">&amp;</span> <span class="hl num">0x1fff</span><span class="hl opt">) &lt;&lt;</span> <span class="hl num">13</span><span class="hl opt">);</span>
    c <span class="hl opt">=</span> hi <span class="hl opt">+ (</span>mid <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">13</span><span class="hl opt">) + (</span>w13 <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">26</span><span class="hl opt">);</span>
    w13 <span class="hl opt">&amp;=</span> <span class="hl num">0x3ffffff</span><span class="hl opt">;</span>
    <span class="hl com">/* k = 14 */</span>
    lo <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al9<span class="hl opt">,</span> bl5<span class="hl opt">);</span>
    mid <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al9<span class="hl opt">,</span> bh5<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah9<span class="hl opt">,</span> bl5<span class="hl opt">);</span>
    hi <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah9<span class="hl opt">,</span> bh5<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al8<span class="hl opt">,</span> bl6<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al8<span class="hl opt">,</span> bh6<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah8<span class="hl opt">,</span> bl6<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah8<span class="hl opt">,</span> bh6<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al7<span class="hl opt">,</span> bl7<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al7<span class="hl opt">,</span> bh7<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah7<span class="hl opt">,</span> bl7<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah7<span class="hl opt">,</span> bh7<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al6<span class="hl opt">,</span> bl8<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al6<span class="hl opt">,</span> bh8<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah6<span class="hl opt">,</span> bl8<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah6<span class="hl opt">,</span> bh8<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al5<span class="hl opt">,</span> bl9<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al5<span class="hl opt">,</span> bh9<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah5<span class="hl opt">,</span> bl9<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah5<span class="hl opt">,</span> bh9<span class="hl opt">);</span>
    <span class="hl kwa">var</span> w14 <span class="hl opt">=</span> c <span class="hl opt">+</span> lo <span class="hl opt">+ ((</span>mid <span class="hl opt">&amp;</span> <span class="hl num">0x1fff</span><span class="hl opt">) &lt;&lt;</span> <span class="hl num">13</span><span class="hl opt">);</span>
    c <span class="hl opt">=</span> hi <span class="hl opt">+ (</span>mid <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">13</span><span class="hl opt">) + (</span>w14 <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">26</span><span class="hl opt">);</span>
    w14 <span class="hl opt">&amp;=</span> <span class="hl num">0x3ffffff</span><span class="hl opt">;</span>
    <span class="hl com">/* k = 15 */</span>
    lo <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al9<span class="hl opt">,</span> bl6<span class="hl opt">);</span>
    mid <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al9<span class="hl opt">,</span> bh6<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah9<span class="hl opt">,</span> bl6<span class="hl opt">);</span>
    hi <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah9<span class="hl opt">,</span> bh6<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al8<span class="hl opt">,</span> bl7<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al8<span class="hl opt">,</span> bh7<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah8<span class="hl opt">,</span> bl7<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah8<span class="hl opt">,</span> bh7<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al7<span class="hl opt">,</span> bl8<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al7<span class="hl opt">,</span> bh8<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah7<span class="hl opt">,</span> bl8<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah7<span class="hl opt">,</span> bh8<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al6<span class="hl opt">,</span> bl9<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al6<span class="hl opt">,</span> bh9<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah6<span class="hl opt">,</span> bl9<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah6<span class="hl opt">,</span> bh9<span class="hl opt">);</span>
    <span class="hl kwa">var</span> w15 <span class="hl opt">=</span> c <span class="hl opt">+</span> lo <span class="hl opt">+ ((</span>mid <span class="hl opt">&amp;</span> <span class="hl num">0x1fff</span><span class="hl opt">) &lt;&lt;</span> <span class="hl num">13</span><span class="hl opt">);</span>
    c <span class="hl opt">=</span> hi <span class="hl opt">+ (</span>mid <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">13</span><span class="hl opt">) + (</span>w15 <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">26</span><span class="hl opt">);</span>
    w15 <span class="hl opt">&amp;=</span> <span class="hl num">0x3ffffff</span><span class="hl opt">;</span>
    <span class="hl com">/* k = 16 */</span>
    lo <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al9<span class="hl opt">,</span> bl7<span class="hl opt">);</span>
    mid <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al9<span class="hl opt">,</span> bh7<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah9<span class="hl opt">,</span> bl7<span class="hl opt">);</span>
    hi <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah9<span class="hl opt">,</span> bh7<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al8<span class="hl opt">,</span> bl8<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al8<span class="hl opt">,</span> bh8<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah8<span class="hl opt">,</span> bl8<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah8<span class="hl opt">,</span> bh8<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al7<span class="hl opt">,</span> bl9<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al7<span class="hl opt">,</span> bh9<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah7<span class="hl opt">,</span> bl9<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah7<span class="hl opt">,</span> bh9<span class="hl opt">);</span>
    <span class="hl kwa">var</span> w16 <span class="hl opt">=</span> c <span class="hl opt">+</span> lo <span class="hl opt">+ ((</span>mid <span class="hl opt">&amp;</span> <span class="hl num">0x1fff</span><span class="hl opt">) &lt;&lt;</span> <span class="hl num">13</span><span class="hl opt">);</span>
    c <span class="hl opt">=</span> hi <span class="hl opt">+ (</span>mid <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">13</span><span class="hl opt">) + (</span>w16 <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">26</span><span class="hl opt">);</span>
    w16 <span class="hl opt">&amp;=</span> <span class="hl num">0x3ffffff</span><span class="hl opt">;</span>
    <span class="hl com">/* k = 17 */</span>
    lo <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al9<span class="hl opt">,</span> bl8<span class="hl opt">);</span>
    mid <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al9<span class="hl opt">,</span> bh8<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah9<span class="hl opt">,</span> bl8<span class="hl opt">);</span>
    hi <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah9<span class="hl opt">,</span> bh8<span class="hl opt">);</span>
    lo <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al8<span class="hl opt">,</span> bl9<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al8<span class="hl opt">,</span> bh9<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah8<span class="hl opt">,</span> bl9<span class="hl opt">);</span>
    hi <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah8<span class="hl opt">,</span> bh9<span class="hl opt">);</span>
    <span class="hl kwa">var</span> w17 <span class="hl opt">=</span> c <span class="hl opt">+</span> lo <span class="hl opt">+ ((</span>mid <span class="hl opt">&amp;</span> <span class="hl num">0x1fff</span><span class="hl opt">) &lt;&lt;</span> <span class="hl num">13</span><span class="hl opt">);</span>
    c <span class="hl opt">=</span> hi <span class="hl opt">+ (</span>mid <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">13</span><span class="hl opt">) + (</span>w17 <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">26</span><span class="hl opt">);</span>
    w17 <span class="hl opt">&amp;=</span> <span class="hl num">0x3ffffff</span><span class="hl opt">;</span>
    <span class="hl com">/* k = 18 */</span>
    lo <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al9<span class="hl opt">,</span> bl9<span class="hl opt">);</span>
    mid <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>al9<span class="hl opt">,</span> bh9<span class="hl opt">);</span>
    mid <span class="hl opt">+=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah9<span class="hl opt">,</span> bl9<span class="hl opt">);</span>
    hi <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span>ah9<span class="hl opt">,</span> bh9<span class="hl opt">);</span>
    <span class="hl kwa">var</span> w18 <span class="hl opt">=</span> c <span class="hl opt">+</span> lo <span class="hl opt">+ ((</span>mid <span class="hl opt">&amp;</span> <span class="hl num">0x1fff</span><span class="hl opt">) &lt;&lt;</span> <span class="hl num">13</span><span class="hl opt">);</span>
    c <span class="hl opt">=</span> hi <span class="hl opt">+ (</span>mid <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">13</span><span class="hl opt">) + (</span>w18 <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">26</span><span class="hl opt">);</span>
    w18 <span class="hl opt">&amp;=</span> <span class="hl num">0x3ffffff</span><span class="hl opt">;</span>
    o<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] =</span> w0<span class="hl opt">;</span>
    o<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] =</span> w1<span class="hl opt">;</span>
    o<span class="hl opt">[</span><span class="hl num">2</span><span class="hl opt">] =</span> w2<span class="hl opt">;</span>
    o<span class="hl opt">[</span><span class="hl num">3</span><span class="hl opt">] =</span> w3<span class="hl opt">;</span>
    o<span class="hl opt">[</span><span class="hl num">4</span><span class="hl opt">] =</span> w4<span class="hl opt">;</span>
    o<span class="hl opt">[</span><span class="hl num">5</span><span class="hl opt">] =</span> w5<span class="hl opt">;</span>
    o<span class="hl opt">[</span><span class="hl num">6</span><span class="hl opt">] =</span> w6<span class="hl opt">;</span>
    o<span class="hl opt">[</span><span class="hl num">7</span><span class="hl opt">] =</span> w7<span class="hl opt">;</span>
    o<span class="hl opt">[</span><span class="hl num">8</span><span class="hl opt">] =</span> w8<span class="hl opt">;</span>
    o<span class="hl opt">[</span><span class="hl num">9</span><span class="hl opt">] =</span> w9<span class="hl opt">;</span>
    o<span class="hl opt">[</span><span class="hl num">10</span><span class="hl opt">] =</span> w10<span class="hl opt">;</span>
    o<span class="hl opt">[</span><span class="hl num">11</span><span class="hl opt">] =</span> w11<span class="hl opt">;</span>
    o<span class="hl opt">[</span><span class="hl num">12</span><span class="hl opt">] =</span> w12<span class="hl opt">;</span>
    o<span class="hl opt">[</span><span class="hl num">13</span><span class="hl opt">] =</span> w13<span class="hl opt">;</span>
    o<span class="hl opt">[</span><span class="hl num">14</span><span class="hl opt">] =</span> w14<span class="hl opt">;</span>
    o<span class="hl opt">[</span><span class="hl num">15</span><span class="hl opt">] =</span> w15<span class="hl opt">;</span>
    o<span class="hl opt">[</span><span class="hl num">16</span><span class="hl opt">] =</span> w16<span class="hl opt">;</span>
    o<span class="hl opt">[</span><span class="hl num">17</span><span class="hl opt">] =</span> w17<span class="hl opt">;</span>
    o<span class="hl opt">[</span><span class="hl num">18</span><span class="hl opt">] =</span> w18<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>c <span class="hl opt">!==</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      o<span class="hl opt">[</span><span class="hl num">19</span><span class="hl opt">] =</span> c<span class="hl opt">;</span>
      out<span class="hl opt">.</span>length<span class="hl opt">++;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return</span> out<span class="hl opt">;</span>
  <span class="hl opt">};</span>

  <span class="hl slc">// Polyfill comb</span>
  <span class="hl kwa">if</span> <span class="hl opt">(!</span>Math<span class="hl opt">.</span>imul<span class="hl opt">) {</span>
    comb10MulTo <span class="hl opt">=</span> smallMulTo<span class="hl opt">;</span>
  <span class="hl opt">}</span>

  <span class="hl kwa">function</span> <span class="hl kwd">bigMulTo</span> <span class="hl opt">(</span>self<span class="hl opt">,</span> num<span class="hl opt">,</span> out<span class="hl opt">) {</span>
    out<span class="hl opt">.</span>negative <span class="hl opt">=</span> num<span class="hl opt">.</span>negative <span class="hl opt">^</span> self<span class="hl opt">.</span>negative<span class="hl opt">;</span>
    out<span class="hl opt">.</span>length <span class="hl opt">=</span> self<span class="hl opt">.</span>length <span class="hl opt">+</span> num<span class="hl opt">.</span>length<span class="hl opt">;</span>

    <span class="hl kwa">var</span> carry <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> hncarry <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> k <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> k <span class="hl opt">&lt;</span> out<span class="hl opt">.</span>length <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span> k<span class="hl opt">++) {</span>
      <span class="hl slc">// Sum all words with the same `i + j = k` and accumulate `ncarry`,</span>
      <span class="hl slc">// note that ncarry could be &gt;= 0x3ffffff</span>
      <span class="hl kwa">var</span> ncarry <span class="hl opt">=</span> hncarry<span class="hl opt">;</span>
      hncarry <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl kwa">var</span> rword <span class="hl opt">=</span> carry <span class="hl opt">&amp;</span> <span class="hl num">0x3ffffff</span><span class="hl opt">;</span>
      <span class="hl kwa">var</span> maxJ <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">min</span><span class="hl opt">(</span>k<span class="hl opt">,</span> num<span class="hl opt">.</span>length <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">);</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> j <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">max</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> k <span class="hl opt">-</span> self<span class="hl opt">.</span>length <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">);</span> j <span class="hl opt">&lt;=</span> maxJ<span class="hl opt">;</span> j<span class="hl opt">++) {</span>
        <span class="hl kwa">var</span> i <span class="hl opt">=</span> k <span class="hl opt">-</span> j<span class="hl opt">;</span>
        <span class="hl kwa">var</span> a <span class="hl opt">=</span> self<span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">;</span>
        <span class="hl kwa">var</span> b <span class="hl opt">=</span> num<span class="hl opt">.</span>words<span class="hl opt">[</span>j<span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">;</span>
        <span class="hl kwa">var</span> r <span class="hl opt">=</span> a <span class="hl opt">*</span> b<span class="hl opt">;</span>

        <span class="hl kwa">var</span> lo <span class="hl opt">=</span> r <span class="hl opt">&amp;</span> <span class="hl num">0x3ffffff</span><span class="hl opt">;</span>
        ncarry <span class="hl opt">= (</span>ncarry <span class="hl opt">+ ((</span>r <span class="hl opt">/</span> <span class="hl num">0x4000000</span><span class="hl opt">) |</span> <span class="hl num">0</span><span class="hl opt">)) |</span> <span class="hl num">0</span><span class="hl opt">;</span>
        lo <span class="hl opt">= (</span>lo <span class="hl opt">+</span> rword<span class="hl opt">) |</span> <span class="hl num">0</span><span class="hl opt">;</span>
        rword <span class="hl opt">=</span> lo <span class="hl opt">&amp;</span> <span class="hl num">0x3ffffff</span><span class="hl opt">;</span>
        ncarry <span class="hl opt">= (</span>ncarry <span class="hl opt">+ (</span>lo <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">26</span><span class="hl opt">)) |</span> <span class="hl num">0</span><span class="hl opt">;</span>

        hncarry <span class="hl opt">+=</span> ncarry <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">26</span><span class="hl opt">;</span>
        ncarry <span class="hl opt">&amp;=</span> <span class="hl num">0x3ffffff</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>
      out<span class="hl opt">.</span>words<span class="hl opt">[</span>k<span class="hl opt">] =</span> rword<span class="hl opt">;</span>
      carry <span class="hl opt">=</span> ncarry<span class="hl opt">;</span>
      ncarry <span class="hl opt">=</span> hncarry<span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>carry <span class="hl opt">!==</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      out<span class="hl opt">.</span>words<span class="hl opt">[</span>k<span class="hl opt">] =</span> carry<span class="hl opt">;</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
      out<span class="hl opt">.</span>length<span class="hl opt">--;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">return</span> out<span class="hl opt">.</span><span class="hl kwd">strip</span><span class="hl opt">();</span>
  <span class="hl opt">}</span>

  <span class="hl kwa">function</span> <span class="hl kwd">jumboMulTo</span> <span class="hl opt">(</span>self<span class="hl opt">,</span> num<span class="hl opt">,</span> out<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> fftm <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">FFTM</span><span class="hl opt">();</span>
    <span class="hl kwa">return</span> fftm<span class="hl opt">.</span><span class="hl kwd">mulp</span><span class="hl opt">(</span>self<span class="hl opt">,</span> num<span class="hl opt">,</span> out<span class="hl opt">);</span>
  <span class="hl opt">}</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>mulTo <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">mulTo</span> <span class="hl opt">(</span>num<span class="hl opt">,</span> out<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> res<span class="hl opt">;</span>
    <span class="hl kwa">var</span> len <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">+</span> num<span class="hl opt">.</span>length<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">===</span> <span class="hl num">10</span> <span class="hl opt">&amp;&amp;</span> num<span class="hl opt">.</span>length <span class="hl opt">===</span> <span class="hl num">10</span><span class="hl opt">) {</span>
      res <span class="hl opt">=</span> <span class="hl kwd">comb10MulTo</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> num<span class="hl opt">,</span> out<span class="hl opt">);</span>
    <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>len <span class="hl opt">&lt;</span> <span class="hl num">63</span><span class="hl opt">) {</span>
      res <span class="hl opt">=</span> <span class="hl kwd">smallMulTo</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> num<span class="hl opt">,</span> out<span class="hl opt">);</span>
    <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>len <span class="hl opt">&lt;</span> <span class="hl num">1024</span><span class="hl opt">) {</span>
      res <span class="hl opt">=</span> <span class="hl kwd">bigMulTo</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> num<span class="hl opt">,</span> out<span class="hl opt">);</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
      res <span class="hl opt">=</span> <span class="hl kwd">jumboMulTo</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> num<span class="hl opt">,</span> out<span class="hl opt">);</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">return</span> res<span class="hl opt">;</span>
  <span class="hl opt">};</span>

  <span class="hl slc">// Cooley-Tukey algorithm for FFT</span>
  <span class="hl slc">// slightly revisited to rely on looping instead of recursion</span>

  <span class="hl kwa">function</span> <span class="hl kwd">FFTM</span> <span class="hl opt">(</span>x<span class="hl opt">,</span> y<span class="hl opt">) {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>x <span class="hl opt">=</span> x<span class="hl opt">;</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>y <span class="hl opt">=</span> y<span class="hl opt">;</span>
  <span class="hl opt">}</span>

  FFTM<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>makeRBT <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">makeRBT</span> <span class="hl opt">(</span>N<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> t <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Array</span><span class="hl opt">(</span>N<span class="hl opt">);</span>
    <span class="hl kwa">var</span> l <span class="hl opt">=</span> BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span><span class="hl kwd">_countBits</span><span class="hl opt">(</span>N<span class="hl opt">) -</span> <span class="hl num">1</span><span class="hl opt">;</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> N<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
      t<span class="hl opt">[</span>i<span class="hl opt">] =</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">revBin</span><span class="hl opt">(</span>i<span class="hl opt">,</span> l<span class="hl opt">,</span> N<span class="hl opt">);</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">return</span> t<span class="hl opt">;</span>
  <span class="hl opt">};</span>

  <span class="hl slc">// Returns binary-reversed representation of `x`</span>
  FFTM<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>revBin <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">revBin</span> <span class="hl opt">(</span>x<span class="hl opt">,</span> l<span class="hl opt">,</span> N<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>x <span class="hl opt">===</span> <span class="hl num">0</span> <span class="hl opt">||</span> x <span class="hl opt">===</span> N <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">return</span> x<span class="hl opt">;</span>

    <span class="hl kwa">var</span> rb <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> l<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
      rb <span class="hl opt">|= (</span>x <span class="hl opt">&amp;</span> <span class="hl num">1</span><span class="hl opt">) &lt;&lt; (</span>l <span class="hl opt">-</span> i <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">);</span>
      x <span class="hl opt">&gt;&gt;=</span> <span class="hl num">1</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">return</span> rb<span class="hl opt">;</span>
  <span class="hl opt">};</span>

  <span class="hl slc">// Performs &quot;tweedling&quot; phase, therefore 'emulating'</span>
  <span class="hl slc">// behaviour of the recursive algorithm</span>
  FFTM<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>permute <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">permute</span> <span class="hl opt">(</span>rbt<span class="hl opt">,</span> rws<span class="hl opt">,</span> iws<span class="hl opt">,</span> rtws<span class="hl opt">,</span> itws<span class="hl opt">,</span> N<span class="hl opt">) {</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> N<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
      rtws<span class="hl opt">[</span>i<span class="hl opt">] =</span> rws<span class="hl opt">[</span>rbt<span class="hl opt">[</span>i<span class="hl opt">]];</span>
      itws<span class="hl opt">[</span>i<span class="hl opt">] =</span> iws<span class="hl opt">[</span>rbt<span class="hl opt">[</span>i<span class="hl opt">]];</span>
    <span class="hl opt">}</span>
  <span class="hl opt">};</span>

  FFTM<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>transform <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">transform</span> <span class="hl opt">(</span>rws<span class="hl opt">,</span> iws<span class="hl opt">,</span> rtws<span class="hl opt">,</span> itws<span class="hl opt">,</span> N<span class="hl opt">,</span> rbt<span class="hl opt">) {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">permute</span><span class="hl opt">(</span>rbt<span class="hl opt">,</span> rws<span class="hl opt">,</span> iws<span class="hl opt">,</span> rtws<span class="hl opt">,</span> itws<span class="hl opt">,</span> N<span class="hl opt">);</span>

    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> s <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span> s <span class="hl opt">&lt;</span> N<span class="hl opt">;</span> s <span class="hl opt">&lt;&lt;=</span> <span class="hl num">1</span><span class="hl opt">) {</span>
      <span class="hl kwa">var</span> l <span class="hl opt">=</span> s <span class="hl opt">&lt;&lt;</span> <span class="hl num">1</span><span class="hl opt">;</span>

      <span class="hl kwa">var</span> rtwdf <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">cos</span><span class="hl opt">(</span><span class="hl num">2</span> <span class="hl opt">*</span> Math<span class="hl opt">.</span>PI <span class="hl opt">/</span> l<span class="hl opt">);</span>
      <span class="hl kwa">var</span> itwdf <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">sin</span><span class="hl opt">(</span><span class="hl num">2</span> <span class="hl opt">*</span> Math<span class="hl opt">.</span>PI <span class="hl opt">/</span> l<span class="hl opt">);</span>

      <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> p <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> p <span class="hl opt">&lt;</span> N<span class="hl opt">;</span> p <span class="hl opt">+=</span> l<span class="hl opt">) {</span>
        <span class="hl kwa">var</span> rtwdf_ <span class="hl opt">=</span> rtwdf<span class="hl opt">;</span>
        <span class="hl kwa">var</span> itwdf_ <span class="hl opt">=</span> itwdf<span class="hl opt">;</span>

        <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> j <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> j <span class="hl opt">&lt;</span> s<span class="hl opt">;</span> j<span class="hl opt">++) {</span>
          <span class="hl kwa">var</span> re <span class="hl opt">=</span> rtws<span class="hl opt">[</span>p <span class="hl opt">+</span> j<span class="hl opt">];</span>
          <span class="hl kwa">var</span> ie <span class="hl opt">=</span> itws<span class="hl opt">[</span>p <span class="hl opt">+</span> j<span class="hl opt">];</span>

          <span class="hl kwa">var</span> ro <span class="hl opt">=</span> rtws<span class="hl opt">[</span>p <span class="hl opt">+</span> j <span class="hl opt">+</span> s<span class="hl opt">];</span>
          <span class="hl kwa">var</span> io <span class="hl opt">=</span> itws<span class="hl opt">[</span>p <span class="hl opt">+</span> j <span class="hl opt">+</span> s<span class="hl opt">];</span>

          <span class="hl kwa">var</span> rx <span class="hl opt">=</span> rtwdf_ <span class="hl opt">*</span> ro <span class="hl opt">-</span> itwdf_ <span class="hl opt">*</span> io<span class="hl opt">;</span>

          io <span class="hl opt">=</span> rtwdf_ <span class="hl opt">*</span> io <span class="hl opt">+</span> itwdf_ <span class="hl opt">*</span> ro<span class="hl opt">;</span>
          ro <span class="hl opt">=</span> rx<span class="hl opt">;</span>

          rtws<span class="hl opt">[</span>p <span class="hl opt">+</span> j<span class="hl opt">] =</span> re <span class="hl opt">+</span> ro<span class="hl opt">;</span>
          itws<span class="hl opt">[</span>p <span class="hl opt">+</span> j<span class="hl opt">] =</span> ie <span class="hl opt">+</span> io<span class="hl opt">;</span>

          rtws<span class="hl opt">[</span>p <span class="hl opt">+</span> j <span class="hl opt">+</span> s<span class="hl opt">] =</span> re <span class="hl opt">-</span> ro<span class="hl opt">;</span>
          itws<span class="hl opt">[</span>p <span class="hl opt">+</span> j <span class="hl opt">+</span> s<span class="hl opt">] =</span> ie <span class="hl opt">-</span> io<span class="hl opt">;</span>

          <span class="hl com">/* jshint maxdepth : false */</span>
          <span class="hl kwa">if</span> <span class="hl opt">(</span>j <span class="hl opt">!==</span> l<span class="hl opt">) {</span>
            rx <span class="hl opt">=</span> rtwdf <span class="hl opt">*</span> rtwdf_ <span class="hl opt">-</span> itwdf <span class="hl opt">*</span> itwdf_<span class="hl opt">;</span>

            itwdf_ <span class="hl opt">=</span> rtwdf <span class="hl opt">*</span> itwdf_ <span class="hl opt">+</span> itwdf <span class="hl opt">*</span> rtwdf_<span class="hl opt">;</span>
            rtwdf_ <span class="hl opt">=</span> rx<span class="hl opt">;</span>
          <span class="hl opt">}</span>
        <span class="hl opt">}</span>
      <span class="hl opt">}</span>
    <span class="hl opt">}</span>
  <span class="hl opt">};</span>

  FFTM<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>guessLen13b <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">guessLen13b</span> <span class="hl opt">(</span>n<span class="hl opt">,</span> m<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> N <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">max</span><span class="hl opt">(</span>m<span class="hl opt">,</span> n<span class="hl opt">) |</span> <span class="hl num">1</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> odd <span class="hl opt">=</span> N <span class="hl opt">&amp;</span> <span class="hl num">1</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span>N <span class="hl opt">=</span> N <span class="hl opt">/</span> <span class="hl num">2</span> <span class="hl opt">|</span> <span class="hl num">0</span><span class="hl opt">;</span> N<span class="hl opt">;</span> N <span class="hl opt">=</span> N <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">1</span><span class="hl opt">) {</span>
      i<span class="hl opt">++;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">return</span> <span class="hl num">1</span> <span class="hl opt">&lt;&lt;</span> i <span class="hl opt">+</span> <span class="hl num">1</span> <span class="hl opt">+</span> odd<span class="hl opt">;</span>
  <span class="hl opt">};</span>

  FFTM<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>conjugate <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">conjugate</span> <span class="hl opt">(</span>rws<span class="hl opt">,</span> iws<span class="hl opt">,</span> N<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>N <span class="hl opt">&lt;=</span> <span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">return</span><span class="hl opt">;</span>

    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> N <span class="hl opt">/</span> <span class="hl num">2</span><span class="hl opt">;</span> i<span class="hl opt">++) {</span>
      <span class="hl kwa">var</span> t <span class="hl opt">=</span> rws<span class="hl opt">[</span>i<span class="hl opt">];</span>

      rws<span class="hl opt">[</span>i<span class="hl opt">] =</span> rws<span class="hl opt">[</span>N <span class="hl opt">-</span> i <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">];</span>
      rws<span class="hl opt">[</span>N <span class="hl opt">-</span> i <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">] =</span> t<span class="hl opt">;</span>

      t <span class="hl opt">=</span> iws<span class="hl opt">[</span>i<span class="hl opt">];</span>

      iws<span class="hl opt">[</span>i<span class="hl opt">] = -</span>iws<span class="hl opt">[</span>N <span class="hl opt">-</span> i <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">];</span>
      iws<span class="hl opt">[</span>N <span class="hl opt">-</span> i <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">] = -</span>t<span class="hl opt">;</span>
    <span class="hl opt">}</span>
  <span class="hl opt">};</span>

  FFTM<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>normalize13b <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">normalize13b</span> <span class="hl opt">(</span>ws<span class="hl opt">,</span> N<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> carry <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> N <span class="hl opt">/</span> <span class="hl num">2</span><span class="hl opt">;</span> i<span class="hl opt">++) {</span>
      <span class="hl kwa">var</span> w <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">round</span><span class="hl opt">(</span>ws<span class="hl opt">[</span><span class="hl num">2</span> <span class="hl opt">*</span> i <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">] /</span> N<span class="hl opt">) *</span> <span class="hl num">0x2000</span> <span class="hl opt">+</span>
        Math<span class="hl opt">.</span><span class="hl kwd">round</span><span class="hl opt">(</span>ws<span class="hl opt">[</span><span class="hl num">2</span> <span class="hl opt">*</span> i<span class="hl opt">] /</span> N<span class="hl opt">) +</span>
        carry<span class="hl opt">;</span>

      ws<span class="hl opt">[</span>i<span class="hl opt">] =</span> w <span class="hl opt">&amp;</span> <span class="hl num">0x3ffffff</span><span class="hl opt">;</span>

      <span class="hl kwa">if</span> <span class="hl opt">(</span>w <span class="hl opt">&lt;</span> <span class="hl num">0x4000000</span><span class="hl opt">) {</span>
        carry <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
        carry <span class="hl opt">=</span> w <span class="hl opt">/</span> <span class="hl num">0x4000000</span> <span class="hl opt">|</span> <span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">return</span> ws<span class="hl opt">;</span>
  <span class="hl opt">};</span>

  FFTM<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>convert13b <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">convert13b</span> <span class="hl opt">(</span>ws<span class="hl opt">,</span> len<span class="hl opt">,</span> rws<span class="hl opt">,</span> N<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> carry <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> len<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
      carry <span class="hl opt">=</span> carry <span class="hl opt">+ (</span>ws<span class="hl opt">[</span>i<span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">);</span>

      rws<span class="hl opt">[</span><span class="hl num">2</span> <span class="hl opt">*</span> i<span class="hl opt">] =</span> carry <span class="hl opt">&amp;</span> <span class="hl num">0x1fff</span><span class="hl opt">;</span> carry <span class="hl opt">=</span> carry <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">13</span><span class="hl opt">;</span>
      rws<span class="hl opt">[</span><span class="hl num">2</span> <span class="hl opt">*</span> i <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">] =</span> carry <span class="hl opt">&amp;</span> <span class="hl num">0x1fff</span><span class="hl opt">;</span> carry <span class="hl opt">=</span> carry <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">13</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl slc">// Pad with zeroes</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">2</span> <span class="hl opt">*</span> len<span class="hl opt">;</span> i <span class="hl opt">&lt;</span> N<span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
      rws<span class="hl opt">[</span>i<span class="hl opt">] =</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwd">assert</span><span class="hl opt">(</span>carry <span class="hl opt">===</span> <span class="hl num">0</span><span class="hl opt">);</span>
    <span class="hl kwd">assert</span><span class="hl opt">((</span>carry <span class="hl opt">&amp; ~</span><span class="hl num">0x1fff</span><span class="hl opt">) ===</span> <span class="hl num">0</span><span class="hl opt">);</span>
  <span class="hl opt">};</span>

  FFTM<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>stub <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">stub</span> <span class="hl opt">(</span>N<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> ph <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Array</span><span class="hl opt">(</span>N<span class="hl opt">);</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> N<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
      ph<span class="hl opt">[</span>i<span class="hl opt">] =</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">return</span> ph<span class="hl opt">;</span>
  <span class="hl opt">};</span>

  FFTM<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>mulp <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">mulp</span> <span class="hl opt">(</span>x<span class="hl opt">,</span> y<span class="hl opt">,</span> out<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> N <span class="hl opt">=</span> <span class="hl num">2</span> <span class="hl opt">*</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">guessLen13b</span><span class="hl opt">(</span>x<span class="hl opt">.</span>length<span class="hl opt">,</span> y<span class="hl opt">.</span>length<span class="hl opt">);</span>

    <span class="hl kwa">var</span> rbt <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">makeRBT</span><span class="hl opt">(</span>N<span class="hl opt">);</span>

    <span class="hl kwa">var</span> _ <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">stub</span><span class="hl opt">(</span>N<span class="hl opt">);</span>

    <span class="hl kwa">var</span> rws <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Array</span><span class="hl opt">(</span>N<span class="hl opt">);</span>
    <span class="hl kwa">var</span> rwst <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Array</span><span class="hl opt">(</span>N<span class="hl opt">);</span>
    <span class="hl kwa">var</span> iwst <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Array</span><span class="hl opt">(</span>N<span class="hl opt">);</span>

    <span class="hl kwa">var</span> nrws <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Array</span><span class="hl opt">(</span>N<span class="hl opt">);</span>
    <span class="hl kwa">var</span> nrwst <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Array</span><span class="hl opt">(</span>N<span class="hl opt">);</span>
    <span class="hl kwa">var</span> niwst <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Array</span><span class="hl opt">(</span>N<span class="hl opt">);</span>

    <span class="hl kwa">var</span> rmws <span class="hl opt">=</span> out<span class="hl opt">.</span>words<span class="hl opt">;</span>
    rmws<span class="hl opt">.</span>length <span class="hl opt">=</span> N<span class="hl opt">;</span>

    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">convert13b</span><span class="hl opt">(</span>x<span class="hl opt">.</span>words<span class="hl opt">,</span> x<span class="hl opt">.</span>length<span class="hl opt">,</span> rws<span class="hl opt">,</span> N<span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">convert13b</span><span class="hl opt">(</span>y<span class="hl opt">.</span>words<span class="hl opt">,</span> y<span class="hl opt">.</span>length<span class="hl opt">,</span> nrws<span class="hl opt">,</span> N<span class="hl opt">);</span>

    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">transform</span><span class="hl opt">(</span>rws<span class="hl opt">,</span> _<span class="hl opt">,</span> rwst<span class="hl opt">,</span> iwst<span class="hl opt">,</span> N<span class="hl opt">,</span> rbt<span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">transform</span><span class="hl opt">(</span>nrws<span class="hl opt">,</span> _<span class="hl opt">,</span> nrwst<span class="hl opt">,</span> niwst<span class="hl opt">,</span> N<span class="hl opt">,</span> rbt<span class="hl opt">);</span>

    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> N<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
      <span class="hl kwa">var</span> rx <span class="hl opt">=</span> rwst<span class="hl opt">[</span>i<span class="hl opt">] *</span> nrwst<span class="hl opt">[</span>i<span class="hl opt">] -</span> iwst<span class="hl opt">[</span>i<span class="hl opt">] *</span> niwst<span class="hl opt">[</span>i<span class="hl opt">];</span>
      iwst<span class="hl opt">[</span>i<span class="hl opt">] =</span> rwst<span class="hl opt">[</span>i<span class="hl opt">] *</span> niwst<span class="hl opt">[</span>i<span class="hl opt">] +</span> iwst<span class="hl opt">[</span>i<span class="hl opt">] *</span> nrwst<span class="hl opt">[</span>i<span class="hl opt">];</span>
      rwst<span class="hl opt">[</span>i<span class="hl opt">] =</span> rx<span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">conjugate</span><span class="hl opt">(</span>rwst<span class="hl opt">,</span> iwst<span class="hl opt">,</span> N<span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">transform</span><span class="hl opt">(</span>rwst<span class="hl opt">,</span> iwst<span class="hl opt">,</span> rmws<span class="hl opt">,</span> _<span class="hl opt">,</span> N<span class="hl opt">,</span> rbt<span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">conjugate</span><span class="hl opt">(</span>rmws<span class="hl opt">,</span> _<span class="hl opt">,</span> N<span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">normalize13b</span><span class="hl opt">(</span>rmws<span class="hl opt">,</span> N<span class="hl opt">);</span>

    out<span class="hl opt">.</span>negative <span class="hl opt">=</span> x<span class="hl opt">.</span>negative <span class="hl opt">^</span> y<span class="hl opt">.</span>negative<span class="hl opt">;</span>
    out<span class="hl opt">.</span>length <span class="hl opt">=</span> x<span class="hl opt">.</span>length <span class="hl opt">+</span> y<span class="hl opt">.</span>length<span class="hl opt">;</span>
    <span class="hl kwa">return</span> out<span class="hl opt">.</span><span class="hl kwd">strip</span><span class="hl opt">();</span>
  <span class="hl opt">};</span>

  <span class="hl slc">// Multiply `this` by `num`</span>
  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>mul <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">mul</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> out <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">BN</span><span class="hl opt">(</span><span class="hl kwa">null</span><span class="hl opt">);</span>
    out<span class="hl opt">.</span>words <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Array</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">+</span> num<span class="hl opt">.</span>length<span class="hl opt">);</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">mulTo</span><span class="hl opt">(</span>num<span class="hl opt">,</span> out<span class="hl opt">);</span>
  <span class="hl opt">};</span>

  <span class="hl slc">// Multiply employing FFT</span>
  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>mulf <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">mulf</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> out <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">BN</span><span class="hl opt">(</span><span class="hl kwa">null</span><span class="hl opt">);</span>
    out<span class="hl opt">.</span>words <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Array</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">+</span> num<span class="hl opt">.</span>length<span class="hl opt">);</span>
    <span class="hl kwa">return</span> <span class="hl kwd">jumboMulTo</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> num<span class="hl opt">,</span> out<span class="hl opt">);</span>
  <span class="hl opt">};</span>

  <span class="hl slc">// In-place Multiplication</span>
  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>imul <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">imul</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">clone</span><span class="hl opt">().</span><span class="hl kwd">mulTo</span><span class="hl opt">(</span>num<span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">);</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>imuln <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">imuln</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwd">assert</span><span class="hl opt">(</span><span class="hl kwa">typeof</span> num <span class="hl opt">===</span> <span class="hl str">'number'</span><span class="hl opt">);</span>
    <span class="hl kwd">assert</span><span class="hl opt">(</span>num <span class="hl opt">&lt;</span> <span class="hl num">0x4000000</span><span class="hl opt">);</span>

    <span class="hl slc">// Carry</span>
    <span class="hl kwa">var</span> carry <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> <span class="hl kwa">this</span><span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
      <span class="hl kwa">var</span> w <span class="hl opt">= (</span><span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">) *</span> num<span class="hl opt">;</span>
      <span class="hl kwa">var</span> lo <span class="hl opt">= (</span>w <span class="hl opt">&amp;</span> <span class="hl num">0x3ffffff</span><span class="hl opt">) + (</span>carry <span class="hl opt">&amp;</span> <span class="hl num">0x3ffffff</span><span class="hl opt">);</span>
      carry <span class="hl opt">&gt;&gt;=</span> <span class="hl num">26</span><span class="hl opt">;</span>
      carry <span class="hl opt">+= (</span>w <span class="hl opt">/</span> <span class="hl num">0x4000000</span><span class="hl opt">) |</span> <span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl slc">// NOTE: lo is 27bit maximum</span>
      carry <span class="hl opt">+=</span> lo <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">26</span><span class="hl opt">;</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] =</span> lo <span class="hl opt">&amp;</span> <span class="hl num">0x3ffffff</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>carry <span class="hl opt">!==</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] =</span> carry<span class="hl opt">;</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>length<span class="hl opt">++;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">return this</span><span class="hl opt">;</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>muln <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">muln</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">clone</span><span class="hl opt">().</span><span class="hl kwd">imuln</span><span class="hl opt">(</span>num<span class="hl opt">);</span>
  <span class="hl opt">};</span>

  <span class="hl slc">// `this` * `this`</span>
  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>sqr <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">sqr</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">mul</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">);</span>
  <span class="hl opt">};</span>

  <span class="hl slc">// `this` * `this` in-place</span>
  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>isqr <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">isqr</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">clone</span><span class="hl opt">());</span>
  <span class="hl opt">};</span>

  <span class="hl slc">// Math.pow(`this`, `num`)</span>
  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>pow <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">pow</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> w <span class="hl opt">=</span> <span class="hl kwd">toBitArray</span><span class="hl opt">(</span>num<span class="hl opt">);</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>w<span class="hl opt">.</span>length <span class="hl opt">===</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">return new</span> <span class="hl kwd">BN</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">);</span>

    <span class="hl slc">// Skip leading zeroes</span>
    <span class="hl kwa">var</span> res <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">;</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> w<span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">++,</span> res <span class="hl opt">=</span> res<span class="hl opt">.</span><span class="hl kwd">sqr</span><span class="hl opt">()) {</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>w<span class="hl opt">[</span>i<span class="hl opt">] !==</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">break</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">if</span> <span class="hl opt">(++</span>i <span class="hl opt">&lt;</span> w<span class="hl opt">.</span>length<span class="hl opt">) {</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> q <span class="hl opt">=</span> res<span class="hl opt">.</span><span class="hl kwd">sqr</span><span class="hl opt">();</span> i <span class="hl opt">&lt;</span> w<span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">++,</span> q <span class="hl opt">=</span> q<span class="hl opt">.</span><span class="hl kwd">sqr</span><span class="hl opt">()) {</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>w<span class="hl opt">[</span>i<span class="hl opt">] ===</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">continue</span><span class="hl opt">;</span>

        res <span class="hl opt">=</span> res<span class="hl opt">.</span><span class="hl kwd">mul</span><span class="hl opt">(</span>q<span class="hl opt">);</span>
      <span class="hl opt">}</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">return</span> res<span class="hl opt">;</span>
  <span class="hl opt">};</span>

  <span class="hl slc">// Shift-left in-place</span>
  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>iushln <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">iushln</span> <span class="hl opt">(</span>bits<span class="hl opt">) {</span>
    <span class="hl kwd">assert</span><span class="hl opt">(</span><span class="hl kwa">typeof</span> bits <span class="hl opt">===</span> <span class="hl str">'number'</span> <span class="hl opt">&amp;&amp;</span> bits <span class="hl opt">&gt;=</span> <span class="hl num">0</span><span class="hl opt">);</span>
    <span class="hl kwa">var</span> r <span class="hl opt">=</span> bits <span class="hl opt">%</span> <span class="hl num">26</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> s <span class="hl opt">= (</span>bits <span class="hl opt">-</span> r<span class="hl opt">) /</span> <span class="hl num">26</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> carryMask <span class="hl opt">= (</span><span class="hl num">0x3ffffff</span> <span class="hl opt">&gt;&gt;&gt; (</span><span class="hl num">26</span> <span class="hl opt">-</span> r<span class="hl opt">)) &lt;&lt; (</span><span class="hl num">26</span> <span class="hl opt">-</span> r<span class="hl opt">);</span>
    <span class="hl kwa">var</span> i<span class="hl opt">;</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>r <span class="hl opt">!==</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      <span class="hl kwa">var</span> carry <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>

      <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> <span class="hl kwa">this</span><span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
        <span class="hl kwa">var</span> newCarry <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] &amp;</span> carryMask<span class="hl opt">;</span>
        <span class="hl kwa">var</span> c <span class="hl opt">= ((</span><span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">) -</span> newCarry<span class="hl opt">) &lt;&lt;</span> r<span class="hl opt">;</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] =</span> c <span class="hl opt">|</span> carry<span class="hl opt">;</span>
        carry <span class="hl opt">=</span> newCarry <span class="hl opt">&gt;&gt;&gt; (</span><span class="hl num">26</span> <span class="hl opt">-</span> r<span class="hl opt">);</span>
      <span class="hl opt">}</span>

      <span class="hl kwa">if</span> <span class="hl opt">(</span>carry<span class="hl opt">) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] =</span> carry<span class="hl opt">;</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>length<span class="hl opt">++;</span>
      <span class="hl opt">}</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>s <span class="hl opt">!==</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span> i <span class="hl opt">&gt;=</span> <span class="hl num">0</span><span class="hl opt">;</span> i<span class="hl opt">--) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i <span class="hl opt">+</span> s<span class="hl opt">] =</span> <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">];</span>
      <span class="hl opt">}</span>

      <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> s<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] =</span> <span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>

      <span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">+=</span> s<span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">strip</span><span class="hl opt">();</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>ishln <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">ishln</span> <span class="hl opt">(</span>bits<span class="hl opt">) {</span>
    <span class="hl slc">// TODO(indutny): implement me</span>
    <span class="hl kwd">assert</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>negative <span class="hl opt">===</span> <span class="hl num">0</span><span class="hl opt">);</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">iushln</span><span class="hl opt">(</span>bits<span class="hl opt">);</span>
  <span class="hl opt">};</span>

  <span class="hl slc">// Shift-right in-place</span>
  <span class="hl slc">// NOTE: `hint` is a lowest bit before trailing zeroes</span>
  <span class="hl slc">// NOTE: if `extended` is present - it will be filled with destroyed bits</span>
  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>iushrn <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">iushrn</span> <span class="hl opt">(</span>bits<span class="hl opt">,</span> hint<span class="hl opt">,</span> extended<span class="hl opt">) {</span>
    <span class="hl kwd">assert</span><span class="hl opt">(</span><span class="hl kwa">typeof</span> bits <span class="hl opt">===</span> <span class="hl str">'number'</span> <span class="hl opt">&amp;&amp;</span> bits <span class="hl opt">&gt;=</span> <span class="hl num">0</span><span class="hl opt">);</span>
    <span class="hl kwa">var</span> h<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>hint<span class="hl opt">) {</span>
      h <span class="hl opt">= (</span>hint <span class="hl opt">- (</span>hint <span class="hl opt">%</span> <span class="hl num">26</span><span class="hl opt">)) /</span> <span class="hl num">26</span><span class="hl opt">;</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
      h <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">var</span> r <span class="hl opt">=</span> bits <span class="hl opt">%</span> <span class="hl num">26</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> s <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">min</span><span class="hl opt">((</span>bits <span class="hl opt">-</span> r<span class="hl opt">) /</span> <span class="hl num">26</span><span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">.</span>length<span class="hl opt">);</span>
    <span class="hl kwa">var</span> mask <span class="hl opt">=</span> <span class="hl num">0x3ffffff</span> <span class="hl opt">^ ((</span><span class="hl num">0x3ffffff</span> <span class="hl opt">&gt;&gt;&gt;</span> r<span class="hl opt">) &lt;&lt;</span> r<span class="hl opt">);</span>
    <span class="hl kwa">var</span> maskedWords <span class="hl opt">=</span> extended<span class="hl opt">;</span>

    h <span class="hl opt">-=</span> s<span class="hl opt">;</span>
    h <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">max</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> h<span class="hl opt">);</span>

    <span class="hl slc">// Extended mode, copy masked part</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>maskedWords<span class="hl opt">) {</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> s<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
        maskedWords<span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] =</span> <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">];</span>
      <span class="hl opt">}</span>
      maskedWords<span class="hl opt">.</span>length <span class="hl opt">=</span> s<span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>s <span class="hl opt">===</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      <span class="hl slc">// No-op, we should not move anything at all</span>
    <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">&gt;</span> s<span class="hl opt">) {</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">-=</span> s<span class="hl opt">;</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> <span class="hl kwa">this</span><span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] =</span> <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i <span class="hl opt">+</span> s<span class="hl opt">];</span>
      <span class="hl opt">}</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] =</span> <span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">var</span> carry <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span> i <span class="hl opt">&gt;=</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp; (</span>carry <span class="hl opt">!==</span> <span class="hl num">0</span> <span class="hl opt">||</span> i <span class="hl opt">&gt;=</span> h<span class="hl opt">);</span> i<span class="hl opt">--) {</span>
      <span class="hl kwa">var</span> word <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] = (</span>carry <span class="hl opt">&lt;&lt; (</span><span class="hl num">26</span> <span class="hl opt">-</span> r<span class="hl opt">)) | (</span>word <span class="hl opt">&gt;&gt;&gt;</span> r<span class="hl opt">);</span>
      carry <span class="hl opt">=</span> word <span class="hl opt">&amp;</span> mask<span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl slc">// Push carried bits as a mask</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>maskedWords <span class="hl opt">&amp;&amp;</span> carry <span class="hl opt">!==</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      maskedWords<span class="hl opt">.</span>words<span class="hl opt">[</span>maskedWords<span class="hl opt">.</span>length<span class="hl opt">++] =</span> carry<span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">===</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] =</span> <span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">strip</span><span class="hl opt">();</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>ishrn <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">ishrn</span> <span class="hl opt">(</span>bits<span class="hl opt">,</span> hint<span class="hl opt">,</span> extended<span class="hl opt">) {</span>
    <span class="hl slc">// TODO(indutny): implement me</span>
    <span class="hl kwd">assert</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>negative <span class="hl opt">===</span> <span class="hl num">0</span><span class="hl opt">);</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">iushrn</span><span class="hl opt">(</span>bits<span class="hl opt">,</span> hint<span class="hl opt">,</span> extended<span class="hl opt">);</span>
  <span class="hl opt">};</span>

  <span class="hl slc">// Shift-left</span>
  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>shln <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">shln</span> <span class="hl opt">(</span>bits<span class="hl opt">) {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">clone</span><span class="hl opt">().</span><span class="hl kwd">ishln</span><span class="hl opt">(</span>bits<span class="hl opt">);</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>ushln <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">ushln</span> <span class="hl opt">(</span>bits<span class="hl opt">) {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">clone</span><span class="hl opt">().</span><span class="hl kwd">iushln</span><span class="hl opt">(</span>bits<span class="hl opt">);</span>
  <span class="hl opt">};</span>

  <span class="hl slc">// Shift-right</span>
  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>shrn <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">shrn</span> <span class="hl opt">(</span>bits<span class="hl opt">) {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">clone</span><span class="hl opt">().</span><span class="hl kwd">ishrn</span><span class="hl opt">(</span>bits<span class="hl opt">);</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>ushrn <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">ushrn</span> <span class="hl opt">(</span>bits<span class="hl opt">) {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">clone</span><span class="hl opt">().</span><span class="hl kwd">iushrn</span><span class="hl opt">(</span>bits<span class="hl opt">);</span>
  <span class="hl opt">};</span>

  <span class="hl slc">// Test if n bit is set</span>
  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>testn <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">testn</span> <span class="hl opt">(</span>bit<span class="hl opt">) {</span>
    <span class="hl kwd">assert</span><span class="hl opt">(</span><span class="hl kwa">typeof</span> bit <span class="hl opt">===</span> <span class="hl str">'number'</span> <span class="hl opt">&amp;&amp;</span> bit <span class="hl opt">&gt;=</span> <span class="hl num">0</span><span class="hl opt">);</span>
    <span class="hl kwa">var</span> r <span class="hl opt">=</span> bit <span class="hl opt">%</span> <span class="hl num">26</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> s <span class="hl opt">= (</span>bit <span class="hl opt">-</span> r<span class="hl opt">) /</span> <span class="hl num">26</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> q <span class="hl opt">=</span> <span class="hl num">1</span> <span class="hl opt">&lt;&lt;</span> r<span class="hl opt">;</span>

    <span class="hl slc">// Fast case: bit is much higher than all existing words</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">&lt;=</span> s<span class="hl opt">)</span> <span class="hl kwa">return false</span><span class="hl opt">;</span>

    <span class="hl slc">// Check bit and return</span>
    <span class="hl kwa">var</span> w <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>s<span class="hl opt">];</span>

    <span class="hl kwa">return</span> <span class="hl opt">!!(</span>w <span class="hl opt">&amp;</span> q<span class="hl opt">);</span>
  <span class="hl opt">};</span>

  <span class="hl slc">// Return only lowers bits of number (in-place)</span>
  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>imaskn <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">imaskn</span> <span class="hl opt">(</span>bits<span class="hl opt">) {</span>
    <span class="hl kwd">assert</span><span class="hl opt">(</span><span class="hl kwa">typeof</span> bits <span class="hl opt">===</span> <span class="hl str">'number'</span> <span class="hl opt">&amp;&amp;</span> bits <span class="hl opt">&gt;=</span> <span class="hl num">0</span><span class="hl opt">);</span>
    <span class="hl kwa">var</span> r <span class="hl opt">=</span> bits <span class="hl opt">%</span> <span class="hl num">26</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> s <span class="hl opt">= (</span>bits <span class="hl opt">-</span> r<span class="hl opt">) /</span> <span class="hl num">26</span><span class="hl opt">;</span>

    <span class="hl kwd">assert</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>negative <span class="hl opt">===</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl str">'imaskn works only with positive numbers'</span><span class="hl opt">);</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>r <span class="hl opt">!==</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      s<span class="hl opt">++;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">min</span><span class="hl opt">(</span>s<span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">.</span>length<span class="hl opt">);</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>r <span class="hl opt">!==</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      <span class="hl kwa">var</span> mask <span class="hl opt">=</span> <span class="hl num">0x3ffffff</span> <span class="hl opt">^ ((</span><span class="hl num">0x3ffffff</span> <span class="hl opt">&gt;&gt;&gt;</span> r<span class="hl opt">) &lt;&lt;</span> r<span class="hl opt">);</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span><span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">] &amp;=</span> mask<span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">strip</span><span class="hl opt">();</span>
  <span class="hl opt">};</span>

  <span class="hl slc">// Return only lowers bits of number</span>
  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>maskn <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">maskn</span> <span class="hl opt">(</span>bits<span class="hl opt">) {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">clone</span><span class="hl opt">().</span><span class="hl kwd">imaskn</span><span class="hl opt">(</span>bits<span class="hl opt">);</span>
  <span class="hl opt">};</span>

  <span class="hl slc">// Add plain number `num` to `this`</span>
  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>iaddn <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">iaddn</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwd">assert</span><span class="hl opt">(</span><span class="hl kwa">typeof</span> num <span class="hl opt">===</span> <span class="hl str">'number'</span><span class="hl opt">);</span>
    <span class="hl kwd">assert</span><span class="hl opt">(</span>num <span class="hl opt">&lt;</span> <span class="hl num">0x4000000</span><span class="hl opt">);</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>num <span class="hl opt">&lt;</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">isubn</span><span class="hl opt">(-</span>num<span class="hl opt">);</span>

    <span class="hl slc">// Possible sign change</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>negative <span class="hl opt">!==</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">===</span> <span class="hl num">1</span> <span class="hl opt">&amp;&amp; (</span><span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">) &lt;</span> num<span class="hl opt">) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] =</span> num <span class="hl opt">- (</span><span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">);</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>negative <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
        <span class="hl kwa">return this</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>

      <span class="hl kwa">this</span><span class="hl opt">.</span>negative <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">isubn</span><span class="hl opt">(</span>num<span class="hl opt">);</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>negative <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>
      <span class="hl kwa">return this</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl slc">// Add without checks</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_iaddn</span><span class="hl opt">(</span>num<span class="hl opt">);</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_iaddn <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">_iaddn</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] +=</span> num<span class="hl opt">;</span>

    <span class="hl slc">// Carry</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> <span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">&amp;&amp;</span> <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] &gt;=</span> <span class="hl num">0x4000000</span><span class="hl opt">;</span> i<span class="hl opt">++) {</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] -=</span> <span class="hl num">0x4000000</span><span class="hl opt">;</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>i <span class="hl opt">===</span> <span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">] =</span> <span class="hl num">1</span><span class="hl opt">;</span>
      <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">]++;</span>
      <span class="hl opt">}</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">max</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>length<span class="hl opt">,</span> i <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">);</span>

    <span class="hl kwa">return this</span><span class="hl opt">;</span>
  <span class="hl opt">};</span>

  <span class="hl slc">// Subtract plain number `num` from `this`</span>
  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>isubn <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">isubn</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwd">assert</span><span class="hl opt">(</span><span class="hl kwa">typeof</span> num <span class="hl opt">===</span> <span class="hl str">'number'</span><span class="hl opt">);</span>
    <span class="hl kwd">assert</span><span class="hl opt">(</span>num <span class="hl opt">&lt;</span> <span class="hl num">0x4000000</span><span class="hl opt">);</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>num <span class="hl opt">&lt;</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">iaddn</span><span class="hl opt">(-</span>num<span class="hl opt">);</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>negative <span class="hl opt">!==</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>negative <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">iaddn</span><span class="hl opt">(</span>num<span class="hl opt">);</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>negative <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>
      <span class="hl kwa">return this</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] -=</span> num<span class="hl opt">;</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">===</span> <span class="hl num">1</span> <span class="hl opt">&amp;&amp;</span> <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] &lt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] = -</span><span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">];</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>negative <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
      <span class="hl slc">// Carry</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> <span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">&amp;&amp;</span> <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] &lt;</span> <span class="hl num">0</span><span class="hl opt">;</span> i<span class="hl opt">++) {</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] +=</span> <span class="hl num">0x4000000</span><span class="hl opt">;</span>
        <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">] -=</span> <span class="hl num">1</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">strip</span><span class="hl opt">();</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>addn <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">addn</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">clone</span><span class="hl opt">().</span><span class="hl kwd">iaddn</span><span class="hl opt">(</span>num<span class="hl opt">);</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>subn <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">subn</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">clone</span><span class="hl opt">().</span><span class="hl kwd">isubn</span><span class="hl opt">(</span>num<span class="hl opt">);</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>iabs <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">iabs</span> <span class="hl opt">() {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>negative <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>

    <span class="hl kwa">return this</span><span class="hl opt">;</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>abs <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">abs</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">clone</span><span class="hl opt">().</span><span class="hl kwd">iabs</span><span class="hl opt">();</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_ishlnsubmul <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">_ishlnsubmul</span> <span class="hl opt">(</span>num<span class="hl opt">,</span> mul<span class="hl opt">,</span> shift<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> len <span class="hl opt">=</span> num<span class="hl opt">.</span>length <span class="hl opt">+</span> shift<span class="hl opt">;</span>
    <span class="hl kwa">var</span> i<span class="hl opt">;</span>

    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_expand</span><span class="hl opt">(</span>len<span class="hl opt">);</span>

    <span class="hl kwa">var</span> w<span class="hl opt">;</span>
    <span class="hl kwa">var</span> carry <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> num<span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
      w <span class="hl opt">= (</span><span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i <span class="hl opt">+</span> shift<span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">) +</span> carry<span class="hl opt">;</span>
      <span class="hl kwa">var</span> right <span class="hl opt">= (</span>num<span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">) *</span> mul<span class="hl opt">;</span>
      w <span class="hl opt">-=</span> right <span class="hl opt">&amp;</span> <span class="hl num">0x3ffffff</span><span class="hl opt">;</span>
      carry <span class="hl opt">= (</span>w <span class="hl opt">&gt;&gt;</span> <span class="hl num">26</span><span class="hl opt">) - ((</span>right <span class="hl opt">/</span> <span class="hl num">0x4000000</span><span class="hl opt">) |</span> <span class="hl num">0</span><span class="hl opt">);</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i <span class="hl opt">+</span> shift<span class="hl opt">] =</span> w <span class="hl opt">&amp;</span> <span class="hl num">0x3ffffff</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">for</span> <span class="hl opt">(;</span> i <span class="hl opt">&lt;</span> <span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">-</span> shift<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
      w <span class="hl opt">= (</span><span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i <span class="hl opt">+</span> shift<span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">) +</span> carry<span class="hl opt">;</span>
      carry <span class="hl opt">=</span> w <span class="hl opt">&gt;&gt;</span> <span class="hl num">26</span><span class="hl opt">;</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i <span class="hl opt">+</span> shift<span class="hl opt">] =</span> w <span class="hl opt">&amp;</span> <span class="hl num">0x3ffffff</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>carry <span class="hl opt">===</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">strip</span><span class="hl opt">();</span>

    <span class="hl slc">// Subtraction overflow</span>
    <span class="hl kwd">assert</span><span class="hl opt">(</span>carry <span class="hl opt">=== -</span><span class="hl num">1</span><span class="hl opt">);</span>
    carry <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> <span class="hl kwa">this</span><span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
      w <span class="hl opt">= -(</span><span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">) +</span> carry<span class="hl opt">;</span>
      carry <span class="hl opt">=</span> w <span class="hl opt">&gt;&gt;</span> <span class="hl num">26</span><span class="hl opt">;</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] =</span> w <span class="hl opt">&amp;</span> <span class="hl num">0x3ffffff</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>negative <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>

    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">strip</span><span class="hl opt">();</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_wordDiv <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">_wordDiv</span> <span class="hl opt">(</span>num<span class="hl opt">,</span> mode<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> shift <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">-</span> num<span class="hl opt">.</span>length<span class="hl opt">;</span>

    <span class="hl kwa">var</span> a <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">clone</span><span class="hl opt">();</span>
    <span class="hl kwa">var</span> b <span class="hl opt">=</span> num<span class="hl opt">;</span>

    <span class="hl slc">// Normalize</span>
    <span class="hl kwa">var</span> bhi <span class="hl opt">=</span> b<span class="hl opt">.</span>words<span class="hl opt">[</span>b<span class="hl opt">.</span>length <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> bhiBits <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_countBits</span><span class="hl opt">(</span>bhi<span class="hl opt">);</span>
    shift <span class="hl opt">=</span> <span class="hl num">26</span> <span class="hl opt">-</span> bhiBits<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>shift <span class="hl opt">!==</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      b <span class="hl opt">=</span> b<span class="hl opt">.</span><span class="hl kwd">ushln</span><span class="hl opt">(</span>shift<span class="hl opt">);</span>
      a<span class="hl opt">.</span><span class="hl kwd">iushln</span><span class="hl opt">(</span>shift<span class="hl opt">);</span>
      bhi <span class="hl opt">=</span> b<span class="hl opt">.</span>words<span class="hl opt">[</span>b<span class="hl opt">.</span>length <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl slc">// Initialize quotient</span>
    <span class="hl kwa">var</span> m <span class="hl opt">=</span> a<span class="hl opt">.</span>length <span class="hl opt">-</span> b<span class="hl opt">.</span>length<span class="hl opt">;</span>
    <span class="hl kwa">var</span> q<span class="hl opt">;</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>mode <span class="hl opt">!==</span> <span class="hl str">'mod'</span><span class="hl opt">) {</span>
      q <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">BN</span><span class="hl opt">(</span><span class="hl kwa">null</span><span class="hl opt">);</span>
      q<span class="hl opt">.</span>length <span class="hl opt">=</span> m <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
      q<span class="hl opt">.</span>words <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Array</span><span class="hl opt">(</span>q<span class="hl opt">.</span>length<span class="hl opt">);</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> q<span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
        q<span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] =</span> <span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">var</span> diff <span class="hl opt">=</span> a<span class="hl opt">.</span><span class="hl kwd">clone</span><span class="hl opt">().</span><span class="hl kwd">_ishlnsubmul</span><span class="hl opt">(</span>b<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> m<span class="hl opt">);</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>diff<span class="hl opt">.</span>negative <span class="hl opt">===</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      a <span class="hl opt">=</span> diff<span class="hl opt">;</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>q<span class="hl opt">) {</span>
        q<span class="hl opt">.</span>words<span class="hl opt">[</span>m<span class="hl opt">] =</span> <span class="hl num">1</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> j <span class="hl opt">=</span> m <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span> j <span class="hl opt">&gt;=</span> <span class="hl num">0</span><span class="hl opt">;</span> j<span class="hl opt">--) {</span>
      <span class="hl kwa">var</span> qj <span class="hl opt">= (</span>a<span class="hl opt">.</span>words<span class="hl opt">[</span>b<span class="hl opt">.</span>length <span class="hl opt">+</span> j<span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">) *</span> <span class="hl num">0x4000000</span> <span class="hl opt">+</span>
        <span class="hl opt">(</span>a<span class="hl opt">.</span>words<span class="hl opt">[</span>b<span class="hl opt">.</span>length <span class="hl opt">+</span> j <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">);</span>

      <span class="hl slc">// NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max</span>
      <span class="hl slc">// (0x7ffffff)</span>
      qj <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">min</span><span class="hl opt">((</span>qj <span class="hl opt">/</span> bhi<span class="hl opt">) |</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">0x3ffffff</span><span class="hl opt">);</span>

      a<span class="hl opt">.</span><span class="hl kwd">_ishlnsubmul</span><span class="hl opt">(</span>b<span class="hl opt">,</span> qj<span class="hl opt">,</span> j<span class="hl opt">);</span>
      <span class="hl kwa">while</span> <span class="hl opt">(</span>a<span class="hl opt">.</span>negative <span class="hl opt">!==</span> <span class="hl num">0</span><span class="hl opt">) {</span>
        qj<span class="hl opt">--;</span>
        a<span class="hl opt">.</span>negative <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
        a<span class="hl opt">.</span><span class="hl kwd">_ishlnsubmul</span><span class="hl opt">(</span>b<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> j<span class="hl opt">);</span>
        <span class="hl kwa">if</span> <span class="hl opt">(!</span>a<span class="hl opt">.</span><span class="hl kwd">isZero</span><span class="hl opt">()) {</span>
          a<span class="hl opt">.</span>negative <span class="hl opt">^=</span> <span class="hl num">1</span><span class="hl opt">;</span>
        <span class="hl opt">}</span>
      <span class="hl opt">}</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>q<span class="hl opt">) {</span>
        q<span class="hl opt">.</span>words<span class="hl opt">[</span>j<span class="hl opt">] =</span> qj<span class="hl opt">;</span>
      <span class="hl opt">}</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>q<span class="hl opt">) {</span>
      q<span class="hl opt">.</span><span class="hl kwd">strip</span><span class="hl opt">();</span>
    <span class="hl opt">}</span>
    a<span class="hl opt">.</span><span class="hl kwd">strip</span><span class="hl opt">();</span>

    <span class="hl slc">// Denormalize</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>mode <span class="hl opt">!==</span> <span class="hl str">'div'</span> <span class="hl opt">&amp;&amp;</span> shift <span class="hl opt">!==</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      a<span class="hl opt">.</span><span class="hl kwd">iushrn</span><span class="hl opt">(</span>shift<span class="hl opt">);</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">return</span> <span class="hl opt">{</span>
      div<span class="hl opt">:</span> q <span class="hl opt">||</span> <span class="hl kwa">null</span><span class="hl opt">,</span>
      mod<span class="hl opt">:</span> a
    <span class="hl opt">};</span>
  <span class="hl opt">};</span>

  <span class="hl slc">// NOTE: 1) `mode` can be set to `mod` to request mod only,</span>
  <span class="hl slc">//       to `div` to request div only, or be absent to</span>
  <span class="hl slc">//       request both div &amp; mod</span>
  <span class="hl slc">//       2) `positive` is true if unsigned mod is requested</span>
  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>divmod <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">divmod</span> <span class="hl opt">(</span>num<span class="hl opt">,</span> mode<span class="hl opt">,</span> positive<span class="hl opt">) {</span>
    <span class="hl kwd">assert</span><span class="hl opt">(!</span>num<span class="hl opt">.</span><span class="hl kwd">isZero</span><span class="hl opt">());</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">isZero</span><span class="hl opt">()) {</span>
      <span class="hl kwa">return</span> <span class="hl opt">{</span>
        div<span class="hl opt">:</span> <span class="hl kwa">new</span> <span class="hl kwd">BN</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">),</span>
        mod<span class="hl opt">:</span> <span class="hl kwa">new</span> <span class="hl kwd">BN</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">)</span>
      <span class="hl opt">};</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">var</span> div<span class="hl opt">,</span> mod<span class="hl opt">,</span> res<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>negative <span class="hl opt">!==</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span> num<span class="hl opt">.</span>negative <span class="hl opt">===</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      res <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">neg</span><span class="hl opt">().</span><span class="hl kwd">divmod</span><span class="hl opt">(</span>num<span class="hl opt">,</span> mode<span class="hl opt">);</span>

      <span class="hl kwa">if</span> <span class="hl opt">(</span>mode <span class="hl opt">!==</span> <span class="hl str">'mod'</span><span class="hl opt">) {</span>
        div <span class="hl opt">=</span> res<span class="hl opt">.</span>div<span class="hl opt">.</span><span class="hl kwd">neg</span><span class="hl opt">();</span>
      <span class="hl opt">}</span>

      <span class="hl kwa">if</span> <span class="hl opt">(</span>mode <span class="hl opt">!==</span> <span class="hl str">'div'</span><span class="hl opt">) {</span>
        mod <span class="hl opt">=</span> res<span class="hl opt">.</span>mod<span class="hl opt">.</span><span class="hl kwd">neg</span><span class="hl opt">();</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>positive <span class="hl opt">&amp;&amp;</span> mod<span class="hl opt">.</span>negative <span class="hl opt">!==</span> <span class="hl num">0</span><span class="hl opt">) {</span>
          mod<span class="hl opt">.</span><span class="hl kwd">iadd</span><span class="hl opt">(</span>num<span class="hl opt">);</span>
        <span class="hl opt">}</span>
      <span class="hl opt">}</span>

      <span class="hl kwa">return</span> <span class="hl opt">{</span>
        div<span class="hl opt">:</span> div<span class="hl opt">,</span>
        mod<span class="hl opt">:</span> mod
      <span class="hl opt">};</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>negative <span class="hl opt">===</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span> num<span class="hl opt">.</span>negative <span class="hl opt">!==</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      res <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">divmod</span><span class="hl opt">(</span>num<span class="hl opt">.</span><span class="hl kwd">neg</span><span class="hl opt">(),</span> mode<span class="hl opt">);</span>

      <span class="hl kwa">if</span> <span class="hl opt">(</span>mode <span class="hl opt">!==</span> <span class="hl str">'mod'</span><span class="hl opt">) {</span>
        div <span class="hl opt">=</span> res<span class="hl opt">.</span>div<span class="hl opt">.</span><span class="hl kwd">neg</span><span class="hl opt">();</span>
      <span class="hl opt">}</span>

      <span class="hl kwa">return</span> <span class="hl opt">{</span>
        div<span class="hl opt">:</span> div<span class="hl opt">,</span>
        mod<span class="hl opt">:</span> res<span class="hl opt">.</span>mod
      <span class="hl opt">};</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">if</span> <span class="hl opt">((</span><span class="hl kwa">this</span><span class="hl opt">.</span>negative <span class="hl opt">&amp;</span> num<span class="hl opt">.</span>negative<span class="hl opt">) !==</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      res <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">neg</span><span class="hl opt">().</span><span class="hl kwd">divmod</span><span class="hl opt">(</span>num<span class="hl opt">.</span><span class="hl kwd">neg</span><span class="hl opt">(),</span> mode<span class="hl opt">);</span>

      <span class="hl kwa">if</span> <span class="hl opt">(</span>mode <span class="hl opt">!==</span> <span class="hl str">'div'</span><span class="hl opt">) {</span>
        mod <span class="hl opt">=</span> res<span class="hl opt">.</span>mod<span class="hl opt">.</span><span class="hl kwd">neg</span><span class="hl opt">();</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>positive <span class="hl opt">&amp;&amp;</span> mod<span class="hl opt">.</span>negative <span class="hl opt">!==</span> <span class="hl num">0</span><span class="hl opt">) {</span>
          mod<span class="hl opt">.</span><span class="hl kwd">isub</span><span class="hl opt">(</span>num<span class="hl opt">);</span>
        <span class="hl opt">}</span>
      <span class="hl opt">}</span>

      <span class="hl kwa">return</span> <span class="hl opt">{</span>
        div<span class="hl opt">:</span> res<span class="hl opt">.</span>div<span class="hl opt">,</span>
        mod<span class="hl opt">:</span> mod
      <span class="hl opt">};</span>
    <span class="hl opt">}</span>

    <span class="hl slc">// Both numbers are positive at this point</span>

    <span class="hl slc">// Strip both numbers to approximate shift value</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>num<span class="hl opt">.</span>length <span class="hl opt">&gt;</span> <span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">||</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">cmp</span><span class="hl opt">(</span>num<span class="hl opt">) &lt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      <span class="hl kwa">return</span> <span class="hl opt">{</span>
        div<span class="hl opt">:</span> <span class="hl kwa">new</span> <span class="hl kwd">BN</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">),</span>
        mod<span class="hl opt">:</span> <span class="hl kwa">this</span>
      <span class="hl opt">};</span>
    <span class="hl opt">}</span>

    <span class="hl slc">// Very short reduction</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>num<span class="hl opt">.</span>length <span class="hl opt">===</span> <span class="hl num">1</span><span class="hl opt">) {</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>mode <span class="hl opt">===</span> <span class="hl str">'div'</span><span class="hl opt">) {</span>
        <span class="hl kwa">return</span> <span class="hl opt">{</span>
          div<span class="hl opt">:</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">divn</span><span class="hl opt">(</span>num<span class="hl opt">.</span>words<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]),</span>
          mod<span class="hl opt">:</span> <span class="hl kwa">null</span>
        <span class="hl opt">};</span>
      <span class="hl opt">}</span>

      <span class="hl kwa">if</span> <span class="hl opt">(</span>mode <span class="hl opt">===</span> <span class="hl str">'mod'</span><span class="hl opt">) {</span>
        <span class="hl kwa">return</span> <span class="hl opt">{</span>
          div<span class="hl opt">:</span> <span class="hl kwa">null</span><span class="hl opt">,</span>
          mod<span class="hl opt">:</span> <span class="hl kwa">new</span> <span class="hl kwd">BN</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">modn</span><span class="hl opt">(</span>num<span class="hl opt">.</span>words<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]))</span>
        <span class="hl opt">};</span>
      <span class="hl opt">}</span>

      <span class="hl kwa">return</span> <span class="hl opt">{</span>
        div<span class="hl opt">:</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">divn</span><span class="hl opt">(</span>num<span class="hl opt">.</span>words<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]),</span>
        mod<span class="hl opt">:</span> <span class="hl kwa">new</span> <span class="hl kwd">BN</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">modn</span><span class="hl opt">(</span>num<span class="hl opt">.</span>words<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]))</span>
      <span class="hl opt">};</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_wordDiv</span><span class="hl opt">(</span>num<span class="hl opt">,</span> mode<span class="hl opt">);</span>
  <span class="hl opt">};</span>

  <span class="hl slc">// Find `this` / `num`</span>
  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>div <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">div</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">divmod</span><span class="hl opt">(</span>num<span class="hl opt">,</span> <span class="hl str">'div'</span><span class="hl opt">,</span> <span class="hl kwa">false</span><span class="hl opt">).</span>div<span class="hl opt">;</span>
  <span class="hl opt">};</span>

  <span class="hl slc">// Find `this` % `num`</span>
  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>mod <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">mod</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">divmod</span><span class="hl opt">(</span>num<span class="hl opt">,</span> <span class="hl str">'mod'</span><span class="hl opt">,</span> <span class="hl kwa">false</span><span class="hl opt">).</span>mod<span class="hl opt">;</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>umod <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">umod</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">divmod</span><span class="hl opt">(</span>num<span class="hl opt">,</span> <span class="hl str">'mod'</span><span class="hl opt">,</span> <span class="hl kwa">true</span><span class="hl opt">).</span>mod<span class="hl opt">;</span>
  <span class="hl opt">};</span>

  <span class="hl slc">// Find Round(`this` / `num`)</span>
  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>divRound <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">divRound</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> dm <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">divmod</span><span class="hl opt">(</span>num<span class="hl opt">);</span>

    <span class="hl slc">// Fast case - exact division</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>dm<span class="hl opt">.</span>mod<span class="hl opt">.</span><span class="hl kwd">isZero</span><span class="hl opt">())</span> <span class="hl kwa">return</span> dm<span class="hl opt">.</span>div<span class="hl opt">;</span>

    <span class="hl kwa">var</span> mod <span class="hl opt">=</span> dm<span class="hl opt">.</span>div<span class="hl opt">.</span>negative <span class="hl opt">!==</span> <span class="hl num">0</span> <span class="hl opt">?</span> dm<span class="hl opt">.</span>mod<span class="hl opt">.</span><span class="hl kwd">isub</span><span class="hl opt">(</span>num<span class="hl opt">) :</span> dm<span class="hl opt">.</span>mod<span class="hl opt">;</span>

    <span class="hl kwa">var</span> half <span class="hl opt">=</span> num<span class="hl opt">.</span><span class="hl kwd">ushrn</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">);</span>
    <span class="hl kwa">var</span> r2 <span class="hl opt">=</span> num<span class="hl opt">.</span><span class="hl kwd">andln</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">);</span>
    <span class="hl kwa">var</span> cmp <span class="hl opt">=</span> mod<span class="hl opt">.</span><span class="hl kwd">cmp</span><span class="hl opt">(</span>half<span class="hl opt">);</span>

    <span class="hl slc">// Round down</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>cmp <span class="hl opt">&lt;</span> <span class="hl num">0</span> <span class="hl opt">||</span> r2 <span class="hl opt">===</span> <span class="hl num">1</span> <span class="hl opt">&amp;&amp;</span> cmp <span class="hl opt">===</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">return</span> dm<span class="hl opt">.</span>div<span class="hl opt">;</span>

    <span class="hl slc">// Round up</span>
    <span class="hl kwa">return</span> dm<span class="hl opt">.</span>div<span class="hl opt">.</span>negative <span class="hl opt">!==</span> <span class="hl num">0</span> <span class="hl opt">?</span> dm<span class="hl opt">.</span>div<span class="hl opt">.</span><span class="hl kwd">isubn</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">) :</span> dm<span class="hl opt">.</span>div<span class="hl opt">.</span><span class="hl kwd">iaddn</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">);</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>modn <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">modn</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwd">assert</span><span class="hl opt">(</span>num <span class="hl opt">&lt;=</span> <span class="hl num">0x3ffffff</span><span class="hl opt">);</span>
    <span class="hl kwa">var</span> p <span class="hl opt">= (</span><span class="hl num">1</span> <span class="hl opt">&lt;&lt;</span> <span class="hl num">26</span><span class="hl opt">) %</span> num<span class="hl opt">;</span>

    <span class="hl kwa">var</span> acc <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span> i <span class="hl opt">&gt;=</span> <span class="hl num">0</span><span class="hl opt">;</span> i<span class="hl opt">--) {</span>
      acc <span class="hl opt">= (</span>p <span class="hl opt">*</span> acc <span class="hl opt">+ (</span><span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">)) %</span> num<span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">return</span> acc<span class="hl opt">;</span>
  <span class="hl opt">};</span>

  <span class="hl slc">// In-place division by number</span>
  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>idivn <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">idivn</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwd">assert</span><span class="hl opt">(</span>num <span class="hl opt">&lt;=</span> <span class="hl num">0x3ffffff</span><span class="hl opt">);</span>

    <span class="hl kwa">var</span> carry <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span> i <span class="hl opt">&gt;=</span> <span class="hl num">0</span><span class="hl opt">;</span> i<span class="hl opt">--) {</span>
      <span class="hl kwa">var</span> w <span class="hl opt">= (</span><span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">) +</span> carry <span class="hl opt">*</span> <span class="hl num">0x4000000</span><span class="hl opt">;</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] = (</span>w <span class="hl opt">/</span> num<span class="hl opt">) |</span> <span class="hl num">0</span><span class="hl opt">;</span>
      carry <span class="hl opt">=</span> w <span class="hl opt">%</span> num<span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">strip</span><span class="hl opt">();</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>divn <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">divn</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">clone</span><span class="hl opt">().</span><span class="hl kwd">idivn</span><span class="hl opt">(</span>num<span class="hl opt">);</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>egcd <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">egcd</span> <span class="hl opt">(</span>p<span class="hl opt">) {</span>
    <span class="hl kwd">assert</span><span class="hl opt">(</span>p<span class="hl opt">.</span>negative <span class="hl opt">===</span> <span class="hl num">0</span><span class="hl opt">);</span>
    <span class="hl kwd">assert</span><span class="hl opt">(!</span>p<span class="hl opt">.</span><span class="hl kwd">isZero</span><span class="hl opt">());</span>

    <span class="hl kwa">var</span> x <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> y <span class="hl opt">=</span> p<span class="hl opt">.</span><span class="hl kwd">clone</span><span class="hl opt">();</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>x<span class="hl opt">.</span>negative <span class="hl opt">!==</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      x <span class="hl opt">=</span> x<span class="hl opt">.</span><span class="hl kwd">umod</span><span class="hl opt">(</span>p<span class="hl opt">);</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
      x <span class="hl opt">=</span> x<span class="hl opt">.</span><span class="hl kwd">clone</span><span class="hl opt">();</span>
    <span class="hl opt">}</span>

    <span class="hl slc">// A * x + B * y = x</span>
    <span class="hl kwa">var</span> A <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">BN</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">);</span>
    <span class="hl kwa">var</span> B <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">BN</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">);</span>

    <span class="hl slc">// C * x + D * y = y</span>
    <span class="hl kwa">var</span> C <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">BN</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">);</span>
    <span class="hl kwa">var</span> D <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">BN</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">);</span>

    <span class="hl kwa">var</span> g <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>

    <span class="hl kwa">while</span> <span class="hl opt">(</span>x<span class="hl opt">.</span><span class="hl kwd">isEven</span><span class="hl opt">() &amp;&amp;</span> y<span class="hl opt">.</span><span class="hl kwd">isEven</span><span class="hl opt">()) {</span>
      x<span class="hl opt">.</span><span class="hl kwd">iushrn</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">);</span>
      y<span class="hl opt">.</span><span class="hl kwd">iushrn</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">);</span>
      <span class="hl opt">++</span>g<span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">var</span> yp <span class="hl opt">=</span> y<span class="hl opt">.</span><span class="hl kwd">clone</span><span class="hl opt">();</span>
    <span class="hl kwa">var</span> xp <span class="hl opt">=</span> x<span class="hl opt">.</span><span class="hl kwd">clone</span><span class="hl opt">();</span>

    <span class="hl kwa">while</span> <span class="hl opt">(!</span>x<span class="hl opt">.</span><span class="hl kwd">isZero</span><span class="hl opt">()) {</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> im <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">; (</span>x<span class="hl opt">.</span>words<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] &amp;</span> im<span class="hl opt">) ===</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span> i <span class="hl opt">&lt;</span> <span class="hl num">26</span><span class="hl opt">; ++</span>i<span class="hl opt">,</span> im <span class="hl opt">&lt;&lt;=</span> <span class="hl num">1</span><span class="hl opt">);</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>i <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
        x<span class="hl opt">.</span><span class="hl kwd">iushrn</span><span class="hl opt">(</span>i<span class="hl opt">);</span>
        <span class="hl kwa">while</span> <span class="hl opt">(</span>i<span class="hl opt">-- &gt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
          <span class="hl kwa">if</span> <span class="hl opt">(</span>A<span class="hl opt">.</span><span class="hl kwd">isOdd</span><span class="hl opt">() ||</span> B<span class="hl opt">.</span><span class="hl kwd">isOdd</span><span class="hl opt">()) {</span>
            A<span class="hl opt">.</span><span class="hl kwd">iadd</span><span class="hl opt">(</span>yp<span class="hl opt">);</span>
            B<span class="hl opt">.</span><span class="hl kwd">isub</span><span class="hl opt">(</span>xp<span class="hl opt">);</span>
          <span class="hl opt">}</span>

          A<span class="hl opt">.</span><span class="hl kwd">iushrn</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">);</span>
          B<span class="hl opt">.</span><span class="hl kwd">iushrn</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">);</span>
        <span class="hl opt">}</span>
      <span class="hl opt">}</span>

      <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> j <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> jm <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">; (</span>y<span class="hl opt">.</span>words<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] &amp;</span> jm<span class="hl opt">) ===</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span> j <span class="hl opt">&lt;</span> <span class="hl num">26</span><span class="hl opt">; ++</span>j<span class="hl opt">,</span> jm <span class="hl opt">&lt;&lt;=</span> <span class="hl num">1</span><span class="hl opt">);</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>j <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
        y<span class="hl opt">.</span><span class="hl kwd">iushrn</span><span class="hl opt">(</span>j<span class="hl opt">);</span>
        <span class="hl kwa">while</span> <span class="hl opt">(</span>j<span class="hl opt">-- &gt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
          <span class="hl kwa">if</span> <span class="hl opt">(</span>C<span class="hl opt">.</span><span class="hl kwd">isOdd</span><span class="hl opt">() ||</span> D<span class="hl opt">.</span><span class="hl kwd">isOdd</span><span class="hl opt">()) {</span>
            C<span class="hl opt">.</span><span class="hl kwd">iadd</span><span class="hl opt">(</span>yp<span class="hl opt">);</span>
            D<span class="hl opt">.</span><span class="hl kwd">isub</span><span class="hl opt">(</span>xp<span class="hl opt">);</span>
          <span class="hl opt">}</span>

          C<span class="hl opt">.</span><span class="hl kwd">iushrn</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">);</span>
          D<span class="hl opt">.</span><span class="hl kwd">iushrn</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">);</span>
        <span class="hl opt">}</span>
      <span class="hl opt">}</span>

      <span class="hl kwa">if</span> <span class="hl opt">(</span>x<span class="hl opt">.</span><span class="hl kwd">cmp</span><span class="hl opt">(</span>y<span class="hl opt">) &gt;=</span> <span class="hl num">0</span><span class="hl opt">) {</span>
        x<span class="hl opt">.</span><span class="hl kwd">isub</span><span class="hl opt">(</span>y<span class="hl opt">);</span>
        A<span class="hl opt">.</span><span class="hl kwd">isub</span><span class="hl opt">(</span>C<span class="hl opt">);</span>
        B<span class="hl opt">.</span><span class="hl kwd">isub</span><span class="hl opt">(</span>D<span class="hl opt">);</span>
      <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
        y<span class="hl opt">.</span><span class="hl kwd">isub</span><span class="hl opt">(</span>x<span class="hl opt">);</span>
        C<span class="hl opt">.</span><span class="hl kwd">isub</span><span class="hl opt">(</span>A<span class="hl opt">);</span>
        D<span class="hl opt">.</span><span class="hl kwd">isub</span><span class="hl opt">(</span>B<span class="hl opt">);</span>
      <span class="hl opt">}</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">return</span> <span class="hl opt">{</span>
      a<span class="hl opt">:</span> C<span class="hl opt">,</span>
      b<span class="hl opt">:</span> D<span class="hl opt">,</span>
      gcd<span class="hl opt">:</span> y<span class="hl opt">.</span><span class="hl kwd">iushln</span><span class="hl opt">(</span>g<span class="hl opt">)</span>
    <span class="hl opt">};</span>
  <span class="hl opt">};</span>

  <span class="hl slc">// This is reduced incarnation of the binary EEA</span>
  <span class="hl slc">// above, designated to invert members of the</span>
  <span class="hl slc">// _prime_ fields F(p) at a maximal speed</span>
  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_invmp <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">_invmp</span> <span class="hl opt">(</span>p<span class="hl opt">) {</span>
    <span class="hl kwd">assert</span><span class="hl opt">(</span>p<span class="hl opt">.</span>negative <span class="hl opt">===</span> <span class="hl num">0</span><span class="hl opt">);</span>
    <span class="hl kwd">assert</span><span class="hl opt">(!</span>p<span class="hl opt">.</span><span class="hl kwd">isZero</span><span class="hl opt">());</span>

    <span class="hl kwa">var</span> a <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> b <span class="hl opt">=</span> p<span class="hl opt">.</span><span class="hl kwd">clone</span><span class="hl opt">();</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>a<span class="hl opt">.</span>negative <span class="hl opt">!==</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      a <span class="hl opt">=</span> a<span class="hl opt">.</span><span class="hl kwd">umod</span><span class="hl opt">(</span>p<span class="hl opt">);</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
      a <span class="hl opt">=</span> a<span class="hl opt">.</span><span class="hl kwd">clone</span><span class="hl opt">();</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">var</span> x1 <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">BN</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">);</span>
    <span class="hl kwa">var</span> x2 <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">BN</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">);</span>

    <span class="hl kwa">var</span> delta <span class="hl opt">=</span> b<span class="hl opt">.</span><span class="hl kwd">clone</span><span class="hl opt">();</span>

    <span class="hl kwa">while</span> <span class="hl opt">(</span>a<span class="hl opt">.</span><span class="hl kwd">cmpn</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">) &gt;</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span> b<span class="hl opt">.</span><span class="hl kwd">cmpn</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">) &gt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> im <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">; (</span>a<span class="hl opt">.</span>words<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] &amp;</span> im<span class="hl opt">) ===</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span> i <span class="hl opt">&lt;</span> <span class="hl num">26</span><span class="hl opt">; ++</span>i<span class="hl opt">,</span> im <span class="hl opt">&lt;&lt;=</span> <span class="hl num">1</span><span class="hl opt">);</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>i <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
        a<span class="hl opt">.</span><span class="hl kwd">iushrn</span><span class="hl opt">(</span>i<span class="hl opt">);</span>
        <span class="hl kwa">while</span> <span class="hl opt">(</span>i<span class="hl opt">-- &gt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
          <span class="hl kwa">if</span> <span class="hl opt">(</span>x1<span class="hl opt">.</span><span class="hl kwd">isOdd</span><span class="hl opt">()) {</span>
            x1<span class="hl opt">.</span><span class="hl kwd">iadd</span><span class="hl opt">(</span>delta<span class="hl opt">);</span>
          <span class="hl opt">}</span>

          x1<span class="hl opt">.</span><span class="hl kwd">iushrn</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">);</span>
        <span class="hl opt">}</span>
      <span class="hl opt">}</span>

      <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> j <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> jm <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">; (</span>b<span class="hl opt">.</span>words<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] &amp;</span> jm<span class="hl opt">) ===</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span> j <span class="hl opt">&lt;</span> <span class="hl num">26</span><span class="hl opt">; ++</span>j<span class="hl opt">,</span> jm <span class="hl opt">&lt;&lt;=</span> <span class="hl num">1</span><span class="hl opt">);</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>j <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
        b<span class="hl opt">.</span><span class="hl kwd">iushrn</span><span class="hl opt">(</span>j<span class="hl opt">);</span>
        <span class="hl kwa">while</span> <span class="hl opt">(</span>j<span class="hl opt">-- &gt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
          <span class="hl kwa">if</span> <span class="hl opt">(</span>x2<span class="hl opt">.</span><span class="hl kwd">isOdd</span><span class="hl opt">()) {</span>
            x2<span class="hl opt">.</span><span class="hl kwd">iadd</span><span class="hl opt">(</span>delta<span class="hl opt">);</span>
          <span class="hl opt">}</span>

          x2<span class="hl opt">.</span><span class="hl kwd">iushrn</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">);</span>
        <span class="hl opt">}</span>
      <span class="hl opt">}</span>

      <span class="hl kwa">if</span> <span class="hl opt">(</span>a<span class="hl opt">.</span><span class="hl kwd">cmp</span><span class="hl opt">(</span>b<span class="hl opt">) &gt;=</span> <span class="hl num">0</span><span class="hl opt">) {</span>
        a<span class="hl opt">.</span><span class="hl kwd">isub</span><span class="hl opt">(</span>b<span class="hl opt">);</span>
        x1<span class="hl opt">.</span><span class="hl kwd">isub</span><span class="hl opt">(</span>x2<span class="hl opt">);</span>
      <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
        b<span class="hl opt">.</span><span class="hl kwd">isub</span><span class="hl opt">(</span>a<span class="hl opt">);</span>
        x2<span class="hl opt">.</span><span class="hl kwd">isub</span><span class="hl opt">(</span>x1<span class="hl opt">);</span>
      <span class="hl opt">}</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">var</span> res<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>a<span class="hl opt">.</span><span class="hl kwd">cmpn</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">) ===</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      res <span class="hl opt">=</span> x1<span class="hl opt">;</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
      res <span class="hl opt">=</span> x2<span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>res<span class="hl opt">.</span><span class="hl kwd">cmpn</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">) &lt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      res<span class="hl opt">.</span><span class="hl kwd">iadd</span><span class="hl opt">(</span>p<span class="hl opt">);</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">return</span> res<span class="hl opt">;</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>gcd <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">gcd</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">isZero</span><span class="hl opt">())</span> <span class="hl kwa">return</span> num<span class="hl opt">.</span><span class="hl kwd">abs</span><span class="hl opt">();</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>num<span class="hl opt">.</span><span class="hl kwd">isZero</span><span class="hl opt">())</span> <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">abs</span><span class="hl opt">();</span>

    <span class="hl kwa">var</span> a <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">clone</span><span class="hl opt">();</span>
    <span class="hl kwa">var</span> b <span class="hl opt">=</span> num<span class="hl opt">.</span><span class="hl kwd">clone</span><span class="hl opt">();</span>
    a<span class="hl opt">.</span>negative <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    b<span class="hl opt">.</span>negative <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>

    <span class="hl slc">// Remove common factor of two</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> shift <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> a<span class="hl opt">.</span><span class="hl kwd">isEven</span><span class="hl opt">() &amp;&amp;</span> b<span class="hl opt">.</span><span class="hl kwd">isEven</span><span class="hl opt">();</span> shift<span class="hl opt">++) {</span>
      a<span class="hl opt">.</span><span class="hl kwd">iushrn</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">);</span>
      b<span class="hl opt">.</span><span class="hl kwd">iushrn</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">do</span> <span class="hl opt">{</span>
      <span class="hl kwa">while</span> <span class="hl opt">(</span>a<span class="hl opt">.</span><span class="hl kwd">isEven</span><span class="hl opt">()) {</span>
        a<span class="hl opt">.</span><span class="hl kwd">iushrn</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">);</span>
      <span class="hl opt">}</span>
      <span class="hl kwa">while</span> <span class="hl opt">(</span>b<span class="hl opt">.</span><span class="hl kwd">isEven</span><span class="hl opt">()) {</span>
        b<span class="hl opt">.</span><span class="hl kwd">iushrn</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">);</span>
      <span class="hl opt">}</span>

      <span class="hl kwa">var</span> r <span class="hl opt">=</span> a<span class="hl opt">.</span><span class="hl kwd">cmp</span><span class="hl opt">(</span>b<span class="hl opt">);</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>r <span class="hl opt">&lt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
        <span class="hl slc">// Swap `a` and `b` to make `a` always bigger than `b`</span>
        <span class="hl kwa">var</span> t <span class="hl opt">=</span> a<span class="hl opt">;</span>
        a <span class="hl opt">=</span> b<span class="hl opt">;</span>
        b <span class="hl opt">=</span> t<span class="hl opt">;</span>
      <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>r <span class="hl opt">===</span> <span class="hl num">0</span> <span class="hl opt">||</span> b<span class="hl opt">.</span><span class="hl kwd">cmpn</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">) ===</span> <span class="hl num">0</span><span class="hl opt">) {</span>
        <span class="hl kwa">break</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>

      a<span class="hl opt">.</span><span class="hl kwd">isub</span><span class="hl opt">(</span>b<span class="hl opt">);</span>
    <span class="hl opt">}</span> <span class="hl kwa">while</span> <span class="hl opt">(</span><span class="hl kwa">true</span><span class="hl opt">);</span>

    <span class="hl kwa">return</span> b<span class="hl opt">.</span><span class="hl kwd">iushln</span><span class="hl opt">(</span>shift<span class="hl opt">);</span>
  <span class="hl opt">};</span>

  <span class="hl slc">// Invert number in the field F(num)</span>
  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>invm <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">invm</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">egcd</span><span class="hl opt">(</span>num<span class="hl opt">).</span>a<span class="hl opt">.</span><span class="hl kwd">umod</span><span class="hl opt">(</span>num<span class="hl opt">);</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>isEven <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">isEven</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] &amp;</span> <span class="hl num">1</span><span class="hl opt">) ===</span> <span class="hl num">0</span><span class="hl opt">;</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>isOdd <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">isOdd</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] &amp;</span> <span class="hl num">1</span><span class="hl opt">) ===</span> <span class="hl num">1</span><span class="hl opt">;</span>
  <span class="hl opt">};</span>

  <span class="hl slc">// And first word and num</span>
  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>andln <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">andln</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span>words<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] &amp;</span> num<span class="hl opt">;</span>
  <span class="hl opt">};</span>

  <span class="hl slc">// Increment at the bit position in-line</span>
  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>bincn <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">bincn</span> <span class="hl opt">(</span>bit<span class="hl opt">) {</span>
    <span class="hl kwd">assert</span><span class="hl opt">(</span><span class="hl kwa">typeof</span> bit <span class="hl opt">===</span> <span class="hl str">'number'</span><span class="hl opt">);</span>
    <span class="hl kwa">var</span> r <span class="hl opt">=</span> bit <span class="hl opt">%</span> <span class="hl num">26</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> s <span class="hl opt">= (</span>bit <span class="hl opt">-</span> r<span class="hl opt">) /</span> <span class="hl num">26</span><span class="hl opt">;</span>
    <span class="hl kwa">var</span> q <span class="hl opt">=</span> <span class="hl num">1</span> <span class="hl opt">&lt;&lt;</span> r<span class="hl opt">;</span>

    <span class="hl slc">// Fast case: bit is much higher than all existing words</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">&lt;=</span> s<span class="hl opt">) {</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">_expand</span><span class="hl opt">(</span>s <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">);</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>s<span class="hl opt">] |=</span> q<span class="hl opt">;</span>
      <span class="hl kwa">return this</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl slc">// Add bit and propagate, if needed</span>
    <span class="hl kwa">var</span> carry <span class="hl opt">=</span> q<span class="hl opt">;</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> s<span class="hl opt">;</span> carry <span class="hl opt">!==</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span> i <span class="hl opt">&lt;</span> <span class="hl kwa">this</span><span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
      <span class="hl kwa">var</span> w <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">;</span>
      w <span class="hl opt">+=</span> carry<span class="hl opt">;</span>
      carry <span class="hl opt">=</span> w <span class="hl opt">&gt;&gt;&gt;</span> <span class="hl num">26</span><span class="hl opt">;</span>
      w <span class="hl opt">&amp;=</span> <span class="hl num">0x3ffffff</span><span class="hl opt">;</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] =</span> w<span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>carry <span class="hl opt">!==</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] =</span> carry<span class="hl opt">;</span>
      <span class="hl kwa">this</span><span class="hl opt">.</span>length<span class="hl opt">++;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return this</span><span class="hl opt">;</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>isZero <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">isZero</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span>length <span class="hl opt">===</span> <span class="hl num">1</span> <span class="hl opt">&amp;&amp;</span> <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] ===</span> <span class="hl num">0</span><span class="hl opt">;</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>cmpn <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">cmpn</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> negative <span class="hl opt">=</span> num <span class="hl opt">&lt;</span> <span class="hl num">0</span><span class="hl opt">;</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>negative <span class="hl opt">!==</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp; !</span>negative<span class="hl opt">)</span> <span class="hl kwa">return</span> <span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>negative <span class="hl opt">===</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span> negative<span class="hl opt">)</span> <span class="hl kwa">return</span> <span class="hl num">1</span><span class="hl opt">;</span>

    <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">strip</span><span class="hl opt">();</span>

    <span class="hl kwa">var</span> res<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">&gt;</span> <span class="hl num">1</span><span class="hl opt">) {</span>
      res <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>negative<span class="hl opt">) {</span>
        num <span class="hl opt">= -</span>num<span class="hl opt">;</span>
      <span class="hl opt">}</span>

      <span class="hl kwd">assert</span><span class="hl opt">(</span>num <span class="hl opt">&lt;=</span> <span class="hl num">0x3ffffff</span><span class="hl opt">,</span> <span class="hl str">'Number is too big'</span><span class="hl opt">);</span>

      <span class="hl kwa">var</span> w <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">;</span>
      res <span class="hl opt">=</span> w <span class="hl opt">===</span> num <span class="hl opt">?</span> <span class="hl num">0</span> <span class="hl opt">:</span> w <span class="hl opt">&lt;</span> num <span class="hl opt">? -</span><span class="hl num">1</span> <span class="hl opt">:</span> <span class="hl num">1</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>negative <span class="hl opt">!==</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">return</span> <span class="hl opt">-</span>res <span class="hl opt">|</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">return</span> res<span class="hl opt">;</span>
  <span class="hl opt">};</span>

  <span class="hl slc">// Compare two numbers and return:</span>
  <span class="hl slc">// 1 - if `this` &gt; `num`</span>
  <span class="hl slc">// 0 - if `this` == `num`</span>
  <span class="hl slc">// -1 - if `this` &lt; `num`</span>
  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>cmp <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">cmp</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>negative <span class="hl opt">!==</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span> num<span class="hl opt">.</span>negative <span class="hl opt">===</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">return</span> <span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>negative <span class="hl opt">===</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span> num<span class="hl opt">.</span>negative <span class="hl opt">!==</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">return</span> <span class="hl num">1</span><span class="hl opt">;</span>

    <span class="hl kwa">var</span> res <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span><span class="hl kwd">ucmp</span><span class="hl opt">(</span>num<span class="hl opt">);</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>negative <span class="hl opt">!==</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">return</span> <span class="hl opt">-</span>res <span class="hl opt">|</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">return</span> res<span class="hl opt">;</span>
  <span class="hl opt">};</span>

  <span class="hl slc">// Unsigned comparison</span>
  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>ucmp <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">ucmp</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl slc">// At this point both numbers have the same sign</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">&gt;</span> num<span class="hl opt">.</span>length<span class="hl opt">)</span> <span class="hl kwa">return</span> <span class="hl num">1</span><span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">&lt;</span> num<span class="hl opt">.</span>length<span class="hl opt">)</span> <span class="hl kwa">return</span> <span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">;</span>

    <span class="hl kwa">var</span> res <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>length <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span> i <span class="hl opt">&gt;=</span> <span class="hl num">0</span><span class="hl opt">;</span> i<span class="hl opt">--) {</span>
      <span class="hl kwa">var</span> a <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl kwa">var</span> b <span class="hl opt">=</span> num<span class="hl opt">.</span>words<span class="hl opt">[</span>i<span class="hl opt">] |</span> <span class="hl num">0</span><span class="hl opt">;</span>

      <span class="hl kwa">if</span> <span class="hl opt">(</span>a <span class="hl opt">===</span> b<span class="hl opt">)</span> <span class="hl kwa">continue</span><span class="hl opt">;</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>a <span class="hl opt">&lt;</span> b<span class="hl opt">) {</span>
        res <span class="hl opt">= -</span><span class="hl num">1</span><span class="hl opt">;</span>
      <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>a <span class="hl opt">&gt;</span> b<span class="hl opt">) {</span>
        res <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>
      <span class="hl kwa">break</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return</span> res<span class="hl opt">;</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>gtn <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">gtn</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">cmpn</span><span class="hl opt">(</span>num<span class="hl opt">) ===</span> <span class="hl num">1</span><span class="hl opt">;</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>gt <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">gt</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">cmp</span><span class="hl opt">(</span>num<span class="hl opt">) ===</span> <span class="hl num">1</span><span class="hl opt">;</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>gten <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">gten</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">cmpn</span><span class="hl opt">(</span>num<span class="hl opt">) &gt;=</span> <span class="hl num">0</span><span class="hl opt">;</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>gte <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">gte</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">cmp</span><span class="hl opt">(</span>num<span class="hl opt">) &gt;=</span> <span class="hl num">0</span><span class="hl opt">;</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>ltn <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">ltn</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">cmpn</span><span class="hl opt">(</span>num<span class="hl opt">) === -</span><span class="hl num">1</span><span class="hl opt">;</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>lt <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">lt</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">cmp</span><span class="hl opt">(</span>num<span class="hl opt">) === -</span><span class="hl num">1</span><span class="hl opt">;</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>lten <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">lten</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">cmpn</span><span class="hl opt">(</span>num<span class="hl opt">) &lt;=</span> <span class="hl num">0</span><span class="hl opt">;</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>lte <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">lte</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">cmp</span><span class="hl opt">(</span>num<span class="hl opt">) &lt;=</span> <span class="hl num">0</span><span class="hl opt">;</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>eqn <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">eqn</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">cmpn</span><span class="hl opt">(</span>num<span class="hl opt">) ===</span> <span class="hl num">0</span><span class="hl opt">;</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>eq <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">eq</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">cmp</span><span class="hl opt">(</span>num<span class="hl opt">) ===</span> <span class="hl num">0</span><span class="hl opt">;</span>
  <span class="hl opt">};</span>

  <span class="hl slc">//</span>
  <span class="hl slc">// A reduce context, could be using montgomery or something better, depending</span>
  <span class="hl slc">// on the `m` itself.</span>
  <span class="hl slc">//</span>
  BN<span class="hl opt">.</span>red <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">red</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwa">return new</span> <span class="hl kwd">Red</span><span class="hl opt">(</span>num<span class="hl opt">);</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>toRed <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">toRed</span> <span class="hl opt">(</span>ctx<span class="hl opt">) {</span>
    <span class="hl kwd">assert</span><span class="hl opt">(!</span><span class="hl kwa">this</span><span class="hl opt">.</span>red<span class="hl opt">,</span> <span class="hl str">'Already a number in reduction context'</span><span class="hl opt">);</span>
    <span class="hl kwd">assert</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>negative <span class="hl opt">===</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl str">'red works only with positives'</span><span class="hl opt">);</span>
    <span class="hl kwa">return</span> ctx<span class="hl opt">.</span><span class="hl kwd">convertTo</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">).</span><span class="hl kwd">_forceRed</span><span class="hl opt">(</span>ctx<span class="hl opt">);</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>fromRed <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">fromRed</span> <span class="hl opt">() {</span>
    <span class="hl kwd">assert</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>red<span class="hl opt">,</span> <span class="hl str">'fromRed works only with numbers in reduction context'</span><span class="hl opt">);</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span>red<span class="hl opt">.</span><span class="hl kwd">convertFrom</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">);</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>_forceRed <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">_forceRed</span> <span class="hl opt">(</span>ctx<span class="hl opt">) {</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>red <span class="hl opt">=</span> ctx<span class="hl opt">;</span>
    <span class="hl kwa">return this</span><span class="hl opt">;</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>forceRed <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">forceRed</span> <span class="hl opt">(</span>ctx<span class="hl opt">) {</span>
    <span class="hl kwd">assert</span><span class="hl opt">(!</span><span class="hl kwa">this</span><span class="hl opt">.</span>red<span class="hl opt">,</span> <span class="hl str">'Already a number in reduction context'</span><span class="hl opt">);</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span><span class="hl kwd">_forceRed</span><span class="hl opt">(</span>ctx<span class="hl opt">);</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>redAdd <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">redAdd</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwd">assert</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>red<span class="hl opt">,</span> <span class="hl str">'redAdd works only with red numbers'</span><span class="hl opt">);</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span>red<span class="hl opt">.</span><span class="hl kwd">add</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> num<span class="hl opt">);</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>redIAdd <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">redIAdd</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwd">assert</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>red<span class="hl opt">,</span> <span class="hl str">'redIAdd works only with red numbers'</span><span class="hl opt">);</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span>red<span class="hl opt">.</span><span class="hl kwd">iadd</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> num<span class="hl opt">);</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>redSub <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">redSub</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwd">assert</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>red<span class="hl opt">,</span> <span class="hl str">'redSub works only with red numbers'</span><span class="hl opt">);</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span>red<span class="hl opt">.</span><span class="hl kwd">sub</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> num<span class="hl opt">);</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>redISub <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">redISub</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwd">assert</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>red<span class="hl opt">,</span> <span class="hl str">'redISub works only with red numbers'</span><span class="hl opt">);</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span>red<span class="hl opt">.</span><span class="hl kwd">isub</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> num<span class="hl opt">);</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>redShl <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">redShl</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwd">assert</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>red<span class="hl opt">,</span> <span class="hl str">'redShl works only with red numbers'</span><span class="hl opt">);</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span>red<span class="hl opt">.</span><span class="hl kwd">shl</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> num<span class="hl opt">);</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>redMul <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">redMul</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwd">assert</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>red<span class="hl opt">,</span> <span class="hl str">'redMul works only with red numbers'</span><span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>red<span class="hl opt">.</span><span class="hl kwd">_verify2</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> num<span class="hl opt">);</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span>red<span class="hl opt">.</span><span class="hl kwd">mul</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> num<span class="hl opt">);</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>redIMul <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">redIMul</span> <span class="hl opt">(</span>num<span class="hl opt">) {</span>
    <span class="hl kwd">assert</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>red<span class="hl opt">,</span> <span class="hl str">'redMul works only with red numbers'</span><span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>red<span class="hl opt">.</span><span class="hl kwd">_verify2</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> num<span class="hl opt">);</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span>red<span class="hl opt">.</span><span class="hl kwd">imul</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> num<span class="hl opt">);</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>redSqr <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">redSqr</span> <span class="hl opt">() {</span>
    <span class="hl kwd">assert</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>red<span class="hl opt">,</span> <span class="hl str">'redSqr works only with red numbers'</span><span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>red<span class="hl opt">.</span><span class="hl kwd">_verify1</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">);</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span>red<span class="hl opt">.</span><span class="hl kwd">sqr</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">);</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>redISqr <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">redISqr</span> <span class="hl opt">() {</span>
    <span class="hl kwd">assert</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>red<span class="hl opt">,</span> <span class="hl str">'redISqr works only with red numbers'</span><span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>red<span class="hl opt">.</span><span class="hl kwd">_verify1</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">);</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span>red<span class="hl opt">.</span><span class="hl kwd">isqr</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">);</span>
  <span class="hl opt">};</span>

  <span class="hl slc">// Square root over p</span>
  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>redSqrt <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">redSqrt</span> <span class="hl opt">() {</span>
    <span class="hl kwd">assert</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>red<span class="hl opt">,</span> <span class="hl str">'redSqrt works only with red numbers'</span><span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>red<span class="hl opt">.</span><span class="hl kwd">_verify1</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">);</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span>red<span class="hl opt">.</span><span class="hl kwd">sqrt</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">);</span>
  <span class="hl opt">};</span>

  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>redInvm <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">redInvm</span> <span class="hl opt">() {</span>
    <span class="hl kwd">assert</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>red<span class="hl opt">,</span> <span class="hl str">'redInvm works only with red numbers'</span><span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>red<span class="hl opt">.</span><span class="hl kwd">_verify1</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">);</span>
    <span class="hl kwa">return this</span><span class="hl opt">.</span>red<span class="hl opt">.</span><span class="hl kwd">invm</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">);</span>
  <span class="hl opt">};</span>

  <span class="hl slc">// Return negative clone of `this` % `red modulo`</span>
  BN<span class="hl opt">.</span><span class="hl kwa">prototype</span><span class="hl opt">.</span>redNeg <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">redNeg</span> <span class="hl opt">() {</span>
    <span class="hl kwd">assert</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>red<span class="hl opt">,</span> <span class="hl str">'redNeg works only with red numbers'</span><span class="hl opt">);</span>
    <span class="hl kwa">this</span><span class="hl opt">.</span>red<span class="hl opt">.</span><span class="hl kwd">